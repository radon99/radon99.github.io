# -*- coding: utf-8 -*-
"""SoH

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aozCal2W3PSs_biQmZnuAXfcpro2JTsq
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.optimizers import Adam
from sklearn.metrics import mean_squared_error
from keras.layers import Dense, LSTM, Dropout

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("/content/drive/MyDrive/battery_SoH.CSV")

data.head()

data.shape # 크기 표현.

X = data.drop(['Capacity','SoH'],axis = 1)
y = data['SoH']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,  random_state = 7)
print('Train shape :',X_train.shape)
print('Test shape :',X_test.shape)

scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train = X_train.reshape(X_train.shape[0],X_train.shape[1],1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1],1)

model=Sequential()
model.add(LSTM(units=50, return_sequences = True, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dropout(0.3))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dense(10))
model.add(Dense(1))
model.compile(loss='mse', optimizer='adam')
training_record = model.fit(X_train, y_train, epochs=60, batch_size=32,
                            validation_data=(X_train, y_train), shuffle=True)
model.summary()

fig, ax = plt.subplots()
plt.plot(training_record.history["loss"], label="Training Loss")
plt.plot(training_record.history["val_loss"], label="Validation Loss")
plt.legend()
fig.suptitle("Loss")
plt.show()

y_pred = model.predict(X_test)

y_pred = y_pred.reshape(-1)
mse_test = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse_test}')