<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-30T02:28:32+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sanghun Developer Portfolio</title><subtitle>안녕하세요. 정상훈의 개발 프로젝트와 기술 작업물을 담은 포트폴리오 사이트입니다. 임베디드, AI, 하드웨어 등 다양한 프로젝트를 확인해보세요.</subtitle><entry><title type="html">IoT BMS 프로젝트</title><link href="http://localhost:4000/programming/cpp/2024/11/26/building-management.html" rel="alternate" type="text/html" title="IoT BMS 프로젝트" /><published>2024-11-26T00:00:00+09:00</published><updated>2024-11-26T00:00:00+09:00</updated><id>http://localhost:4000/programming/cpp/2024/11/26/building-management</id><content type="html" xml:base="http://localhost:4000/programming/cpp/2024/11/26/building-management.html"><![CDATA[<h1 id="iot-bms-프로젝트">IoT BMS 프로젝트</h1>
<div style="text-align: center;">
<a href="/assets/img/posts/bms_main.png" data-lity="">
  <img src="/assets/img/posts/bms_main.png" style="width: auto; max-height: 500px;" />
</a>
</div>

<h2 id="개요">개요</h2>

<h3 id="프로젝트-기간">프로젝트 기간</h3>
<ul>
  <li>2024.11.22 ~ 2024.11.26</li>
</ul>

<h3 id="목적">목적</h3>
<p>STM32, Arduino 그리고 라즈베리파이를 활용한 IoT 기반 빌딩 관리 시스템(BMS)을 구축하여, 다음과 같은 기능을 구현합니다:</p>

<ul>
  <li>층별 장치 제어 및 상태 모니터링</li>
  <li>센서 데이터 수집 및 액츄에이터 제어</li>
  <li>라즈베리파이를 통한 중앙 관리</li>
  <li>SQL 클라이언트(MariaDB)를 통한 센서값 및 층별 상태 저장</li>
  <li>소켓 통신으로 명령어 전송</li>
</ul>

<hr />

<h2 id="주요-기능">주요 기능</h2>

<h3 id="1-모니터링">1. 모니터링</h3>
<ul>
  <li><strong>DHT11 센서</strong>: 실내 온도 및 습도 데이터 측정</li>
  <li><strong>CDS 센서</strong>: 조도(Light Level) 데이터 측정</li>
</ul>

<h3 id="2-액추에이터-제어">2. 액추에이터 제어</h3>
<ul>
  <li><strong>팬 (Fan)</strong>: ON/OFF 제어</li>
  <li><strong>블라인드 (Blind)</strong>: UP/DOWN 제어</li>
  <li><strong>램프 (Lamp)</strong>: ON/OFF 제어</li>
  <li><strong>창문 (Window)</strong>: OPEN/CLOSE 제어</li>
</ul>

<h3 id="3-알람-기능">3. 알람 기능</h3>
<ul>
  <li>건물의 개방 시간과 폐쇄 시간을 설정하여 전체 층의 액추에이터를 자동으로 관리</li>
</ul>

<h3 id="4-앱-제어">4. 앱 제어</h3>
<ul>
  <li>안드로이드 기반 앱을 통해 전체 층의 액추에이터 조작</li>
</ul>

<hr />

<h2 id="하드웨어-사양">하드웨어 사양</h2>

<h3 id="구성-요소">구성 요소</h3>
<ul>
  <li><strong>보드</strong> STM32F4(클라이언트), Arduino Uno(클라이언트), RasPi(서버)</li>
  <li><strong>센서</strong> DHT11 (온습도), CDS (조도)</li>
  <li><strong>입출력 장치</strong>
    <ul>
      <li>버튼</li>
      <li>I2C LCD (16x2) 디스플레이</li>
      <li>서보 모터 (창문 제어)</li>
      <li>스텝 모터 (블라인드 제어)</li>
      <li>DC모터 및 LED</li>
    </ul>
  </li>
</ul>

<h3 id="하드웨어-구조">하드웨어 구조</h3>
<div style="text-align: center;">
<a href="/assets/img/posts/bms3.png" data-lity="">
  <img src="/assets/img/posts/bms3.png" style="width: auto; max-height: 300px;" />
</a>
</div>
<div style="text-align: center;">
<a href="/assets/img/posts/bms4.png" data-lity="">
  <img src="/assets/img/posts/bms4.png" style="width: auto; max-height: 300px;" />
</a>
</div>

<h3 id="연결-다이어그램">연결 다이어그램</h3>
<ul>
  <li><strong>STM32</strong>
    <ul>
      <li>GPIO로 LCD 및 버튼 연결</li>
      <li>Bluetooth 모듈을 통해 통신</li>
    </ul>
  </li>
  <li><strong>Arduino</strong>
    <ul>
      <li>센서 및 액추에이터와 연결</li>
      <li>Wi-Fi 모듈을 통해 통신</li>
    </ul>
  </li>
  <li><strong>Raspberry Pi</strong>:
    <ul>
      <li>MySQL 서버와 통신</li>
      <li>클라이언트 중계 역할</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="소프트웨어-구조">소프트웨어 구조</h2>

<h3 id="아키텍처">아키텍처</h3>

<ol>
  <li><strong>Application Layer</strong>
    <ul>
      <li>STM32와 Arduino의 주요 로직을 구현.</li>
      <li>모드 전환, 명령 처리, 데이터 송신/수신.</li>
    </ul>
  </li>
  <li><strong>Driver Layer</strong>
    <ul>
      <li>LCD, 버튼, 서보 모터 등 하드웨어 제어.</li>
    </ul>
  </li>
  <li><strong>Database Integration</strong>
    <ul>
      <li>SQL 클라이언트와 MySQL 데이터베이스 연동.</li>
    </ul>
  </li>
</ol>

<hr />

<h3 id="명령어-전달-흐름">명령어 전달 흐름</h3>
<p><strong>알람 모드 예시</strong></p>
<div style="text-align: center;">
<a href="/assets/img/posts/bms5.png" data-lity="">
  <img src="/assets/img/posts/bms5.png" style="width: auto; max-height: 500px;" />
</a>
</div>

<h3 id="주요-명령어-및-동작">주요 명령어 및 동작</h3>

<h4 id="stm32-송신"><strong>STM32 송신</strong></h4>

<table>
  <thead>
    <tr>
      <th><strong>송신 명령어</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_SQL]GET@FLOOR@DEVICE</code></td>
      <td>특정 층의 장치 상태 요청.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[GETTIME]</code></td>
      <td>현재 시간 요청.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_SQL]SET@FLOOR@DEVICE@STATE</code></td>
      <td>특정 층 장치 상태 설정.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_SQL]OPEN</code> / <code class="language-plaintext highlighter-rouge">[BMS_SQL]CLOSE</code></td>
      <td>모든 층 장치를 열림/닫힘 설정.</td>
    </tr>
  </tbody>
</table>

<h4 id="stm32-수신"><strong>STM32 수신</strong></h4>

<table>
  <thead>
    <tr>
      <th><strong>수신 명령어</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_SQL]ACTUATOR@FLOOR@DEVICE@STATE</code></td>
      <td>장치 상태 응답.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[GETTIME]YYYY-MM-DD-HH-MM-SS</code></td>
      <td>시간 동기화.</td>
    </tr>
  </tbody>
</table>

<h4 id="arduino-송신"><strong>Arduino 송신</strong></h4>

<table>
  <thead>
    <tr>
      <th><strong>송신 명령어</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_SQL]SENSOR@FLOOR@CDS@HUMI@TEMP</code></td>
      <td>센서 데이터 송신.</td>
    </tr>
  </tbody>
</table>

<h4 id="arduino-수신"><strong>Arduino 수신</strong></h4>

<table>
  <thead>
    <tr>
      <th><strong>수신 명령어</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_%dF]SET@FLOOR@DEVICE@STATE</code></td>
      <td>특정 층 장치 상태 설정.</td>
    </tr>
  </tbody>
</table>

<h4 id="sql-client-송신"><strong>SQL Client 송신</strong></h4>

<table>
  <thead>
    <tr>
      <th><strong>송신 명령어</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_SQL]ACTUATOR@FLOOR@DEVICE@STATE</code></td>
      <td>장치 상태 응답.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_STM32]SENSOR@FLOOR@CDS@HUMI@TEMP</code></td>
      <td>센서 데이터 송신.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_%dF]SET@FLOOR@DEVICE@STATE</code></td>
      <td>특정 층 장치 상태 설정.</td>
    </tr>
  </tbody>
</table>

<h4 id="sql-client-수신"><strong>SQL Client 수신</strong></h4>

<table>
  <thead>
    <tr>
      <th><strong>수신 명령어</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_SQL]GET@FLOOR@DEVICE</code></td>
      <td>장치 상태 요청.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_SQL]SET@FLOOR@DEVICE@STATE</code></td>
      <td>특정 층 장치 상태 설정.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[BMS_SQL]OPEN</code> / <code class="language-plaintext highlighter-rouge">[BMS_SQL]CLOSE</code></td>
      <td>모든 층 장치를 열림/닫힘 설정.</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="프로젝트-작품">프로젝트 작품</h3>
<div style="text-align: center;">
<a href="/assets/img/posts/bms1.png" data-lity="">
  <img src="/assets/img/posts/bms1.png" style="width: auto; max-height: 500px;" />
</a>
</div>

<hr />

<h3 id="작품-시연-영상">작품 시연 영상</h3>
<div style="text-align: center;">
<a href="/assets/img/posts/bms_test.gif" data-lity="">
  <img src="/assets/img/posts/bms_test.gif" style="width: auto; max-height: 500px;" />
</a>
</div>
<p>용량 제한으로 인해 영상의 일부인 블라인드 테스트만 게시.</p>

<hr />

<h2 id="github-저장소">GitHub 저장소</h2>
<p><a href="https://github.com/radon99/radon99.github.io/buildingmanagement">프로젝트 코드 보기</a></p>]]></content><author><name>jsh</name></author><category term="[&quot;programming&quot;, &quot;cpp&quot;]" /><summary type="html"><![CDATA[IoT BMS 프로젝트]]></summary></entry><entry><title type="html">Smart Library 프로젝트</title><link href="http://localhost:4000/programming/python/2024/10/23/smart-library.html" rel="alternate" type="text/html" title="Smart Library 프로젝트" /><published>2024-10-23T00:00:00+09:00</published><updated>2024-10-23T00:00:00+09:00</updated><id>http://localhost:4000/programming/python/2024/10/23/smart-library</id><content type="html" xml:base="http://localhost:4000/programming/python/2024/10/23/smart-library.html"><![CDATA[<h1 id="스마트-도서-관리-시스템">스마트 도서 관리 시스템</h1>
<div style="text-align: center;">
<a href="/assets/img/posts/booktell.jpg" data-lity="">
  <img src="/assets/img/posts/booktell.jpg" style="width: auto; max-height: 500px;" />
</a>
</div>

<h2 id="개요"><strong>개요</strong></h2>
<p>이 프로젝트는 도서관 관리 효율성을 높이고 이용자 편의를 증대시키기 위해 설계되었습니다. AI 기반 시스템을 활용하여 도서 위치 추적 및 자동화된 관리 서비스를 제공합니다.</p>

<h3 id="프로젝트-기간"><strong>프로젝트 기간</strong></h3>
<ul>
  <li>2024.09.26 ~ 2024.10.23</li>
</ul>

<h3 id="개발-일정"><strong>개발 일정</strong></h3>
<div style="text-align: center;">
<a href="/assets/img/posts/WBS.png" data-lity="">
  <img src="/assets/img/posts/WBS.png" style="width: auto; max-height: 500px;" />
</a>
</div>

<hr />

<h2 id="주요-기능"><strong>주요 기능</strong></h2>

<ol>
  <li><strong>책장 상태 동기화</strong>:
    <ul>
      <li>도서관 책장의 데이터를 실시간으로 데이터베이스와 동기화합니다.</li>
    </ul>
  </li>
  <li><strong>도서 위치 추적</strong>:
    <ul>
      <li>특정 책의 위치를 실시간으로 확인하여 업무 효율성을 높입니다.</li>
    </ul>
  </li>
  <li><strong>챗봇</strong>:
    <ul>
      <li>도서관 관련 질의 응답 및 건의사항 전달을 지원합니다.</li>
    </ul>
  </li>
  <li><strong>AI 기반 정렬</strong>:
    <ul>
      <li>책이 혼란스럽게 배치된 경우 AI가 책의 위치를 알려줍니다.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="활용-사례"><strong>활용 사례</strong></h2>
<ol>
  <li><strong>작은 도서관 관리</strong>:
    <ul>
      <li>사서가 없는 도서관의 운영 효율성을 극대화.</li>
    </ul>
  </li>
  <li><strong>도서관 방문자 경험 개선</strong>:
    <ul>
      <li>이용자가 챗봇을 통해 쉽게 필요한 정보를 얻을 수 있음.</li>
    </ul>
  </li>
  <li><strong>업무 경감</strong>:
    <ul>
      <li>사서의 반복 업무를 줄이고 핵심 업무에 집중할 수 있도록 지원.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="프로그램-구성"><strong>프로그램 구성</strong></h2>

<div style="text-align: center;">
<a href="/assets/img/posts/high_level_diagram.bmp" data-lity="">
  <img src="/assets/img/posts/high_level_diagram.bmp" style="width: auto; max-height: 500px;" />
</a>
</div>

<hr />

<h2 id="프로그램-흐름">프로그램 흐름</h2>

<ol>
  <li><strong>시작</strong>: 두 개의 카메라(Cam1, Cam2)에서 각각 프레임을 캡처.</li>
  <li><strong>프레임 전송</strong>: 캡처한 프레임은 각각 <code class="language-plaintext highlighter-rouge">widget_cam_1_queue</code>와 <code class="language-plaintext highlighter-rouge">widget_cam_2_queue</code>로 전송.</li>
  <li><strong>UI 데이터 처리</strong>: UI_Process에서 영상 데이터를 처리.</li>
  <li><strong>책 상태 확인 요청</strong>: 책의 상태 확인을 요청.</li>
  <li><strong>상태 확인</strong>:
    <ul>
      <li>
        <p>책 상태 확인</p>

        <ol>
          <li>
            <p>Yolo 모델을 이용한 책 검출</p>
          </li>
          <li>
            <p>PaddleOCR 모델을 이용한 책 정보 추출</p>
          </li>
          <li>
            <p>OCR 텍스트와 도서 목록 리스트와 유사도 비교</p>
          </li>
        </ol>
      </li>
      <li>
        <p>책 배치 상태 확인</p>

        <p>LIS 알고리즘을 이용한 오배치 도서 판단을 위한 알고리즘</p>
      </li>
    </ul>
  </li>
  <li><strong>유효성 검사</strong>:
    <ul>
      <li>책 상태가 유효한 경우 상태를 업데이트하고 저장한 후 UI를 통해 결과를 표시.</li>
      <li>유효하지 않은 경우 책 상태를 다시 확인.</li>
    </ul>
  </li>
  <li><strong>종료</strong>: 처리 완료 후 흐름 종료.</li>
</ol>

<hr />

<h2 id="기능-설계"><strong>기능 설계</strong></h2>

<h3 id="1-yolo-모델-파인튜닝"><strong>1. Yolo 모델 파인튜닝</strong></h3>
<div style="text-align: center;">
<a href="/assets/img/posts/yolo.png" data-lity="">
  <img src="/assets/img/posts/yolo.png" style="width: auto; max-height: 500px;" />
</a>
</div>
<p>책의 ‘등’ 윤곽선이 필요하기 때문에 최적화를 위해 파인튜닝하였습니다.</p>

<div style="text-align: center;">
<a href="/assets/img/posts/yolo_result.png" data-lity="">
  <img src="/assets/img/posts/yolo_result.png" style="width: auto; max-height: 500px;" />
</a>
</div>
<p>크롭된 이미지들은 객체 인식 오류 없이 매끄러운 경계로 추출되었습니다.</p>

<h3 id="2-paddleocr-모델-책표지-텍스트-파인튜닝"><strong>2. PaddleOCR 모델 책표지 텍스트 파인튜닝</strong></h3>
<div style="text-align: center;">
<a href="/assets/img/posts/ocr_pretrain.png" data-lity="">
  <img src="/assets/img/posts/ocr_pretrain.png" style="width: auto; max-height: 500px;" />
</a>
</div>
<p>AI_hub 사이트의 학습 데이터를 이용하여 PaddleOCR 모델에 맞는 이미지 전처리하였습니다.</p>

<div style="text-align: center;">
<a href="/assets/img/posts/ocr_result.png" data-lity="">
  <img src="/assets/img/posts/ocr_result.png" style="width: auto; max-height: 500px;" />
</a>
</div>
<p>파인튜닝한 모델이 책표지 텍스트 인식에 더 강인하였습니다.</p>

<h3 id="3-도서-상태-기능-작동-테스트"><strong>3. 도서 상태 기능 작동 테스트</strong></h3>
<div style="text-align: center;">
<a href="/assets/img/posts/function_test.png" data-lity="">
  <img src="/assets/img/posts/function_test.png" style="width: auto; max-height: 500px;" />
</a>
</div>
<p>QT를 이용하여 간단한 테스트용 GUI 구성 및 단일 카메라로 테스트하였습니다.</p>

<hr />

<h2 id="프로젝트-결과"><strong>프로젝트 결과</strong></h2>

<h3 id="1-메인-프로그램"><strong>1. 메인 프로그램</strong></h3>
<div style="text-align: center;">
<a href="/assets/img/posts/MainProgram.gif" data-lity="">
  <img src="/assets/img/posts/MainProgram.gif" style="width: auto; max-height: 500px;" />
</a>
</div>
<ul>
  <li>로그인 후 메인 화면에서 책장 2개를 실시간으로 감지하고 상태를 표시합니다.</li>
</ul>

<hr />

<h3 id="2-챗봇"><strong>2. 챗봇</strong></h3>
<div style="text-align: center;">
<a href="/assets/img/posts/chatbot.gif" data-lity="">
  <img src="/assets/img/posts/chatbot.gif" style="width: auto; max-height: 500px;" />
</a>
</div>
<ul>
  <li>Flask 기반으로 PC 및 모바일에서 동작하며, 도서관 건의사항 접수 및 질문 응답을 제공합니다.</li>
</ul>

<hr />

<h3 id="3-건의사항-기능"><strong>3. 건의사항 기능</strong></h3>
<div style="text-align: center;">
<a href="/assets/img/posts/suggestions.gif" data-lity="">
  <img src="/assets/img/posts/suggestions.gif" style="width: auto; max-height: 500px;" />
</a>
</div>
<ul>
  <li>건의사항은 Main Program에서 실시간으로 확인 가능하며, Cam 2번을 통해 사용자 동작을 시각화합니다.</li>
</ul>

<hr />

<h3 id="4-신간-등록"><strong>4. 신간 등록</strong></h3>
<div style="text-align: center;">
<a href="/assets/img/posts/addnewbooks.gif" data-lity="">
  <img src="/assets/img/posts/addnewbooks.gif" style="width: auto; max-height: 500px;" />
</a>
</div>
<div style="text-align: center;">
<a href="/assets/img/posts/addnewbooks_db.gif" data-lity="">
  <img src="/assets/img/posts/addnewbooks_db.gif" style="width: auto; max-height: 500px;" />
</a>
</div>
<ul>
  <li>사서가 엑셀 파일을 업로드하여 신간 도서를 데이터베이스에 자동으로 추가합니다.</li>
</ul>

<hr />

<h2 id="요구-사항"><strong>요구 사항</strong></h2>

<h3 id="하드웨어"><strong>하드웨어</strong></h3>
<ul>
  <li>웹캠.</li>
</ul>

<h3 id="소프트웨어"><strong>소프트웨어</strong></h3>
<ul>
  <li>Python 3.7 이상</li>
  <li>필수 라이브러리:
    <ul>
      <li>OpenCV</li>
      <li>Flask</li>
      <li>PaddleOCR</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="향후-개선-방향"><strong>향후 개선 방향</strong></h2>
<ol>
  <li><strong>PaddleOCR 모델 개선</strong>:
    <ul>
      <li>도서 제목 인식 정확도 향상.</li>
    </ul>
  </li>
  <li><strong>챗봇 기능 확장</strong>:
    <ul>
      <li>자연어 처리(NLP) 기반의 더 나은 응답 제공.</li>
    </ul>
  </li>
  <li><strong>도서 위치 추적 정밀도 개선</strong>:
    <ul>
      <li>AI 모델 최적화를 통해 정확도 향상.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="github-저장소"><strong>GitHub 저장소</strong></h2>
<p><a href="https://github.com/radon99/radon99.github.io/smartlibrary">프로젝트 코드 보기</a></p>]]></content><author><name>jsh</name></author><category term="[&quot;programming&quot;, &quot;python&quot;]" /><summary type="html"><![CDATA[스마트 도서 관리 시스템]]></summary></entry><entry><title type="html">Focus Me 프로젝트</title><link href="http://localhost:4000/programming/python/2024/09/05/focus-me.html" rel="alternate" type="text/html" title="Focus Me 프로젝트" /><published>2024-09-05T00:00:00+09:00</published><updated>2024-09-05T00:00:00+09:00</updated><id>http://localhost:4000/programming/python/2024/09/05/focus-me</id><content type="html" xml:base="http://localhost:4000/programming/python/2024/09/05/focus-me.html"><![CDATA[<h1 id="스마트-트래킹-줌-솔루션">스마트 트래킹 줌 솔루션</h1>
<div style="text-align: center;">
<a href="/assets/img/posts/focusme_main.jpg" data-lity="">
  <img src="/assets/img/posts/focusme_main.jpg" style="width: auto; max-height: 500px;" />
</a>
</div>

<h2 id="개요">개요</h2>
<p>이 프로젝트는 MediaPipe와 OpenCV를 활용하여 실시간으로 얼굴과 손을 추적하고, 이를 기반으로 화면 중심과 줌 레벨을 조정하는 시스템입니다. 부드러운 전환과 사용자 친화적인 시각화를 제공합니다.</p>

<h3 id="프로젝트-기간">프로젝트 기간</h3>
<ul>
  <li>2024.09.02 ~ 2024.09.05</li>
</ul>

<hr />

<h2 id="주요-기능">주요 기능</h2>
<div style="text-align: center;">
<a href="/assets/img/posts/focusme0.jpg" data-lity="">
  <img src="/assets/img/posts/focusme0.jpg" style="width: auto; max-height: 500px;" />
</a>
</div>
<ol>
  <li><strong>실시간 감지</strong>:
    <ul>
      <li>MediaPipe 모델을 사용하여 얼굴과 손을 추적합니다.</li>
    </ul>
  </li>
  <li><strong>동적 줌 조정</strong>:
    <ul>
      <li>감지된 바운딩 박스를 기반으로 줌을 조정하며, 부드러운 화면 이동을 지원합니다.</li>
    </ul>
  </li>
  <li><strong>줌 예외 처리</strong>:
    <ul>
      <li>얼굴이나 손이 카메라 경계 밖으로 나갔을 때 이전 상태의 줌을 유지하여 화면 왜곡을 방지합니다.</li>
    </ul>
  </li>
  <li><strong>사용자 인터페이스</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Esc</code> 키를 통해 프로그램을 종료할 수 있습니다.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="주요-활용-사례">주요 활용 사례</h2>
<ol>
  <li><strong>화상회의 및 온라인 교육 플랫폼</strong></li>
  <li><strong>콘텐츠 제작 및 방송</strong></li>
  <li><strong>소셜 미디어 및 AR 필터</strong></li>
</ol>

<hr />

<h2 id="코드-처리과정">코드 처리과정</h2>
<div style="text-align: center;">
<a href="/assets/img/posts/focusme4.jpg" data-lity="">
  <img src="/assets/img/posts/focusme4.jpg" style="width: auto; max-height: 500px;" />
</a>
</div>
<h3 id="바운딩-박스-생성">바운딩 박스 생성</h3>
<div style="text-align: center;">
<a href="/assets/img/posts/focusme1.jpg" data-lity="">
  <img src="/assets/img/posts/focusme1.jpg" style="width: auto; max-height: 500px;" />
</a>
</div>
<ul>
  <li>Mediapipe는 얼굴 랜드마크 추출, 손 제스처 인식 등 고급 머신러닝 기술을 제공하는 프레임워크입니다.</li>
  <li>이 프로젝트에서는 Mediapipe를 통해 얼굴과 손의 위치를 감지하고 이를 바탕으로 바운딩 박스를 생성합니다.</li>
</ul>

<h3 id="zoom-기능">Zoom 기능</h3>
<div style="text-align: center;">
<a href="/assets/img/posts/focusme3.gif" data-lity="">
  <img src="/assets/img/posts/focusme3.gif" style="width: auto; max-height: 500px;" />
</a>
</div>
<ul>
  <li>줌 영역은 바운딩 박스의 크기와 화면 전체 면적 사이의 비율에 따라 조정됩니다.</li>
</ul>
<div style="text-align: center;">
<a href="/assets/img/posts/focusme2.gif" data-lity="">
  <img src="/assets/img/posts/focusme2.gif" style="width: auto; max-height: 500px;" />
</a>
</div>
<ul>
  <li><strong>Smooth Zoom</strong>:
    <ul>
      <li>현재 줌 비율과 목표 줌 비율의 차이를 기준으로 부드럽게 전환되도록 설계되었습니다.</li>
      <li><code class="language-plaintext highlighter-rouge">smooth_factor</code> 값을 이용하여 화면 전환이 자연스럽게 이루어집니다.</li>
    </ul>
  </li>
</ul>

<h3 id="문제-해결-과정">문제 해결 과정</h3>
<div style="text-align: center;">
<a href="/assets/img/posts/focusme5.gif" data-lity="">
  <img src="/assets/img/posts/focusme5.gif" style="width: auto; max-height: 500px;" />
</a>
</div>
<ol>
  <li><strong>경계 밖 이동 시 이미지 왜곡</strong>:
    <ul>
      <li>줌 영역이 원본 카메라 프레임 밖으로 나가지 않도록 제한.</li>
    </ul>
  </li>
  <li><strong>줌 유지 기능</strong>:
    <ul>
      <li>이전 프레임의 줌 상태를 활용하여 부드럽게 화면 전환.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="요구-사항">요구 사항</h2>

<h3 id="하드웨어">하드웨어</h3>
<ul>
  <li>실시간 비디오 피드를 위한 웹캠.</li>
</ul>

<h3 id="소프트웨어">소프트웨어</h3>
<ul>
  <li>Python 3.7 이상</li>
  <li>필요한 라이브러리:
    <ul>
      <li>OpenCV</li>
      <li>MediaPipe</li>
    </ul>
  </li>
</ul>

<p>의존성을 설치하려면 다음 명령어를 실행하세요:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>opencv-python mediapipe
</code></pre></div></div>

<hr />

<h2 id="실행-방법">실행 방법</h2>
<ol>
  <li>스크립트를 실행합니다:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python focus_me.py
</code></pre></div>    </div>
  </li>
  <li>웹캠 접근을 허용합니다.</li>
  <li>얼굴과 손 위치에 따라 실시간으로 줌과 추적이 이루어집니다.</li>
</ol>

<hr />

<h2 id="향후-발전-방향">향후 발전 방향</h2>
<ol>
  <li><strong>GUI 구현</strong>:
    <ul>
      <li>사용자가 줌 비율, 이동 속도 등의 설정값을 직접 입력할 수 있는 인터페이스 추가.</li>
    </ul>
  </li>
  <li><strong>발화자 포커싱</strong>:
    <ul>
      <li>여러 사람이 있을 때 발화자에게 화면 포커싱.</li>
    </ul>
  </li>
  <li><strong>스티칭 기술</strong>:
    <ul>
      <li>여러 대의 카메라를 활용해 파노라마 이미지를 생성하고 넓은 영역을 커버.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="github-저장소">GitHub 저장소</h2>
<p><a href="https://github.com/radon99/radon99.github.io/focusme">프로젝트 코드 보기</a></p>]]></content><author><name>jsh</name></author><category term="[&quot;programming&quot;, &quot;python&quot;]" /><summary type="html"><![CDATA[스마트 트래킹 줌 솔루션]]></summary></entry><entry><title type="html">Digital Fan 프로젝트</title><link href="http://localhost:4000/programming/cpp/2024/08/09/digital-fan.html" rel="alternate" type="text/html" title="Digital Fan 프로젝트" /><published>2024-08-09T00:00:00+09:00</published><updated>2024-08-09T00:00:00+09:00</updated><id>http://localhost:4000/programming/cpp/2024/08/09/digital-fan</id><content type="html" xml:base="http://localhost:4000/programming/cpp/2024/08/09/digital-fan.html"><![CDATA[<h1 id="digital-fan-프로젝트"><strong>Digital Fan 프로젝트</strong></h1>
<div style="text-align: center;">
<a href="/assets/img/posts/DigitalFan_main.jpg" data-lity="">
  <img src="/assets/img/posts/DigitalFan_main.jpg" style="width: auto; max-height: 500px;" />
</a>
</div>

<h2 id="개요">개요</h2>

<h3 id="프로젝트-기간">프로젝트 기간</h3>
<ul>
  <li>2024.07.23 ~ 2024.08.09</li>
</ul>

<h3 id="목적">목적</h3>
<p>ATmega128 마이크로컨트롤러를 기반으로 설계된 선풍기 제어 시스템으로, 다음과 같은 기능을 포함합니다:</p>

<ul>
  <li>자동/수동 모드 전환 및 풍속 제어</li>
  <li>타이머 설정 기능</li>
  <li>부저를 활용한 음악 재생</li>
</ul>

<hr />

<h2 id="주요-기능">주요 기능</h2>

<ol>
  <li><strong>자동 모드</strong>: 자연풍을 구현하여 선풍기 속도 자동 조절</li>
  <li><strong>수동 모드</strong>: 사용자가 직접 풍속(저속, 중속, 고속) 및 타이머 설정</li>
  <li><strong>디스플레이 출력</strong>:
    <ul>
      <li>16x2 LCD를 통해 현재 모드와 상태 표시</li>
      <li>7-세그먼트 디스플레이(FND)를 통해 남은 시간 표시</li>
    </ul>
  </li>
  <li><strong>UART 제어</strong>: 직렬 통신을 통한 외부 명령 수신 및 제어</li>
  <li><strong>부저 음악 재생</strong>: 바람 세기에 따른 음악 속도 조절 및 재생</li>
</ol>

<hr />

<h2 id="하드웨어-사양">하드웨어 사양</h2>

<h3 id="구성-요소">구성 요소</h3>
<ul>
  <li><strong>MCU</strong>: ATmega128 (16MHz 클럭)</li>
  <li><strong>입력 장치</strong>: 버튼, UART</li>
  <li><strong>출력 장치</strong>:
    <ul>
      <li>16x2 LCD</li>
      <li>7-세그먼트 디스플레이(FND)</li>
      <li>DC 모터</li>
      <li>부저</li>
    </ul>
  </li>
  <li><strong>제어 방식</strong>: PWM을 활용한 선풍기 속도 제어</li>
</ul>

<h3 id="연결-다이어그램">연결 다이어그램</h3>
<ul>
  <li><strong>버튼</strong>: GPIO 핀 연결, Pull-up 방식</li>
  <li><strong>LCD</strong>: 데이터 핀 8개 및 제어 핀 3개로 병렬 연결</li>
  <li><strong>FND</strong>: 공통 캐소드 방식, 병렬 연결</li>
  <li><strong>UART</strong>: TX, RX 핀을 통해 직렬 USB 터미널 연결</li>
</ul>

<hr />

<h2 id="소프트웨어-구조">소프트웨어 구조</h2>

<h3 id="계층형-아키텍처">계층형 아키텍처</h3>
<div style="text-align: center;">
<a href="/assets/img/posts/sw_stack.jpg" data-lity="">
  <img src="/assets/img/posts/sw_stack.jpg" style="width: auto; max-height: 500px;" />
</a>
</div>

<ol>
  <li><strong>Application Layer</strong>:
    <ul>
      <li>메인 로직, 입력 처리, 데이터 관리, 디스플레이 갱신</li>
    </ul>
  </li>
  <li><strong>Driver Layer</strong>:
    <ul>
      <li>하드웨어 장치(Button, LCD, FND, Buzzer)의 추상화된 인터페이스 제공</li>
    </ul>
  </li>
  <li><strong>Peripheral Layer</strong>:
    <ul>
      <li>GPIO, 타이머, UART 등의 저수준 하드웨어 제어</li>
    </ul>
  </li>
</ol>

<h3 id="주요-소프트웨어-기능">주요 소프트웨어 기능</h3>
<div style="text-align: center;">
<a href="/assets/img/posts/fsm.jpg" data-lity="">
  <img src="/assets/img/posts/fsm.jpg" style="width: auto; max-height: 500px;" />
</a>
</div>

<ol>
  <li><strong>시스템 초기화</strong>
    <ul>
      <li>GPIO, 타이머, LCD, FND, UART, 부저 초기화</li>
    </ul>
  </li>
  <li><strong>입력 처리</strong>
    <ul>
      <li>버튼 : GPIO 핀에 연결하여 디바운싱 입력 처리, 눌림/떼어짐 구현</li>
      <li>UART : 명령을 통해 모드 전환 및 설정 변경</li>
    </ul>
  </li>
  <li><strong>모드 전환</strong>
    <ul>
      <li>자동 모드: 66~100% 범위의 랜덤한 Duty Cycle로 자연풍 구현</li>
      <li>수동 모드: 사용자가 직접 풍속 조절 및 타이머 설정</li>
    </ul>
  </li>
  <li><strong>디스플레이 갱신</strong>
    <ul>
      <li>LCD에 현재 상태 출력, 타이머 구동시 제품명 바운스 기능(1초마다 1칸씩 이동), 타이머 구동하지 않을 때는 제품명 가운데 정렬</li>
      <li>FND에 남은 시간 또는 풍속 표시</li>
    </ul>
  </li>
  <li><strong>PWM 기반 속도 제어</strong>
    <ul>
      <li>Prescaler 1/64 설정</li>
      <li>FAST PWM 모드, 비반전 모드</li>
    </ul>
  </li>
  <li><strong>부저 음악 재생</strong>
    <ul>
      <li>주파수를 조합하여 음악 배열 구성</li>
      <li>바람 세기에 따라 음 유지 시간 조정</li>
      <li>음 사이에 300ms 간격 유지</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="빌드-및-실행">빌드 및 실행</h2>

<h3 id="빌드-환경">빌드 환경</h3>
<ul>
  <li><strong>운영체제</strong>: Windows 10 x64</li>
  <li><strong>프로그래밍 언어</strong>: C</li>
  <li><strong>컴파일러</strong>: AVR GCC</li>
  <li><strong>IDE</strong>: Microchip Studio</li>
</ul>

<h3 id="실행-방법">실행 방법</h3>
<ol>
  <li>프로젝트를 빌드하여 HEX 파일 생성</li>
  <li>ATmega128에 업로드</li>
  <li>보드 전원을 연결하여 실행</li>
  <li>버튼으로 모드 및 설정 변경</li>
</ol>

<hr />

<h2 id="lcd-출력화면-예시">LCD 출력화면 예시</h2>

<ol>
  <li>타이머 종료
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Digital Fan!
  STOP  00:00
</code></pre></div>    </div>
  </li>
  <li>타이머 작동
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Digital Fan!
  LOW   02:57
</code></pre></div>    </div>
  </li>
  <li>수동 모드
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Digital Fan!
  LOW   00:00
</code></pre></div>    </div>
  </li>
  <li>오토 모드
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Digital Fan!
  AUTO  00:00
</code></pre></div>    </div>
  </li>
</ol>

<hr />

<h2 id="프로젝트-디렉토리-구조">프로젝트 디렉토리 구조</h2>
<div style="text-align: center;">
<a href="/assets/img/posts/sw_architecture.jpg" data-lity="">
  <img src="/assets/img/posts/sw_architecture.jpg" style="width: auto; max-height: 500px;" />
</a>
</div>

<div style="display: flex; justify-content: center; align-items: center; flex-direction: column; font-family: monospace;">
  <pre style="text-align: left;">
DigitalFan
├── AP                  # 애플리케이션 계층
│   ├── apMain.c       # 메인 로직
│   ├── Listener       # 입력 처리
│   ├── Model          # 데이터 관리
│   ├── Presenter      # 디스플레이 관리
│   └── Service        # 선풍기 제어
├── driver              # 하드웨어 드라이버
│   ├── Button         # 버튼 입력 처리
│   ├── FND            # 7-세그먼트 디스플레이
│   ├── LCD            # LCD 디스플레이
│   └── Buzzer         # 부저 음악 재생
├── periph              # 주변 장치
│   ├── GPIO           # GPIO 제어
│   ├── TIM            # 타이머 관리
│   └── UART0          # UART 통신
├── Debug               # 빌드된 실행 파일
└── README.md           # 프로젝트 설명
  </pre>
</div>

<hr />

<h2 id="참고-자료">참고 자료</h2>
<ul>
  <li><a href="https://ww1.microchip.com/downloads/en/devicedoc/atmel-8151-8-bit-avr-atmega128_datasheet.pdf">ATmega128 데이터시트</a></li>
</ul>

<hr />

<h2 id="github-저장소">GitHub 저장소</h2>
<p><a href="https://github.com/radon99/radon99.github.io/tree/main/projects/DigitalFan">프로젝트 코드 보기</a></p>]]></content><author><name>jsh</name></author><category term="[&quot;programming&quot;, &quot;cpp&quot;]" /><summary type="html"><![CDATA[Digital Fan 프로젝트]]></summary></entry></feed>