
nucleo_f411re_uart2_printf_uart6_bt_clcd_dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007034  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  080071d4  080071d4  000081d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c0  080075c0  000090bc  2**0
                  CONTENTS
  4 .ARM          00000008  080075c0  080075c0  000085c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c8  080075c8  000090bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c8  080075c8  000085c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075cc  080075cc  000085cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  080075d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200000bc  0800768c  000090bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800768c  000093f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f98  00000000  00000000  000090ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243c  00000000  00000000  0001a084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4a  00000000  00000000  0001d588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b6b  00000000  00000000  0001e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139eb  00000000  00000000  00035e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d6f  00000000  00000000  00049828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e0  00000000  00000000  000dc5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000e1cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071bc 	.word	0x080071bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	080071bc 	.word	0x080071bc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 80005a8:	4a18      	ldr	r2, [pc, #96]	@ (800060c <LCD_init+0x6c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 80005ae:	2032      	movs	r0, #50	@ 0x32
 80005b0:	f001 fda6 	bl	8002100 <HAL_Delay>
	LCD_cmdMode();
 80005b4:	f000 f89a 	bl	80006ec <LCD_cmdMode>
	LCD_writeMode();
 80005b8:	f000 f8b8 	bl	800072c <LCD_writeMode>
	LCD_sendData(0x30);
 80005bc:	2030      	movs	r0, #48	@ 0x30
 80005be:	f000 f849 	bl	8000654 <LCD_sendData>
	HAL_Delay(5);
 80005c2:	2005      	movs	r0, #5
 80005c4:	f001 fd9c 	bl	8002100 <HAL_Delay>
	LCD_sendData(0x30);
 80005c8:	2030      	movs	r0, #48	@ 0x30
 80005ca:	f000 f843 	bl	8000654 <LCD_sendData>
	HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f001 fd96 	bl	8002100 <HAL_Delay>
	LCD_sendData(0x30);
 80005d4:	2030      	movs	r0, #48	@ 0x30
 80005d6:	f000 f83d 	bl	8000654 <LCD_sendData>
	LCD_sendData(0x20);
 80005da:	2020      	movs	r0, #32
 80005dc:	f000 f83a 	bl	8000654 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 80005e0:	2028      	movs	r0, #40	@ 0x28
 80005e2:	f000 f85f 	bl	80006a4 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 80005e6:	2008      	movs	r0, #8
 80005e8:	f000 f85c 	bl	80006a4 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 f859 	bl	80006a4 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 80005f2:	2006      	movs	r0, #6
 80005f4:	f000 f856 	bl	80006a4 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 80005f8:	200c      	movs	r0, #12
 80005fa:	f000 f853 	bl	80006a4 <LCD_sendByte>
	LCD_backLightOn();
 80005fe:	f000 f865 	bl	80006cc <LCD_backLightOn>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000dc 	.word	0x200000dc

08000610 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 800061a:	f000 f867 	bl	80006ec <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 800061e:	f000 f885 	bl	800072c <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f83d 	bl	80006a4 <LCD_sendByte>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 800063c:	f000 f866 	bl	800070c <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 8000640:	f000 f874 	bl	800072c <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f82c 	bl	80006a4 <LCD_sendByte>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 800065e:	f000 f875 	bl	800074c <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 8000662:	2002      	movs	r0, #2
 8000664:	f001 fd4c 	bl	8002100 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <LCD_sendData+0x4c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	b25a      	sxtb	r2, r3
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	f023 030f 	bic.w	r3, r3, #15
 800067c:	b25b      	sxtb	r3, r3
 800067e:	4313      	orrs	r3, r2
 8000680:	b25b      	sxtb	r3, r3
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <LCD_sendData+0x4c>)
 8000686:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000688:	f000 f880 	bl	800078c <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 800068c:	f000 f86e 	bl	800076c <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 8000690:	2002      	movs	r0, #2
 8000692:	f001 fd35 	bl	8002100 <HAL_Delay>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000d8 	.word	0x200000d8

080006a4 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffcf 	bl	8000654 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffc8 	bl	8000654 <LCD_sendData>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <LCD_backLightOn>:
void LCD_backLightOn() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <LCD_backLightOn+0x1c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <LCD_backLightOn+0x1c>)
 80006dc:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006de:	f000 f855 	bl	800078c <LCD_sendDataToInterface>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000d8 	.word	0x200000d8

080006ec <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <LCD_cmdMode+0x1c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b03      	ldr	r3, [pc, #12]	@ (8000708 <LCD_cmdMode+0x1c>)
 80006fc:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006fe:	f000 f845 	bl	800078c <LCD_sendDataToInterface>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000d8 	.word	0x200000d8

0800070c <LCD_charMode>:

void LCD_charMode() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <LCD_charMode+0x1c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <LCD_charMode+0x1c>)
 800071c:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800071e:	f000 f835 	bl	800078c <LCD_sendDataToInterface>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000d8 	.word	0x200000d8

0800072c <LCD_writeMode>:

void LCD_writeMode() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <LCD_writeMode+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f023 0302 	bic.w	r3, r3, #2
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <LCD_writeMode+0x1c>)
 800073c:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800073e:	f000 f825 	bl	800078c <LCD_sendDataToInterface>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000d8 	.word	0x200000d8

0800074c <LCD_enableHigh>:

void LCD_enableHigh() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <LCD_enableHigh+0x1c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b03      	ldr	r3, [pc, #12]	@ (8000768 <LCD_enableHigh+0x1c>)
 800075c:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800075e:	f000 f815 	bl	800078c <LCD_sendDataToInterface>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000d8 	.word	0x200000d8

0800076c <LCD_enableLow>:

void LCD_enableLow() {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <LCD_enableLow+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f023 0304 	bic.w	r3, r3, #4
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b03      	ldr	r3, [pc, #12]	@ (8000788 <LCD_enableLow+0x1c>)
 800077c:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800077e:	f000 f805 	bl	800078c <LCD_sendDataToInterface>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000d8 	.word	0x200000d8

0800078c <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <LCD_sendDataToInterface+0x20>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	@ 0x64
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2301      	movs	r3, #1
 800079c:	4a04      	ldr	r2, [pc, #16]	@ (80007b0 <LCD_sendDataToInterface+0x24>)
 800079e:	214e      	movs	r1, #78	@ 0x4e
 80007a0:	f002 f956 	bl	8002a50 <HAL_I2C_Master_Transmit>
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000dc 	.word	0x200000dc
 80007b0:	200000d8 	.word	0x200000d8

080007b4 <LCD_writeString>:

void LCD_writeString(char *str) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e009      	b.n	80007d6 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff31 	bl	8000632 <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1ef      	bne.n	80007c2 <LCD_writeString+0xe>
	}
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	019b      	lsls	r3, r3, #6
 8000810:	b2da      	uxtb	r2, r3
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	4413      	add	r3, r2
 8000816:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	3b80      	subs	r3, #128	@ 0x80
 800081c:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fef5 	bl	8000610 <LCD_writeCmdData>
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	603a      	str	r2, [r7, #0]
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	460b      	mov	r3, r1
 800083c:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800083e:	79ba      	ldrb	r2, [r7, #6]
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ffd1 	bl	80007ec <LCD_gotoXY>
	LCD_writeString(str);
 800084a:	6838      	ldr	r0, [r7, #0]
 800084c:	f7ff ffb2 	bl	80007b4 <LCD_writeString>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <LCD_clear>:

void LCD_clear() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
    LCD_writeCmdData(LCD_DISPLAY_CLEAR);
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff fed7 	bl	8000610 <LCD_writeCmdData>
    HAL_Delay(2);
 8000862:	2002      	movs	r0, #2
 8000864:	f001 fc4c 	bl	8002100 <HAL_Delay>
    LCD_writeCmdData(LCD_ENTRY_MODE_SET);
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff fed1 	bl	8000610 <LCD_writeCmdData>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b0a2      	sub	sp, #136	@ 0x88
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087a:	f001 fbcf 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087e:	f000 f8af 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000882:	f000 fa0b 	bl	8000c9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000886:	f000 f9b5 	bl	8000bf4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800088a:	f000 f9dd 	bl	8000c48 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 800088e:	f000 f935 	bl	8000afc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000892:	f000 f961 	bl	8000b58 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000896:	f000 f90d 	bl	8000ab4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 800089a:	2201      	movs	r2, #1
 800089c:	493d      	ldr	r1, [pc, #244]	@ (8000994 <main+0x120>)
 800089e:	483e      	ldr	r0, [pc, #248]	@ (8000998 <main+0x124>)
 80008a0:	f003 fddd 	bl	800445e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 80008a4:	2201      	movs	r2, #1
 80008a6:	493d      	ldr	r1, [pc, #244]	@ (800099c <main+0x128>)
 80008a8:	483d      	ldr	r0, [pc, #244]	@ (80009a0 <main+0x12c>)
 80008aa:	f003 fdd8 	bl	800445e <HAL_UART_Receive_IT>
  //DHT11_Init();
  LCD_init(&hi2c1);
 80008ae:	483d      	ldr	r0, [pc, #244]	@ (80009a4 <main+0x130>)
 80008b0:	f7ff fe76 	bl	80005a0 <LCD_init>

  //DHT11_TypeDef dht11Data;
  char buff[30];

  printf("start main() \r\n");
 80008b4:	483c      	ldr	r0, [pc, #240]	@ (80009a8 <main+0x134>)
 80008b6:	f004 ff01 	bl	80056bc <puts>
  LCD_update(modeState, floorState, actuatorState, onoffState);
 80008ba:	4b3c      	ldr	r3, [pc, #240]	@ (80009ac <main+0x138>)
 80008bc:	6818      	ldr	r0, [r3, #0]
 80008be:	4b3c      	ldr	r3, [pc, #240]	@ (80009b0 <main+0x13c>)
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	4b3c      	ldr	r3, [pc, #240]	@ (80009b4 <main+0x140>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b3c      	ldr	r3, [pc, #240]	@ (80009b8 <main+0x144>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f000 fc07 	bl	80010dc <LCD_update>

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80008ce:	483b      	ldr	r0, [pc, #236]	@ (80009bc <main+0x148>)
 80008d0:	f003 f900 	bl	8003ad4 <HAL_TIM_Base_Start_IT>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <main+0x6a>
  {
	  Error_Handler();
 80008da:	f001 f907 	bl	8001aec <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ///////////////BUTTON EVENT////////////////////
	  if(keyNo != 0)
 80008de:	4b38      	ldr	r3, [pc, #224]	@ (80009c0 <main+0x14c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00e      	beq.n	8000904 <main+0x90>
	  {
		  button_event();
 80008e6:	f000 fa31 	bl	8000d4c <button_event>
		  LCD_update(modeState, floorState, actuatorState, onoffState);
 80008ea:	4b30      	ldr	r3, [pc, #192]	@ (80009ac <main+0x138>)
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	4b30      	ldr	r3, [pc, #192]	@ (80009b0 <main+0x13c>)
 80008f0:	6819      	ldr	r1, [r3, #0]
 80008f2:	4b30      	ldr	r3, [pc, #192]	@ (80009b4 <main+0x140>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b30      	ldr	r3, [pc, #192]	@ (80009b8 <main+0x144>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f000 fbef 	bl	80010dc <LCD_update>
		  keyNo = 0;
 80008fe:	4b30      	ldr	r3, [pc, #192]	@ (80009c0 <main+0x14c>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
	  }
	  ////////////////////////////////////////////////////
	  if(rx2Flag)
 8000904:	4b2f      	ldr	r3, [pc, #188]	@ (80009c4 <main+0x150>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d006      	beq.n	800091c <main+0xa8>
	  {
		  printf("recv2 : %s\r\n",rx2Data);
 800090e:	492e      	ldr	r1, [pc, #184]	@ (80009c8 <main+0x154>)
 8000910:	482e      	ldr	r0, [pc, #184]	@ (80009cc <main+0x158>)
 8000912:	f004 fe6b 	bl	80055ec <iprintf>
		  rx2Flag =0;
 8000916:	4b2b      	ldr	r3, [pc, #172]	@ (80009c4 <main+0x150>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	//	    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
	  }
	  if(tim3Flag1Sec)
 800091c:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <main+0x15c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d010      	beq.n	8000946 <main+0xd2>
	  {
		  tim3Flag1Sec = 0;
 8000924:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <main+0x15c>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
		  if(modeState == ALARM)
 800092a:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <main+0x138>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d109      	bne.n	8000946 <main+0xd2>
		  {
			  LCD_update(modeState, floorState, actuatorState, onoffState);
 8000932:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <main+0x138>)
 8000934:	6818      	ldr	r0, [r3, #0]
 8000936:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <main+0x13c>)
 8000938:	6819      	ldr	r1, [r3, #0]
 800093a:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <main+0x140>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <main+0x144>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f000 fbcb 	bl	80010dc <LCD_update>
		  }
	  }
	  if(updateTimeFlag)
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <main+0x160>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d013      	beq.n	8000976 <main+0x102>
	  {
		  updateTimeFlag = 0;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <main+0x160>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
		  char message[100];
		  sprintf(message, "[GETTIME]\n");
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4920      	ldr	r1, [pc, #128]	@ (80009d8 <main+0x164>)
 8000958:	4618      	mov	r0, r3
 800095a:	f004 feeb 	bl	8005734 <siprintf>
		  HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fc47 	bl	80001f4 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	1d39      	adds	r1, r7, #4
 800096c:	f04f 33ff 	mov.w	r3, #4294967295
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <main+0x12c>)
 8000972:	f003 fce9 	bl	8004348 <HAL_UART_Transmit>

	  }
	  if(btFlag)
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <main+0x168>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d004      	beq.n	800098a <main+0x116>
	  {
//		printf("bt : %s\r\n",btData);
			btFlag =0;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <main+0x168>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
			bluetooth_Event();
 8000986:	f000 fd21 	bl	80013cc <bluetooth_Event>
	  }
	  //dht11Data = DHT11_readData();
	  //sprintf(buff,"h: %d%% t: %d.%d'C", dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
	  //printf("%s\r\n", buff);
	  //LCD_writeStringXY(1, 0, buff);
	  HAL_Delay(20);
 800098a:	2014      	movs	r0, #20
 800098c:	f001 fbb8 	bl	8002100 <HAL_Delay>
	  if(keyNo != 0)
 8000990:	e7a5      	b.n	80008de <main+0x6a>
 8000992:	bf00      	nop
 8000994:	2000020c 	.word	0x2000020c
 8000998:	2000017c 	.word	0x2000017c
 800099c:	20000243 	.word	0x20000243
 80009a0:	200001c4 	.word	0x200001c4
 80009a4:	200000e0 	.word	0x200000e0
 80009a8:	080071d4 	.word	0x080071d4
 80009ac:	20000284 	.word	0x20000284
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000288 	.word	0x20000288
 80009b8:	2000028c 	.word	0x2000028c
 80009bc:	20000134 	.word	0x20000134
 80009c0:	20000000 	.word	0x20000000
 80009c4:	2000020d 	.word	0x2000020d
 80009c8:	20000210 	.word	0x20000210
 80009cc:	080071e4 	.word	0x080071e4
 80009d0:	20000278 	.word	0x20000278
 80009d4:	20000004 	.word	0x20000004
 80009d8:	080071f4 	.word	0x080071f4
 80009dc:	20000242 	.word	0x20000242

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	@ 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	@ 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f004 ffc4 	bl	800597c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b28      	ldr	r3, [pc, #160]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a27      	ldr	r2, [pc, #156]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a21      	ldr	r2, [pc, #132]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a50:	2308      	movs	r3, #8
 8000a52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a54:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fb4c 	bl	8003104 <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a72:	f001 f83b 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2102      	movs	r1, #2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fdae 	bl	80035f4 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a9e:	f001 f825 	bl	8001aec <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	@ 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2006      	movs	r0, #6
 8000abe:	f001 fc1e 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ac2:	2006      	movs	r0, #6
 8000ac4:	f001 fc37 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	2007      	movs	r0, #7
 8000ace:	f001 fc16 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f001 fc2f 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2008      	movs	r0, #8
 8000ade:	f001 fc0e 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ae2:	2008      	movs	r0, #8
 8000ae4:	f001 fc27 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	2009      	movs	r0, #9
 8000aee:	f001 fc06 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000af2:	2009      	movs	r0, #9
 8000af4:	f001 fc1f 	bl	8002336 <HAL_NVIC_EnableIRQ>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b02:	4a13      	ldr	r2, [pc, #76]	@ (8000b50 <MX_I2C1_Init+0x54>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b08:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_I2C1_Init+0x58>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b3a:	f001 fe45 	bl	80027c8 <HAL_I2C_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b44:	f000 ffd2 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000e0 	.word	0x200000e0
 8000b50:	40005400 	.word	0x40005400
 8000b54:	000186a0 	.word	0x000186a0

08000b58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_TIM3_Init+0x94>)
 8000b76:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf0 <MX_TIM3_Init+0x98>)
 8000b78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_TIM3_Init+0x94>)
 8000b7c:	2253      	movs	r2, #83	@ 0x53
 8000b7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_TIM3_Init+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_TIM3_Init+0x94>)
 8000b88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_TIM3_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_TIM3_Init+0x94>)
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b9a:	4814      	ldr	r0, [pc, #80]	@ (8000bec <MX_TIM3_Init+0x94>)
 8000b9c:	f002 ff4a 	bl	8003a34 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ba6:	f000 ffa1 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000baa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	@ (8000bec <MX_TIM3_Init+0x94>)
 8000bb8:	f003 f8de 	bl	8003d78 <HAL_TIM_ConfigClockSource>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000bc2:	f000 ff93 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	@ (8000bec <MX_TIM3_Init+0x94>)
 8000bd4:	f003 fae6 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000bde:	f000 ff85 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000134 	.word	0x20000134
 8000bf0:	40000400 	.word	0x40000400

08000bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <MX_USART2_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f003 fb3c 	bl	80042a8 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 ff59 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000017c 	.word	0x2000017c
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <MX_USART6_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c80:	f003 fb12 	bl	80042a8 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 ff2f 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001c4 	.word	0x200001c4
 8000c98:	40011400 	.word	0x40011400

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a22      	ldr	r2, [pc, #136]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : MODE_BTN_Pin FLOOR_BTN_Pin ACTUATOR_BTN_Pin SWITCH_BTN_Pin */
  GPIO_InitStruct.Pin = MODE_BTN_Pin|FLOOR_BTN_Pin|ACTUATOR_BTN_Pin|SWITCH_BTN_Pin;
 8000d22:	230f      	movs	r3, #15
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d26:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <MX_GPIO_Init+0xac>)
 8000d38:	f001 fbaa 	bl	8002490 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800

08000d4c <button_event>:

/* USER CODE BEGIN 4 */
void button_event()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b090      	sub	sp, #64	@ 0x40
 8000d50:	af02      	add	r7, sp, #8
    char message[CMD_SIZE] = {0};
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	222e      	movs	r2, #46	@ 0x2e
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fe0c 	bl	800597c <memset>
    switch(keyNo) {
 8000d64:	4b9a      	ldr	r3, [pc, #616]	@ (8000fd0 <button_event+0x284>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	f200 8193 	bhi.w	8001096 <button_event+0x34a>
 8000d70:	a201      	add	r2, pc, #4	@ (adr r2, 8000d78 <button_event+0x2c>)
 8000d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d76:	bf00      	nop
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000e1b 	.word	0x08000e1b
 8000d80:	08000ed9 	.word	0x08000ed9
 8000d84:	08000f71 	.word	0x08000f71
        case 1: //MODE TOGGLE
        	modeState = (modeState + 1) % 3;
 8000d88:	4b92      	ldr	r3, [pc, #584]	@ (8000fd4 <button_event+0x288>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	1c59      	adds	r1, r3, #1
 8000d8e:	4b92      	ldr	r3, [pc, #584]	@ (8000fd8 <button_event+0x28c>)
 8000d90:	fb83 3201 	smull	r3, r2, r3, r1
 8000d94:	17cb      	asrs	r3, r1, #31
 8000d96:	1ad2      	subs	r2, r2, r3
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	1aca      	subs	r2, r1, r3
 8000da0:	4b8c      	ldr	r3, [pc, #560]	@ (8000fd4 <button_event+0x288>)
 8000da2:	601a      	str	r2, [r3, #0]
            if(modeState == MONITOR)
 8000da4:	4b8b      	ldr	r3, [pc, #556]	@ (8000fd4 <button_event+0x288>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d125      	bne.n	8000df8 <button_event+0xac>
            {
                //modeState = CONTROL;
                sprintf(message, "[BMS_SQL]GET@%dF@%s\n",
 8000dac:	4b8b      	ldr	r3, [pc, #556]	@ (8000fdc <button_event+0x290>)
 8000dae:	681a      	ldr	r2, [r3, #0]
                        floorState,
                        actuatorState == 0 ? "FAN" :
 8000db0:	4b8b      	ldr	r3, [pc, #556]	@ (8000fe0 <button_event+0x294>)
 8000db2:	681b      	ldr	r3, [r3, #0]
                sprintf(message, "[BMS_SQL]GET@%dF@%s\n",
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00d      	beq.n	8000dd4 <button_event+0x88>
                        actuatorState == 1 ? "BLIND" :
 8000db8:	4b89      	ldr	r3, [pc, #548]	@ (8000fe0 <button_event+0x294>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d007      	beq.n	8000dd0 <button_event+0x84>
                        actuatorState == 2 ? "LAMP" :
 8000dc0:	4b87      	ldr	r3, [pc, #540]	@ (8000fe0 <button_event+0x294>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d101      	bne.n	8000dcc <button_event+0x80>
 8000dc8:	4b86      	ldr	r3, [pc, #536]	@ (8000fe4 <button_event+0x298>)
 8000dca:	e004      	b.n	8000dd6 <button_event+0x8a>
 8000dcc:	4b86      	ldr	r3, [pc, #536]	@ (8000fe8 <button_event+0x29c>)
 8000dce:	e002      	b.n	8000dd6 <button_event+0x8a>
                        actuatorState == 1 ? "BLIND" :
 8000dd0:	4b86      	ldr	r3, [pc, #536]	@ (8000fec <button_event+0x2a0>)
 8000dd2:	e000      	b.n	8000dd6 <button_event+0x8a>
                sprintf(message, "[BMS_SQL]GET@%dF@%s\n",
 8000dd4:	4b86      	ldr	r3, [pc, #536]	@ (8000ff0 <button_event+0x2a4>)
 8000dd6:	1d38      	adds	r0, r7, #4
 8000dd8:	4986      	ldr	r1, [pc, #536]	@ (8000ff4 <button_event+0x2a8>)
 8000dda:	f004 fcab 	bl	8005734 <siprintf>
                        "WINDOW");
                HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fa07 	bl	80001f4 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	1d39      	adds	r1, r7, #4
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	4881      	ldr	r0, [pc, #516]	@ (8000ff8 <button_event+0x2ac>)
 8000df2:	f003 faa9 	bl	8004348 <HAL_UART_Transmit>
 8000df6:	e00a      	b.n	8000e0e <button_event+0xc2>
            }
            else if(modeState == CONTROL)
 8000df8:	4b76      	ldr	r3, [pc, #472]	@ (8000fd4 <button_event+0x288>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d106      	bne.n	8000e0e <button_event+0xc2>
            {
                //modeState = ALARM;
                if(floorState == 0) //All -> 1F
 8000e00:	4b76      	ldr	r3, [pc, #472]	@ (8000fdc <button_event+0x290>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <button_event+0xc2>
                {
                    floorState = 1;
 8000e08:	4b74      	ldr	r3, [pc, #464]	@ (8000fdc <button_event+0x290>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
                }
            }
            updateTimeFlag = 1;
 8000e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8000ffc <button_event+0x2b0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
            LCD_clear();
 8000e14:	f7ff fd20 	bl	8000858 <LCD_clear>
            break;
 8000e18:	e144      	b.n	80010a4 <button_event+0x358>
        case 2: //FLOOR CHANGE    ||	ALARM SWITCH
            if(modeState == MONITOR)
 8000e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8000fd4 <button_event+0x288>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d111      	bne.n	8000e46 <button_event+0xfa>
            {
                floorState = (floorState % FLOOR_SIZE) + 1;
 8000e22:	4b6e      	ldr	r3, [pc, #440]	@ (8000fdc <button_event+0x290>)
 8000e24:	6819      	ldr	r1, [r3, #0]
 8000e26:	4b76      	ldr	r3, [pc, #472]	@ (8001000 <button_event+0x2b4>)
 8000e28:	fb83 2301 	smull	r2, r3, r3, r1
 8000e2c:	105a      	asrs	r2, r3, #1
 8000e2e:	17cb      	asrs	r3, r1, #31
 8000e30:	1ad2      	subs	r2, r2, r3
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	1aca      	subs	r2, r1, r3
 8000e3a:	1c53      	adds	r3, r2, #1
 8000e3c:	4a67      	ldr	r2, [pc, #412]	@ (8000fdc <button_event+0x290>)
 8000e3e:	6013      	str	r3, [r2, #0]
                LCD_clear();
 8000e40:	f7ff fd0a 	bl	8000858 <LCD_clear>
            }
            else if(modeState == ALARM)
            {
            	alarmState = (alarmState + 1) % 2;
            }
            break;
 8000e44:	e129      	b.n	800109a <button_event+0x34e>
            else if(modeState == CONTROL) //ADD ALL FLOOR
 8000e46:	4b63      	ldr	r3, [pc, #396]	@ (8000fd4 <button_event+0x288>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d134      	bne.n	8000eb8 <button_event+0x16c>
                floorState = (floorState + 1) % (FLOOR_SIZE + 1);
 8000e4e:	4b63      	ldr	r3, [pc, #396]	@ (8000fdc <button_event+0x290>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	1c59      	adds	r1, r3, #1
 8000e54:	4b6b      	ldr	r3, [pc, #428]	@ (8001004 <button_event+0x2b8>)
 8000e56:	fb83 3201 	smull	r3, r2, r3, r1
 8000e5a:	17cb      	asrs	r3, r1, #31
 8000e5c:	1ad2      	subs	r2, r2, r3
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	1aca      	subs	r2, r1, r3
 8000e68:	4b5c      	ldr	r3, [pc, #368]	@ (8000fdc <button_event+0x290>)
 8000e6a:	601a      	str	r2, [r3, #0]
                sprintf(message, "[BMS_SQL]GET@%dF@%s\n",
 8000e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8000fdc <button_event+0x290>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
                        actuatorState == 0 ? "FAN" :
 8000e70:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe0 <button_event+0x294>)
 8000e72:	681b      	ldr	r3, [r3, #0]
                sprintf(message, "[BMS_SQL]GET@%dF@%s\n",
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00d      	beq.n	8000e94 <button_event+0x148>
                        actuatorState == 1 ? "BLIND" :
 8000e78:	4b59      	ldr	r3, [pc, #356]	@ (8000fe0 <button_event+0x294>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d007      	beq.n	8000e90 <button_event+0x144>
                        actuatorState == 2 ? "LAMP" :
 8000e80:	4b57      	ldr	r3, [pc, #348]	@ (8000fe0 <button_event+0x294>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d101      	bne.n	8000e8c <button_event+0x140>
 8000e88:	4b56      	ldr	r3, [pc, #344]	@ (8000fe4 <button_event+0x298>)
 8000e8a:	e004      	b.n	8000e96 <button_event+0x14a>
 8000e8c:	4b56      	ldr	r3, [pc, #344]	@ (8000fe8 <button_event+0x29c>)
 8000e8e:	e002      	b.n	8000e96 <button_event+0x14a>
                        actuatorState == 1 ? "BLIND" :
 8000e90:	4b56      	ldr	r3, [pc, #344]	@ (8000fec <button_event+0x2a0>)
 8000e92:	e000      	b.n	8000e96 <button_event+0x14a>
                sprintf(message, "[BMS_SQL]GET@%dF@%s\n",
 8000e94:	4b56      	ldr	r3, [pc, #344]	@ (8000ff0 <button_event+0x2a4>)
 8000e96:	1d38      	adds	r0, r7, #4
 8000e98:	4956      	ldr	r1, [pc, #344]	@ (8000ff4 <button_event+0x2a8>)
 8000e9a:	f004 fc4b 	bl	8005734 <siprintf>
                HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f9a7 	bl	80001f4 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	1d39      	adds	r1, r7, #4
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	4851      	ldr	r0, [pc, #324]	@ (8000ff8 <button_event+0x2ac>)
 8000eb2:	f003 fa49 	bl	8004348 <HAL_UART_Transmit>
            break;
 8000eb6:	e0f0      	b.n	800109a <button_event+0x34e>
            else if(modeState == ALARM)
 8000eb8:	4b46      	ldr	r3, [pc, #280]	@ (8000fd4 <button_event+0x288>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	f040 80ec 	bne.w	800109a <button_event+0x34e>
            	alarmState = (alarmState + 1) % 2;
 8000ec2:	4b51      	ldr	r3, [pc, #324]	@ (8001008 <button_event+0x2bc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	bfb8      	it	lt
 8000ed0:	425b      	neglt	r3, r3
 8000ed2:	4a4d      	ldr	r2, [pc, #308]	@ (8001008 <button_event+0x2bc>)
 8000ed4:	6013      	str	r3, [r2, #0]
            break;
 8000ed6:	e0e0      	b.n	800109a <button_event+0x34e>
        case 3: //ACTUATOR CHANGE	||	ALARM TIME CONFIG
            if(modeState == CONTROL)
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <button_event+0x288>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d131      	bne.n	8000f44 <button_event+0x1f8>
            {
                actuatorState = (actuatorState + 1) % ACTUATOR_SIZE;
 8000ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe0 <button_event+0x294>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	425a      	negs	r2, r3
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	f002 0203 	and.w	r2, r2, #3
 8000ef0:	bf58      	it	pl
 8000ef2:	4253      	negpl	r3, r2
 8000ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fe0 <button_event+0x294>)
 8000ef6:	6013      	str	r3, [r2, #0]
                sprintf(message, "[BMS_SQL]GET@%dF@%s\n",
 8000ef8:	4b38      	ldr	r3, [pc, #224]	@ (8000fdc <button_event+0x290>)
 8000efa:	681a      	ldr	r2, [r3, #0]
                        floorState,
                        actuatorState == 0 ? "FAN" :
 8000efc:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <button_event+0x294>)
 8000efe:	681b      	ldr	r3, [r3, #0]
                sprintf(message, "[BMS_SQL]GET@%dF@%s\n",
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00d      	beq.n	8000f20 <button_event+0x1d4>
                        actuatorState == 1 ? "BLIND" :
 8000f04:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <button_event+0x294>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d007      	beq.n	8000f1c <button_event+0x1d0>
                        actuatorState == 2 ? "LAMP" :
 8000f0c:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <button_event+0x294>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d101      	bne.n	8000f18 <button_event+0x1cc>
 8000f14:	4b33      	ldr	r3, [pc, #204]	@ (8000fe4 <button_event+0x298>)
 8000f16:	e004      	b.n	8000f22 <button_event+0x1d6>
 8000f18:	4b33      	ldr	r3, [pc, #204]	@ (8000fe8 <button_event+0x29c>)
 8000f1a:	e002      	b.n	8000f22 <button_event+0x1d6>
                        actuatorState == 1 ? "BLIND" :
 8000f1c:	4b33      	ldr	r3, [pc, #204]	@ (8000fec <button_event+0x2a0>)
 8000f1e:	e000      	b.n	8000f22 <button_event+0x1d6>
                sprintf(message, "[BMS_SQL]GET@%dF@%s\n",
 8000f20:	4b33      	ldr	r3, [pc, #204]	@ (8000ff0 <button_event+0x2a4>)
 8000f22:	1d38      	adds	r0, r7, #4
 8000f24:	4933      	ldr	r1, [pc, #204]	@ (8000ff4 <button_event+0x2a8>)
 8000f26:	f004 fc05 	bl	8005734 <siprintf>
                        "WINDOW");
                HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f961 	bl	80001f4 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	1d39      	adds	r1, r7, #4
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	482e      	ldr	r0, [pc, #184]	@ (8000ff8 <button_event+0x2ac>)
 8000f3e:	f003 fa03 	bl	8004348 <HAL_UART_Transmit>
				else if(alarmState == 1)
				{
					alarm_hour(&closeTime);
				}
            }
            break;
 8000f42:	e0ac      	b.n	800109e <button_event+0x352>
            else if(modeState == ALARM)
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <button_event+0x288>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	f040 80a8 	bne.w	800109e <button_event+0x352>
            	if(alarmState == 0)
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <button_event+0x2bc>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <button_event+0x212>
            		alarm_hour(&openTime);
 8000f56:	482d      	ldr	r0, [pc, #180]	@ (800100c <button_event+0x2c0>)
 8000f58:	f000 fcc6 	bl	80018e8 <alarm_hour>
            break;
 8000f5c:	e09f      	b.n	800109e <button_event+0x352>
				else if(alarmState == 1)
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <button_event+0x2bc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	f040 809b 	bne.w	800109e <button_event+0x352>
					alarm_hour(&closeTime);
 8000f68:	4829      	ldr	r0, [pc, #164]	@ (8001010 <button_event+0x2c4>)
 8000f6a:	f000 fcbd 	bl	80018e8 <alarm_hour>
            break;
 8000f6e:	e096      	b.n	800109e <button_event+0x352>
        case 4: //ONOFF TOGGLE	||	ALARM ONOFF TOGGLE
            if(modeState == CONTROL)
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <button_event+0x288>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d17a      	bne.n	800106e <button_event+0x322>
            {
                onoffState = !onoffState;
 8000f78:	4b26      	ldr	r3, [pc, #152]	@ (8001014 <button_event+0x2c8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <button_event+0x2c8>)
 8000f8a:	601a      	str	r2, [r3, #0]
                sprintf(message, "[BMS_SQL]SET@%dF@%s@%s\n",
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <button_event+0x290>)
 8000f8e:	6819      	ldr	r1, [r3, #0]
                        floorState,
                        actuatorState == 0 ? "FAN" :
 8000f90:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <button_event+0x294>)
 8000f92:	681b      	ldr	r3, [r3, #0]
                sprintf(message, "[BMS_SQL]SET@%dF@%s@%s\n",
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00d      	beq.n	8000fb4 <button_event+0x268>
                        actuatorState == 1 ? "BLIND" :
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <button_event+0x294>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d007      	beq.n	8000fb0 <button_event+0x264>
                        actuatorState == 2 ? "LAMP" :
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <button_event+0x294>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d101      	bne.n	8000fac <button_event+0x260>
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <button_event+0x298>)
 8000faa:	e004      	b.n	8000fb6 <button_event+0x26a>
 8000fac:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <button_event+0x29c>)
 8000fae:	e002      	b.n	8000fb6 <button_event+0x26a>
                        actuatorState == 1 ? "BLIND" :
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8000fec <button_event+0x2a0>)
 8000fb2:	e000      	b.n	8000fb6 <button_event+0x26a>
                sprintf(message, "[BMS_SQL]SET@%dF@%s@%s\n",
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <button_event+0x2a4>)
                        "WINDOW",
                        actuatorState == 1 ? (onoffState == 1 ? "UP" : "DOWN") : // BLIND
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <button_event+0x294>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
                sprintf(message, "[BMS_SQL]SET@%dF@%s@%s\n",
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d130      	bne.n	8001020 <button_event+0x2d4>
                        actuatorState == 1 ? (onoffState == 1 ? "UP" : "DOWN") : // BLIND
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <button_event+0x2c8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <button_event+0x27e>
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <button_event+0x2cc>)
 8000fc8:	e03d      	b.n	8001046 <button_event+0x2fa>
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <button_event+0x2d0>)
 8000fcc:	e03b      	b.n	8001046 <button_event+0x2fa>
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000284 	.word	0x20000284
 8000fd8:	55555556 	.word	0x55555556
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000288 	.word	0x20000288
 8000fe4:	08007200 	.word	0x08007200
 8000fe8:	08007208 	.word	0x08007208
 8000fec:	08007210 	.word	0x08007210
 8000ff0:	08007218 	.word	0x08007218
 8000ff4:	0800721c 	.word	0x0800721c
 8000ff8:	200001c4 	.word	0x200001c4
 8000ffc:	20000004 	.word	0x20000004
 8001000:	66666667 	.word	0x66666667
 8001004:	2aaaaaab 	.word	0x2aaaaaab
 8001008:	20000290 	.word	0x20000290
 800100c:	20000024 	.word	0x20000024
 8001010:	2000003c 	.word	0x2000003c
 8001014:	2000028c 	.word	0x2000028c
 8001018:	08007234 	.word	0x08007234
 800101c:	08007238 	.word	0x08007238
                        actuatorState == 3 ? (onoffState == 1 ? "OPEN" : "CLOSE") : // WINDOW
 8001020:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <button_event+0x360>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b03      	cmp	r3, #3
 8001026:	d107      	bne.n	8001038 <button_event+0x2ec>
 8001028:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <button_event+0x364>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <button_event+0x2e8>
 8001030:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <button_event+0x368>)
 8001032:	e008      	b.n	8001046 <button_event+0x2fa>
 8001034:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <button_event+0x36c>)
 8001036:	e006      	b.n	8001046 <button_event+0x2fa>
                        (onoffState == 1 ? "ON" : "OFF")); // FAN/LAMP
 8001038:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <button_event+0x364>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <button_event+0x2f8>
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <button_event+0x370>)
 8001042:	e000      	b.n	8001046 <button_event+0x2fa>
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <button_event+0x374>)
                sprintf(message, "[BMS_SQL]SET@%dF@%s@%s\n",
 8001046:	1d38      	adds	r0, r7, #4
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4613      	mov	r3, r2
 800104c:	460a      	mov	r2, r1
 800104e:	491d      	ldr	r1, [pc, #116]	@ (80010c4 <button_event+0x378>)
 8001050:	f004 fb70 	bl	8005734 <siprintf>
                HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f8cc 	bl	80001f4 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	b29a      	uxth	r2, r3
 8001060:	1d39      	adds	r1, r7, #4
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	4818      	ldr	r0, [pc, #96]	@ (80010c8 <button_event+0x37c>)
 8001068:	f003 f96e 	bl	8004348 <HAL_UART_Transmit>
            else if(modeState == ALARM)
			{
				if(alarmState == 0)	alarm_min(&openTime);
				else if(alarmState == 1) alarm_min(&closeTime);
			}
            break;
 800106c:	e019      	b.n	80010a2 <button_event+0x356>
            else if(modeState == ALARM)
 800106e:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <button_event+0x380>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d115      	bne.n	80010a2 <button_event+0x356>
				if(alarmState == 0)	alarm_min(&openTime);
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <button_event+0x384>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <button_event+0x33a>
 800107e:	4815      	ldr	r0, [pc, #84]	@ (80010d4 <button_event+0x388>)
 8001080:	f000 fc10 	bl	80018a4 <alarm_min>
            break;
 8001084:	e00d      	b.n	80010a2 <button_event+0x356>
				else if(alarmState == 1) alarm_min(&closeTime);
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <button_event+0x384>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d109      	bne.n	80010a2 <button_event+0x356>
 800108e:	4812      	ldr	r0, [pc, #72]	@ (80010d8 <button_event+0x38c>)
 8001090:	f000 fc08 	bl	80018a4 <alarm_min>
            break;
 8001094:	e005      	b.n	80010a2 <button_event+0x356>
        default:
            break;
 8001096:	bf00      	nop
 8001098:	e004      	b.n	80010a4 <button_event+0x358>
            break;
 800109a:	bf00      	nop
 800109c:	e002      	b.n	80010a4 <button_event+0x358>
            break;
 800109e:	bf00      	nop
 80010a0:	e000      	b.n	80010a4 <button_event+0x358>
            break;
 80010a2:	bf00      	nop
    }
}
 80010a4:	bf00      	nop
 80010a6:	3738      	adds	r7, #56	@ 0x38
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000288 	.word	0x20000288
 80010b0:	2000028c 	.word	0x2000028c
 80010b4:	08007240 	.word	0x08007240
 80010b8:	08007248 	.word	0x08007248
 80010bc:	08007250 	.word	0x08007250
 80010c0:	08007254 	.word	0x08007254
 80010c4:	08007258 	.word	0x08007258
 80010c8:	200001c4 	.word	0x200001c4
 80010cc:	20000284 	.word	0x20000284
 80010d0:	20000290 	.word	0x20000290
 80010d4:	20000024 	.word	0x20000024
 80010d8:	2000003c 	.word	0x2000003c

080010dc <LCD_update>:


void LCD_update(int mode, int floor, int actuator, int onoff) {
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b095      	sub	sp, #84	@ 0x54
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
	char actuatorName[7];
	char onoffName[6];
	char buffer[16];

	/////////////////////NAME SETTING///////////////////////////
    if (floor == 0) {
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <LCD_update+0x1a>
        strcpy(floorName, "ALL");
 80010f0:	4b9f      	ldr	r3, [pc, #636]	@ (8001370 <LCD_update+0x294>)
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80010f4:	e006      	b.n	8001104 <LCD_update+0x28>
    } else {
        sprintf(floorName, "%dF ", floor);
 80010f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	499d      	ldr	r1, [pc, #628]	@ (8001374 <LCD_update+0x298>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fb18 	bl	8005734 <siprintf>
    }

    if (actuator == 0) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d122      	bne.n	8001150 <LCD_update+0x74>
        strcpy(actuatorName, "FAN   ");
 800110a:	4a9b      	ldr	r2, [pc, #620]	@ (8001378 <LCD_update+0x29c>)
 800110c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001114:	6018      	str	r0, [r3, #0]
 8001116:	3304      	adds	r3, #4
 8001118:	8019      	strh	r1, [r3, #0]
 800111a:	3302      	adds	r3, #2
 800111c:	0c0a      	lsrs	r2, r1, #16
 800111e:	701a      	strb	r2, [r3, #0]
        if (onoff == 0)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d108      	bne.n	8001138 <LCD_update+0x5c>
                strcpy(onoffName, "OFF  ");
 8001126:	4a95      	ldr	r2, [pc, #596]	@ (800137c <LCD_update+0x2a0>)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001130:	6018      	str	r0, [r3, #0]
 8001132:	3304      	adds	r3, #4
 8001134:	8019      	strh	r1, [r3, #0]
 8001136:	e07c      	b.n	8001232 <LCD_update+0x156>
            else if (onoff == 1)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d179      	bne.n	8001232 <LCD_update+0x156>
                strcpy(onoffName, "ON   ");
 800113e:	4a90      	ldr	r2, [pc, #576]	@ (8001380 <LCD_update+0x2a4>)
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001148:	6018      	str	r0, [r3, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	8019      	strh	r1, [r3, #0]
 800114e:	e070      	b.n	8001232 <LCD_update+0x156>
    } else if (actuator == 1) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d122      	bne.n	800119c <LCD_update+0xc0>
        strcpy(actuatorName, "BLIND ");
 8001156:	4a8b      	ldr	r2, [pc, #556]	@ (8001384 <LCD_update+0x2a8>)
 8001158:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001160:	6018      	str	r0, [r3, #0]
 8001162:	3304      	adds	r3, #4
 8001164:	8019      	strh	r1, [r3, #0]
 8001166:	3302      	adds	r3, #2
 8001168:	0c0a      	lsrs	r2, r1, #16
 800116a:	701a      	strb	r2, [r3, #0]
        if (onoff == 0)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d108      	bne.n	8001184 <LCD_update+0xa8>
                strcpy(onoffName, "DOWN ");
 8001172:	4a85      	ldr	r2, [pc, #532]	@ (8001388 <LCD_update+0x2ac>)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117c:	6018      	str	r0, [r3, #0]
 800117e:	3304      	adds	r3, #4
 8001180:	8019      	strh	r1, [r3, #0]
 8001182:	e056      	b.n	8001232 <LCD_update+0x156>
            else if (onoff == 1)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d153      	bne.n	8001232 <LCD_update+0x156>
                strcpy(onoffName, "UP   ");
 800118a:	4a80      	ldr	r2, [pc, #512]	@ (800138c <LCD_update+0x2b0>)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001194:	6018      	str	r0, [r3, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	8019      	strh	r1, [r3, #0]
 800119a:	e04a      	b.n	8001232 <LCD_update+0x156>
    } else if (actuator == 2) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d122      	bne.n	80011e8 <LCD_update+0x10c>
        strcpy(actuatorName, "LAMP  ");
 80011a2:	4a7b      	ldr	r2, [pc, #492]	@ (8001390 <LCD_update+0x2b4>)
 80011a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ac:	6018      	str	r0, [r3, #0]
 80011ae:	3304      	adds	r3, #4
 80011b0:	8019      	strh	r1, [r3, #0]
 80011b2:	3302      	adds	r3, #2
 80011b4:	0c0a      	lsrs	r2, r1, #16
 80011b6:	701a      	strb	r2, [r3, #0]
        if (onoff == 0)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d108      	bne.n	80011d0 <LCD_update+0xf4>
                strcpy(onoffName, "OFF  ");
 80011be:	4a6f      	ldr	r2, [pc, #444]	@ (800137c <LCD_update+0x2a0>)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c8:	6018      	str	r0, [r3, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	8019      	strh	r1, [r3, #0]
 80011ce:	e030      	b.n	8001232 <LCD_update+0x156>
            else if (onoff == 1)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d12d      	bne.n	8001232 <LCD_update+0x156>
                strcpy(onoffName, "ON   ");
 80011d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001380 <LCD_update+0x2a4>)
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e0:	6018      	str	r0, [r3, #0]
 80011e2:	3304      	adds	r3, #4
 80011e4:	8019      	strh	r1, [r3, #0]
 80011e6:	e024      	b.n	8001232 <LCD_update+0x156>
    } else if (actuator == 3) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d121      	bne.n	8001232 <LCD_update+0x156>
        strcpy(actuatorName, "WINDOW");
 80011ee:	4a69      	ldr	r2, [pc, #420]	@ (8001394 <LCD_update+0x2b8>)
 80011f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f8:	6018      	str	r0, [r3, #0]
 80011fa:	3304      	adds	r3, #4
 80011fc:	8019      	strh	r1, [r3, #0]
 80011fe:	3302      	adds	r3, #2
 8001200:	0c0a      	lsrs	r2, r1, #16
 8001202:	701a      	strb	r2, [r3, #0]
        if (onoff == 0)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d108      	bne.n	800121c <LCD_update+0x140>
                strcpy(onoffName, "CLOSE");
 800120a:	4a63      	ldr	r2, [pc, #396]	@ (8001398 <LCD_update+0x2bc>)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001214:	6018      	str	r0, [r3, #0]
 8001216:	3304      	adds	r3, #4
 8001218:	8019      	strh	r1, [r3, #0]
 800121a:	e00a      	b.n	8001232 <LCD_update+0x156>
            else if (onoff == 1)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <LCD_update+0x156>
                strcpy(onoffName, "OPEN ");
 8001222:	4a5e      	ldr	r2, [pc, #376]	@ (800139c <LCD_update+0x2c0>)
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122c:	6018      	str	r0, [r3, #0]
 800122e:	3304      	adds	r3, #4
 8001230:	8019      	strh	r1, [r3, #0]
    }

    /////////////////////////////LCD PRINT///////////////////////////////
    if (mode == MONITOR) {  // MONITOR MODE
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d11a      	bne.n	800126e <LCD_update+0x192>
		strcpy(modeName, "MONITOR");
 8001238:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800123c:	4a58      	ldr	r2, [pc, #352]	@ (80013a0 <LCD_update+0x2c4>)
 800123e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001242:	e883 0003 	stmia.w	r3, {r0, r1}
		snprintf(buffer, sizeof(buffer), "%-8s %-5s", modeName, floorName);
 8001246:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800124a:	f107 0010 	add.w	r0, r7, #16
 800124e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	4a53      	ldr	r2, [pc, #332]	@ (80013a4 <LCD_update+0x2c8>)
 8001258:	2110      	movs	r1, #16
 800125a:	f004 fa37 	bl	80056cc <sniprintf>
		LCD_writeStringXY(0, 0, buffer);
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	461a      	mov	r2, r3
 8001264:	2100      	movs	r1, #0
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fae1 	bl	800082e <LCD_writeStringXY>
		LCD_writeStringXY(0, 0, buffer);
		if(alarmState == 0) snprintf(buffer, sizeof(buffer), "%02d:%02d  OPEN ", openTime.hour, openTime.min);
		else if(alarmState == 1) snprintf(buffer, sizeof(buffer), "%02d:%02d  CLOSE", closeTime.hour, closeTime.min);
		LCD_writeStringXY(1, 0, buffer);
	}
}
 800126c:	e07c      	b.n	8001368 <LCD_update+0x28c>
	} else if (mode == CONTROL) {  // CONTROL MODE
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d12d      	bne.n	80012d0 <LCD_update+0x1f4>
		strcpy(modeName, "CONTROL");
 8001274:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001278:	4a4b      	ldr	r2, [pc, #300]	@ (80013a8 <LCD_update+0x2cc>)
 800127a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127e:	e883 0003 	stmia.w	r3, {r0, r1}
		snprintf(buffer, sizeof(buffer), "%-8s %-5s", modeName, floorName);
 8001282:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001286:	f107 0010 	add.w	r0, r7, #16
 800128a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	4a44      	ldr	r2, [pc, #272]	@ (80013a4 <LCD_update+0x2c8>)
 8001294:	2110      	movs	r1, #16
 8001296:	f004 fa19 	bl	80056cc <sniprintf>
		LCD_writeStringXY(0, 0, buffer);
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	461a      	mov	r2, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fac3 	bl	800082e <LCD_writeStringXY>
		snprintf(buffer, sizeof(buffer), "%-8s %-5s", actuatorName, onoffName);
 80012a8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80012ac:	f107 0010 	add.w	r0, r7, #16
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	4a3a      	ldr	r2, [pc, #232]	@ (80013a4 <LCD_update+0x2c8>)
 80012ba:	2110      	movs	r1, #16
 80012bc:	f004 fa06 	bl	80056cc <sniprintf>
		LCD_writeStringXY(1, 0, buffer);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	461a      	mov	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff fab0 	bl	800082e <LCD_writeStringXY>
}
 80012ce:	e04b      	b.n	8001368 <LCD_update+0x28c>
	} else if (mode == ALARM) {
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d148      	bne.n	8001368 <LCD_update+0x28c>
		strcpy(modeName, "ALARM");
 80012d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012da:	4a34      	ldr	r2, [pc, #208]	@ (80013ac <LCD_update+0x2d0>)
 80012dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e0:	6018      	str	r0, [r3, #0]
 80012e2:	3304      	adds	r3, #4
 80012e4:	8019      	strh	r1, [r3, #0]
		snprintf(buffer, sizeof(buffer), "%s %02d:%02d:%02d", modeName, dateTime.hour, dateTime.min, dateTime.sec);
 80012e6:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <LCD_update+0x2d4>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	4a31      	ldr	r2, [pc, #196]	@ (80013b0 <LCD_update+0x2d4>)
 80012ec:	6912      	ldr	r2, [r2, #16]
 80012ee:	4930      	ldr	r1, [pc, #192]	@ (80013b0 <LCD_update+0x2d4>)
 80012f0:	6949      	ldr	r1, [r1, #20]
 80012f2:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80012f6:	f107 0010 	add.w	r0, r7, #16
 80012fa:	9102      	str	r1, [sp, #8]
 80012fc:	9201      	str	r2, [sp, #4]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4623      	mov	r3, r4
 8001302:	4a2c      	ldr	r2, [pc, #176]	@ (80013b4 <LCD_update+0x2d8>)
 8001304:	2110      	movs	r1, #16
 8001306:	f004 f9e1 	bl	80056cc <sniprintf>
		LCD_writeStringXY(0, 0, buffer);
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	461a      	mov	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fa8b 	bl	800082e <LCD_writeStringXY>
		if(alarmState == 0) snprintf(buffer, sizeof(buffer), "%02d:%02d  OPEN ", openTime.hour, openTime.min);
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <LCD_update+0x2dc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <LCD_update+0x25e>
 8001320:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <LCD_update+0x2e0>)
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <LCD_update+0x2e0>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f107 0010 	add.w	r0, r7, #16
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4613      	mov	r3, r2
 8001330:	4a23      	ldr	r2, [pc, #140]	@ (80013c0 <LCD_update+0x2e4>)
 8001332:	2110      	movs	r1, #16
 8001334:	f004 f9ca 	bl	80056cc <sniprintf>
 8001338:	e00f      	b.n	800135a <LCD_update+0x27e>
		else if(alarmState == 1) snprintf(buffer, sizeof(buffer), "%02d:%02d  CLOSE", closeTime.hour, closeTime.min);
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <LCD_update+0x2dc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d10b      	bne.n	800135a <LCD_update+0x27e>
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <LCD_update+0x2e8>)
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <LCD_update+0x2e8>)
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	f107 0010 	add.w	r0, r7, #16
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <LCD_update+0x2ec>)
 8001354:	2110      	movs	r1, #16
 8001356:	f004 f9b9 	bl	80056cc <sniprintf>
		LCD_writeStringXY(1, 0, buffer);
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	461a      	mov	r2, r3
 8001360:	2100      	movs	r1, #0
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff fa63 	bl	800082e <LCD_writeStringXY>
}
 8001368:	bf00      	nop
 800136a:	3744      	adds	r7, #68	@ 0x44
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	004c4c41 	.word	0x004c4c41
 8001374:	08007270 	.word	0x08007270
 8001378:	08007278 	.word	0x08007278
 800137c:	08007280 	.word	0x08007280
 8001380:	08007288 	.word	0x08007288
 8001384:	08007290 	.word	0x08007290
 8001388:	08007298 	.word	0x08007298
 800138c:	080072a0 	.word	0x080072a0
 8001390:	080072a8 	.word	0x080072a8
 8001394:	08007208 	.word	0x08007208
 8001398:	08007248 	.word	0x08007248
 800139c:	080072b0 	.word	0x080072b0
 80013a0:	080072b8 	.word	0x080072b8
 80013a4:	080072c0 	.word	0x080072c0
 80013a8:	080072cc 	.word	0x080072cc
 80013ac:	080072d4 	.word	0x080072d4
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	080072dc 	.word	0x080072dc
 80013b8:	20000290 	.word	0x20000290
 80013bc:	20000024 	.word	0x20000024
 80013c0:	080072f0 	.word	0x080072f0
 80013c4:	2000003c 	.word	0x2000003c
 80013c8:	08007304 	.word	0x08007304

080013cc <bluetooth_Event>:

void bluetooth_Event()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0ae      	sub	sp, #184	@ 0xb8
 80013d0:	af02      	add	r7, sp, #8
    int i = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    char *pToken;
    char *pArray[ARR_CNT] = {0};
 80013d8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
    char recvBuf[CMD_SIZE] = {0};
 80013ea:	2300      	movs	r3, #0
 80013ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80013f2:	222e      	movs	r2, #46	@ 0x2e
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 fac0 	bl	800597c <memset>
    char sendBuf[CMD_SIZE] = {0};
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	222e      	movs	r2, #46	@ 0x2e
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f004 fab7 	bl	800597c <memset>

    strcpy(recvBuf, btData);
 800140e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001412:	49c3      	ldr	r1, [pc, #780]	@ (8001720 <bluetooth_Event+0x354>)
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fb88 	bl	8005b2a <strcpy>

    printf("btData : %s\r\n", btData);
 800141a:	49c1      	ldr	r1, [pc, #772]	@ (8001720 <bluetooth_Event+0x354>)
 800141c:	48c1      	ldr	r0, [pc, #772]	@ (8001724 <bluetooth_Event+0x358>)
 800141e:	f004 f8e5 	bl	80055ec <iprintf>

    pToken = strtok(recvBuf, "[@]");
 8001422:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001426:	49c0      	ldr	r1, [pc, #768]	@ (8001728 <bluetooth_Event+0x35c>)
 8001428:	4618      	mov	r0, r3
 800142a:	f004 faaf 	bl	800598c <strtok>
 800142e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    while (pToken != NULL) {
 8001432:	e017      	b.n	8001464 <bluetooth_Event+0x98>
        pArray[i] = pToken;
 8001434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	33b0      	adds	r3, #176	@ 0xb0
 800143c:	443b      	add	r3, r7
 800143e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001442:	f843 2c30 	str.w	r2, [r3, #-48]
        if (++i >= ARR_CNT)
 8001446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800144a:	3301      	adds	r3, #1
 800144c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001454:	2b05      	cmp	r3, #5
 8001456:	dc0a      	bgt.n	800146e <bluetooth_Event+0xa2>
            break;
        pToken = strtok(NULL, "[@]");
 8001458:	49b3      	ldr	r1, [pc, #716]	@ (8001728 <bluetooth_Event+0x35c>)
 800145a:	2000      	movs	r0, #0
 800145c:	f004 fa96 	bl	800598c <strtok>
 8001460:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    while (pToken != NULL) {
 8001464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e3      	bne.n	8001434 <bluetooth_Event+0x68>
 800146c:	e000      	b.n	8001470 <bluetooth_Event+0xa4>
            break;
 800146e:	bf00      	nop
    }

    ///////////////////////////////// ACTUATOR STATE RECEIVE /////////////////////////////////
    if (!strcmp(pArray[1], "ACTUATOR"))
 8001470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001474:	49ad      	ldr	r1, [pc, #692]	@ (800172c <bluetooth_Event+0x360>)
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe feb2 	bl	80001e0 <strcmp>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d177      	bne.n	8001572 <bluetooth_Event+0x1a6>
    {
        int receivedFloor;
        if (!strcmp(pArray[2], "ALL")) {
 8001482:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001486:	49aa      	ldr	r1, [pc, #680]	@ (8001730 <bluetooth_Event+0x364>)
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe fea9 	bl	80001e0 <strcmp>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <bluetooth_Event+0xce>
            receivedFloor = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e00d      	b.n	80014b6 <bluetooth_Event+0xea>
        } else if (sscanf(pArray[2], "%dF", &receivedFloor) == 1) {
 800149a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800149e:	f107 0214 	add.w	r2, r7, #20
 80014a2:	49a4      	ldr	r1, [pc, #656]	@ (8001734 <bluetooth_Event+0x368>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 f965 	bl	8005774 <siscanf>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d102      	bne.n	80014b6 <bluetooth_Event+0xea>
            floorState = receivedFloor;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	4aa1      	ldr	r2, [pc, #644]	@ (8001738 <bluetooth_Event+0x36c>)
 80014b4:	6013      	str	r3, [r2, #0]
        }

        if (!strcmp(pArray[3], "FAN")) {
 80014b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014ba:	49a0      	ldr	r1, [pc, #640]	@ (800173c <bluetooth_Event+0x370>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fe8f 	bl	80001e0 <strcmp>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d103      	bne.n	80014d0 <bluetooth_Event+0x104>
            actuatorState = 0;
 80014c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001740 <bluetooth_Event+0x374>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e025      	b.n	800151c <bluetooth_Event+0x150>
        } else if (!strcmp(pArray[3], "BLIND")) {
 80014d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014d4:	499b      	ldr	r1, [pc, #620]	@ (8001744 <bluetooth_Event+0x378>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fe82 	bl	80001e0 <strcmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d103      	bne.n	80014ea <bluetooth_Event+0x11e>
            actuatorState = 1;
 80014e2:	4b97      	ldr	r3, [pc, #604]	@ (8001740 <bluetooth_Event+0x374>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e018      	b.n	800151c <bluetooth_Event+0x150>
        } else if (!strcmp(pArray[3], "LAMP")) {
 80014ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014ee:	4996      	ldr	r1, [pc, #600]	@ (8001748 <bluetooth_Event+0x37c>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fe75 	bl	80001e0 <strcmp>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d103      	bne.n	8001504 <bluetooth_Event+0x138>
            actuatorState = 2;
 80014fc:	4b90      	ldr	r3, [pc, #576]	@ (8001740 <bluetooth_Event+0x374>)
 80014fe:	2202      	movs	r2, #2
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e00b      	b.n	800151c <bluetooth_Event+0x150>
        } else if (!strcmp(pArray[3], "WINDOW")) {
 8001504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001508:	4990      	ldr	r1, [pc, #576]	@ (800174c <bluetooth_Event+0x380>)
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fe68 	bl	80001e0 <strcmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <bluetooth_Event+0x150>
            actuatorState = 3;
 8001516:	4b8a      	ldr	r3, [pc, #552]	@ (8001740 <bluetooth_Event+0x374>)
 8001518:	2203      	movs	r2, #3
 800151a:	601a      	str	r2, [r3, #0]
        }

        onoffState = (!strcmp(pArray[4], "ON") || !strcmp(pArray[4], "OPEN") || !strcmp(pArray[4], "UP")) ? 1 : 0;
 800151c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001520:	498b      	ldr	r1, [pc, #556]	@ (8001750 <bluetooth_Event+0x384>)
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fe5c 	bl	80001e0 <strcmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d011      	beq.n	8001552 <bluetooth_Event+0x186>
 800152e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001532:	4988      	ldr	r1, [pc, #544]	@ (8001754 <bluetooth_Event+0x388>)
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe53 	bl	80001e0 <strcmp>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <bluetooth_Event+0x186>
 8001540:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001544:	4984      	ldr	r1, [pc, #528]	@ (8001758 <bluetooth_Event+0x38c>)
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fe4a 	bl	80001e0 <strcmp>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <bluetooth_Event+0x18a>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <bluetooth_Event+0x18c>
 8001556:	2300      	movs	r3, #0
 8001558:	4a80      	ldr	r2, [pc, #512]	@ (800175c <bluetooth_Event+0x390>)
 800155a:	6013      	str	r3, [r2, #0]

        LCD_update(modeState, floorState, actuatorState, onoffState);
 800155c:	4b80      	ldr	r3, [pc, #512]	@ (8001760 <bluetooth_Event+0x394>)
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	4b75      	ldr	r3, [pc, #468]	@ (8001738 <bluetooth_Event+0x36c>)
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	4b76      	ldr	r3, [pc, #472]	@ (8001740 <bluetooth_Event+0x374>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b7c      	ldr	r3, [pc, #496]	@ (800175c <bluetooth_Event+0x390>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f7ff fdb6 	bl	80010dc <LCD_update>
 8001570:	e0d3      	b.n	800171a <bluetooth_Event+0x34e>
        return;
    }
    ///////////////////////////////// SENSOR DATA RECEIVE /////////////////////////////////
    else if((modeState == MONITOR) && !strcmp(pArray[1], "SENSOR"))
 8001572:	4b7b      	ldr	r3, [pc, #492]	@ (8001760 <bluetooth_Event+0x394>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d13f      	bne.n	80015fa <bluetooth_Event+0x22e>
 800157a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800157e:	4979      	ldr	r1, [pc, #484]	@ (8001764 <bluetooth_Event+0x398>)
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe fe2d 	bl	80001e0 <strcmp>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d136      	bne.n	80015fa <bluetooth_Event+0x22e>
    {	//SENSOR@FLOOR@CDS@HUMI@TEMP
    	int floor = atoi(pArray[2]);
 800158c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fedf 	bl	8005354 <atoi>
 8001596:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    	if(floor == floorState)
 800159a:	4b67      	ldr	r3, [pc, #412]	@ (8001738 <bluetooth_Event+0x36c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80015a2:	429a      	cmp	r2, r3
 80015a4:	f040 80b6 	bne.w	8001714 <bluetooth_Event+0x348>
    	{
    		int cds = atoi(pArray[3]);
 80015a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fed1 	bl	8005354 <atoi>
 80015b2:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
			int humi = atoi(pArray[4]);
 80015b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 feca 	bl	8005354 <atoi>
 80015c0:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
			int temp = atoi(pArray[5]);
 80015c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fec3 	bl	8005354 <atoi>
 80015ce:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
			char buffer[16];

			snprintf(buffer, sizeof(buffer), "C:%2d,H:%2d,T:%2d",cds, humi, temp);
 80015d2:	1d38      	adds	r0, r7, #4
 80015d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80015e4:	4a60      	ldr	r2, [pc, #384]	@ (8001768 <bluetooth_Event+0x39c>)
 80015e6:	2110      	movs	r1, #16
 80015e8:	f004 f870 	bl	80056cc <sniprintf>
			LCD_writeStringXY(1, 0, buffer);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	461a      	mov	r2, r3
 80015f0:	2100      	movs	r1, #0
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff f91b 	bl	800082e <LCD_writeStringXY>
    	}
    	return;
 80015f8:	e08c      	b.n	8001714 <bluetooth_Event+0x348>
    }
    ////////////////////////////////// GETTIME /////////////////////////////////////////
    else if(!strcmp(pArray[0],"GETTIME")) {  //GETTIME
 80015fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015fe:	495b      	ldr	r1, [pc, #364]	@ (800176c <bluetooth_Event+0x3a0>)
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe fded 	bl	80001e0 <strcmp>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d171      	bne.n	80016f0 <bluetooth_Event+0x324>
      dateTime.year = (pArray[1][0]-0x30) * 10 + pArray[1][1]-0x30 ;
 800160c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	461a      	mov	r2, r3
 8001620:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001624:	3301      	adds	r3, #1
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4413      	add	r3, r2
 800162a:	3b30      	subs	r3, #48	@ 0x30
 800162c:	4a50      	ldr	r2, [pc, #320]	@ (8001770 <bluetooth_Event+0x3a4>)
 800162e:	6013      	str	r3, [r2, #0]
      dateTime.month =  (pArray[1][3]-0x30) * 10 + pArray[1][4]-0x30 ;
 8001630:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001634:	3303      	adds	r3, #3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	461a      	mov	r2, r3
 8001646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800164a:	3304      	adds	r3, #4
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	3b30      	subs	r3, #48	@ 0x30
 8001652:	4a47      	ldr	r2, [pc, #284]	@ (8001770 <bluetooth_Event+0x3a4>)
 8001654:	6053      	str	r3, [r2, #4]
      dateTime.day =  (pArray[1][6]-0x30) * 10 + pArray[1][7]-0x30 ;
 8001656:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800165a:	3306      	adds	r3, #6
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	461a      	mov	r2, r3
 800166c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001670:	3307      	adds	r3, #7
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4413      	add	r3, r2
 8001676:	3b30      	subs	r3, #48	@ 0x30
 8001678:	4a3d      	ldr	r2, [pc, #244]	@ (8001770 <bluetooth_Event+0x3a4>)
 800167a:	6093      	str	r3, [r2, #8]
      dateTime.hour = (pArray[1][9]-0x30) * 10 + pArray[1][10]-0x30 ;
 800167c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001680:	3309      	adds	r3, #9
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	461a      	mov	r2, r3
 8001692:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001696:	330a      	adds	r3, #10
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	3b30      	subs	r3, #48	@ 0x30
 800169e:	4a34      	ldr	r2, [pc, #208]	@ (8001770 <bluetooth_Event+0x3a4>)
 80016a0:	60d3      	str	r3, [r2, #12]
      dateTime.min =  (pArray[1][12]-0x30) * 10 + pArray[1][13]-0x30 ;
 80016a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016a6:	330c      	adds	r3, #12
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	461a      	mov	r2, r3
 80016b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016bc:	330d      	adds	r3, #13
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	3b30      	subs	r3, #48	@ 0x30
 80016c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001770 <bluetooth_Event+0x3a4>)
 80016c6:	6113      	str	r3, [r2, #16]
      dateTime.sec =  (pArray[1][15]-0x30) * 10 + pArray[1][16]-0x30 ;
 80016c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016cc:	330f      	adds	r3, #15
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	461a      	mov	r2, r3
 80016de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016e2:	3310      	adds	r3, #16
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	3b30      	subs	r3, #48	@ 0x30
 80016ea:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <bluetooth_Event+0x3a4>)
 80016ec:	6153      	str	r3, [r2, #20]
      return;
 80016ee:	e014      	b.n	800171a <bluetooth_Event+0x34e>
    }
    ////////////////////////////////// ETC /////////////////////////////////////////
    else if (!strncmp(pArray[1], " New conn", sizeof(" New conn"))) {
 80016f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016f4:	491f      	ldr	r1, [pc, #124]	@ (8001774 <bluetooth_Event+0x3a8>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fd72 	bl	80001e0 <strcmp>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <bluetooth_Event+0x34c>
        return;
    } else if (!strncmp(pArray[1], " Already log", sizeof(" Already log"))) {
 8001702:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001706:	491c      	ldr	r1, [pc, #112]	@ (8001778 <bluetooth_Event+0x3ac>)
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fd69 	bl	80001e0 <strcmp>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
        return;
    } else
        return;
 8001712:	e002      	b.n	800171a <bluetooth_Event+0x34e>
    	return;
 8001714:	bf00      	nop
 8001716:	e000      	b.n	800171a <bluetooth_Event+0x34e>
        return;
 8001718:	bf00      	nop

    sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
    HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), HAL_MAX_DELAY);
}
 800171a:	37b0      	adds	r7, #176	@ 0xb0
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000244 	.word	0x20000244
 8001724:	08007318 	.word	0x08007318
 8001728:	08007328 	.word	0x08007328
 800172c:	0800732c 	.word	0x0800732c
 8001730:	08007338 	.word	0x08007338
 8001734:	0800733c 	.word	0x0800733c
 8001738:	20000008 	.word	0x20000008
 800173c:	08007218 	.word	0x08007218
 8001740:	20000288 	.word	0x20000288
 8001744:	08007210 	.word	0x08007210
 8001748:	08007200 	.word	0x08007200
 800174c:	08007208 	.word	0x08007208
 8001750:	08007250 	.word	0x08007250
 8001754:	08007240 	.word	0x08007240
 8001758:	08007234 	.word	0x08007234
 800175c:	2000028c 	.word	0x2000028c
 8001760:	20000284 	.word	0x20000284
 8001764:	08007340 	.word	0x08007340
 8001768:	08007348 	.word	0x08007348
 800176c:	0800735c 	.word	0x0800735c
 8001770:	2000000c 	.word	0x2000000c
 8001774:	08007364 	.word	0x08007364
 8001778:	08007370 	.word	0x08007370

0800177c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001784:	1d39      	adds	r1, r7, #4
 8001786:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800178a:	2201      	movs	r2, #1
 800178c:	4803      	ldr	r0, [pc, #12]	@ (800179c <__io_putchar+0x20>)
 800178e:	f002 fddb 	bl	8004348 <HAL_UART_Transmit>

  return ch;
 8001792:	687b      	ldr	r3, [r7, #4]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000017c 	.word	0x2000017c

080017a0 <clock_calc>:

void clock_calc(DATETIME *dateTime, DATETIME *openTime, DATETIME *closeTime)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09e      	sub	sp, #120	@ 0x78
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  dateTime->sec++;          // 초 증가
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	615a      	str	r2, [r3, #20]

  if (dateTime->sec >= 60) // 60초 도달 시
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b3b      	cmp	r3, #59	@ 0x3b
 80017bc:	dd1d      	ble.n	80017fa <clock_calc+0x5a>
  {
      dateTime->sec = 0;    // 초 초기화
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
      dateTime->min++;      // 분 증가
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	611a      	str	r2, [r3, #16]

      if (dateTime->min >= 60) // 60분 도달 시
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80017d4:	dd11      	ble.n	80017fa <clock_calc+0x5a>
      {
          dateTime->min = 0;  // 분 초기화
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
          dateTime->hour++;   // 시간 증가
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	60da      	str	r2, [r3, #12]

          if (dateTime->hour == 24) // 24시간 도달 시
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b18      	cmp	r3, #24
 80017ec:	d105      	bne.n	80017fa <clock_calc+0x5a>
          {
            dateTime->hour = 0;   // 시간 초기화
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
            updateTimeFlag = 1; // 시간이 갱신되었음을 알리는 플래그
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <clock_calc+0xf4>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
          }
       }
   }

  char message[100];
  if((dateTime->min == openTime->min)&&(dateTime->hour == openTime->hour)&&(dateTime->sec == 0))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	429a      	cmp	r2, r3
 8001804:	d11e      	bne.n	8001844 <clock_calc+0xa4>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	429a      	cmp	r2, r3
 8001810:	d118      	bne.n	8001844 <clock_calc+0xa4>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d114      	bne.n	8001844 <clock_calc+0xa4>
  {
		sprintf(message, "[BMS_SQL]OPEN\n");
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	491e      	ldr	r1, [pc, #120]	@ (8001898 <clock_calc+0xf8>)
 8001820:	4618      	mov	r0, r3
 8001822:	f003 ff87 	bl	8005734 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fce2 	bl	80001f4 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	f107 0114 	add.w	r1, r7, #20
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	4817      	ldr	r0, [pc, #92]	@ (800189c <clock_calc+0xfc>)
 800183e:	f002 fd83 	bl	8004348 <HAL_UART_Transmit>
  else if((dateTime->min == closeTime->min)&&(dateTime->hour == closeTime->hour)&&(dateTime->sec == 0))
  {
		sprintf(message, "[BMS_SQL]CLOSE\n");
		HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
  }
}
 8001842:	e023      	b.n	800188c <clock_calc+0xec>
  else if((dateTime->min == closeTime->min)&&(dateTime->hour == closeTime->hour)&&(dateTime->sec == 0))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d11d      	bne.n	800188c <clock_calc+0xec>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d117      	bne.n	800188c <clock_calc+0xec>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d113      	bne.n	800188c <clock_calc+0xec>
		sprintf(message, "[BMS_SQL]CLOSE\n");
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	490d      	ldr	r1, [pc, #52]	@ (80018a0 <clock_calc+0x100>)
 800186a:	4618      	mov	r0, r3
 800186c:	f003 ff62 	bl	8005734 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fcbd 	bl	80001f4 <strlen>
 800187a:	4603      	mov	r3, r0
 800187c:	b29a      	uxth	r2, r3
 800187e:	f107 0114 	add.w	r1, r7, #20
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <clock_calc+0xfc>)
 8001888:	f002 fd5e 	bl	8004348 <HAL_UART_Transmit>
}
 800188c:	bf00      	nop
 800188e:	3778      	adds	r7, #120	@ 0x78
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000004 	.word	0x20000004
 8001898:	08007380 	.word	0x08007380
 800189c:	200001c4 	.word	0x200001c4
 80018a0:	08007390 	.word	0x08007390

080018a4 <alarm_min>:

void alarm_min(DATETIME *alarmTime)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  alarmTime->min++;          // 초 증가
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]

  if (alarmTime->min >= 60) // 60분 도달 시
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b3b      	cmp	r3, #59	@ 0x3b
 80018bc:	dd0e      	ble.n	80018dc <alarm_min+0x38>
  {
	  alarmTime->min = 0;  // 분 초기화
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
	  alarmTime->hour++;   // 시간 증가
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60da      	str	r2, [r3, #12]

	  if (alarmTime->hour == 24) // 24시간 도달 시
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b18      	cmp	r3, #24
 80018d4:	d102      	bne.n	80018dc <alarm_min+0x38>
	  {
		  alarmTime->hour = 0;   // 시간 초기화
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
	  }
   }
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <alarm_hour>:

void alarm_hour(DATETIME *alarmTime)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  alarmTime->hour++;          // 초 증가
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60da      	str	r2, [r3, #12]

  if (alarmTime->hour == 24) // 24시간 도달 시
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b18      	cmp	r3, #24
 8001900:	d102      	bne.n	8001908 <alarm_hour+0x20>
  {
	  alarmTime->hour = 0;   // 시간 초기화
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  }
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime = HAL_GetTick();
 800191e:	f000 fbe3 	bl	80020e8 <HAL_GetTick>
 8001922:	60f8      	str	r0, [r7, #12]

	if ((currentTime - lastButtonPressTime < 50) && keyNo != 0) {
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <HAL_GPIO_EXTI_Callback+0x88>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b31      	cmp	r3, #49	@ 0x31
 800192e:	d803      	bhi.n	8001938 <HAL_GPIO_EXTI_Callback+0x24>
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d12d      	bne.n	8001994 <HAL_GPIO_EXTI_Callback+0x80>
		return;
	}
	lastButtonPressTime = currentTime;
 8001938:	4a18      	ldr	r2, [pc, #96]	@ (800199c <HAL_GPIO_EXTI_Callback+0x88>)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6013      	str	r3, [r2, #0]
	switch (GPIO_Pin) {
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	3b01      	subs	r3, #1
 8001942:	2b07      	cmp	r3, #7
 8001944:	d822      	bhi.n	800198c <HAL_GPIO_EXTI_Callback+0x78>
 8001946:	a201      	add	r2, pc, #4	@ (adr r2, 800194c <HAL_GPIO_EXTI_Callback+0x38>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	0800196d 	.word	0x0800196d
 8001950:	08001975 	.word	0x08001975
 8001954:	0800198d 	.word	0x0800198d
 8001958:	0800197d 	.word	0x0800197d
 800195c:	0800198d 	.word	0x0800198d
 8001960:	0800198d 	.word	0x0800198d
 8001964:	0800198d 	.word	0x0800198d
 8001968:	08001985 	.word	0x08001985
		case MODE_BTN_Pin:
			keyNo = 1;
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x8c>)
 800196e:	2201      	movs	r2, #1
 8001970:	601a      	str	r2, [r3, #0]
			break;
 8001972:	e010      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x82>
		case FLOOR_BTN_Pin:
			keyNo = 2;
 8001974:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001976:	2202      	movs	r2, #2
 8001978:	601a      	str	r2, [r3, #0]
			break;
 800197a:	e00c      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x82>
		case ACTUATOR_BTN_Pin:
			keyNo = 3;
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x8c>)
 800197e:	2203      	movs	r2, #3
 8001980:	601a      	str	r2, [r3, #0]
			break;
 8001982:	e008      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x82>
		case SWITCH_BTN_Pin:
			keyNo = 4;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001986:	2204      	movs	r2, #4
 8001988:	601a      	str	r2, [r3, #0]
			break;
 800198a:	e004      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x82>
		default:
			keyNo = 0;
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x8c>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
			return;
 8001992:	e000      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x82>
		return;
 8001994:	bf00      	nop
	}
}
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000280 	.word	0x20000280
 80019a0:	20000000 	.word	0x20000000

080019a4 <HAL_TIM_PeriodElapsedCallback>:

///////////////////////////TIMER INTERRUPT/////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

	tim3Cnt++;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019b4:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019be:	d30a      	bcc.n	80019d6 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
		tim3Cnt = 0;
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
		clock_calc(&dateTime, &openTime, &closeTime);
 80019cc:	4a06      	ldr	r2, [pc, #24]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019ce:	4907      	ldr	r1, [pc, #28]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019d0:	4807      	ldr	r0, [pc, #28]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019d2:	f7ff fee5 	bl	80017a0 <clock_calc>
	}
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000027c 	.word	0x2000027c
 80019e4:	20000278 	.word	0x20000278
 80019e8:	2000003c 	.word	0x2000003c
 80019ec:	20000024 	.word	0x20000024
 80019f0:	2000000c 	.word	0x2000000c

080019f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2e      	ldr	r2, [pc, #184]	@ (8001abc <HAL_UART_RxCpltCallback+0xc8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d128      	bne.n	8001a58 <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 8001a06:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac0 <HAL_UART_RxCpltCallback+0xcc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac4 <HAL_UART_RxCpltCallback+0xd0>)
 8001a0c:	7811      	ldrb	r1, [r2, #0]
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac8 <HAL_UART_RxCpltCallback+0xd4>)
 8001a10:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8001a12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <HAL_UART_RxCpltCallback+0xcc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac8 <HAL_UART_RxCpltCallback+0xd4>)
 8001a18:	5cd3      	ldrb	r3, [r2, r3]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b0d      	cmp	r3, #13
 8001a1e:	d005      	beq.n	8001a2c <HAL_UART_RxCpltCallback+0x38>
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <HAL_UART_RxCpltCallback+0xcc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a29      	ldr	r2, [pc, #164]	@ (8001acc <HAL_UART_RxCpltCallback+0xd8>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	2b0a      	cmp	r3, #10
 8001a2a:	d10b      	bne.n	8001a44 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 8001a2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_UART_RxCpltCallback+0xcc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a25      	ldr	r2, [pc, #148]	@ (8001ac8 <HAL_UART_RxCpltCallback+0xd4>)
 8001a32:	2100      	movs	r1, #0
 8001a34:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8001a36:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <HAL_UART_RxCpltCallback+0xdc>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001a3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <HAL_UART_RxCpltCallback+0xcc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e004      	b.n	8001a4e <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 8001a44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <HAL_UART_RxCpltCallback+0xcc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac0 <HAL_UART_RxCpltCallback+0xcc>)
 8001a4c:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	491c      	ldr	r1, [pc, #112]	@ (8001ac4 <HAL_UART_RxCpltCallback+0xd0>)
 8001a52:	4820      	ldr	r0, [pc, #128]	@ (8001ad4 <HAL_UART_RxCpltCallback+0xe0>)
 8001a54:	f002 fd03 	bl	800445e <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <HAL_UART_RxCpltCallback+0xe4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d127      	bne.n	8001ab2 <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 8001a62:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <HAL_UART_RxCpltCallback+0xe8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <HAL_UART_RxCpltCallback+0xec>)
 8001a68:	7811      	ldrb	r1, [r2, #0]
 8001a6a:	4a18      	ldr	r2, [pc, #96]	@ (8001acc <HAL_UART_RxCpltCallback+0xd8>)
 8001a6c:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_UART_RxCpltCallback+0xe8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a16      	ldr	r2, [pc, #88]	@ (8001acc <HAL_UART_RxCpltCallback+0xd8>)
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	2b0a      	cmp	r3, #10
 8001a78:	d005      	beq.n	8001a86 <HAL_UART_RxCpltCallback+0x92>
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_UART_RxCpltCallback+0xe8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a13      	ldr	r2, [pc, #76]	@ (8001acc <HAL_UART_RxCpltCallback+0xd8>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	2b0d      	cmp	r3, #13
 8001a84:	d10b      	bne.n	8001a9e <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_UART_RxCpltCallback+0xe8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a10      	ldr	r2, [pc, #64]	@ (8001acc <HAL_UART_RxCpltCallback+0xd8>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <HAL_UART_RxCpltCallback+0xf0>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_UART_RxCpltCallback+0xe8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e004      	b.n	8001aa8 <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_UART_RxCpltCallback+0xe8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <HAL_UART_RxCpltCallback+0xe8>)
 8001aa6:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <HAL_UART_RxCpltCallback+0xec>)
 8001aac:	480e      	ldr	r0, [pc, #56]	@ (8001ae8 <HAL_UART_RxCpltCallback+0xf4>)
 8001aae:	f002 fcd6 	bl	800445e <HAL_UART_Receive_IT>
    }
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40004400 	.word	0x40004400
 8001ac0:	20000294 	.word	0x20000294
 8001ac4:	2000020c 	.word	0x2000020c
 8001ac8:	20000210 	.word	0x20000210
 8001acc:	20000244 	.word	0x20000244
 8001ad0:	2000020d 	.word	0x2000020d
 8001ad4:	2000017c 	.word	0x2000017c
 8001ad8:	40011400 	.word	0x40011400
 8001adc:	20000298 	.word	0x20000298
 8001ae0:	20000243 	.word	0x20000243
 8001ae4:	20000242 	.word	0x20000242
 8001ae8:	200001c4 	.word	0x200001c4

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <Error_Handler+0x8>

08001af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	4a0f      	ldr	r2, [pc, #60]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b36:	2007      	movs	r0, #7
 8001b38:	f000 fbd6 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a19      	ldr	r2, [pc, #100]	@ (8001bcc <HAL_I2C_MspInit+0x84>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d12c      	bne.n	8001bc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8c:	2312      	movs	r3, #18
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480c      	ldr	r0, [pc, #48]	@ (8001bd4 <HAL_I2C_MspInit+0x8c>)
 8001ba4:	f000 fc74 	bl	8002490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001bb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	@ 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40005400 	.word	0x40005400
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c20 <HAL_TIM_Base_MspInit+0x48>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d115      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <HAL_TIM_Base_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <HAL_TIM_Base_MspInit+0x4c>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_TIM_Base_MspInit+0x4c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	201d      	movs	r0, #29
 8001c0c:	f000 fb77 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c10:	201d      	movs	r0, #29
 8001c12:	f000 fb90 	bl	8002336 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	@ 0x30
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a3a      	ldr	r2, [pc, #232]	@ (8001d30 <HAL_UART_MspInit+0x108>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d134      	bne.n	8001cb4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	4b39      	ldr	r3, [pc, #228]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	4a38      	ldr	r2, [pc, #224]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5a:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	4b32      	ldr	r3, [pc, #200]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a31      	ldr	r2, [pc, #196]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b2f      	ldr	r3, [pc, #188]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c82:	230c      	movs	r3, #12
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c92:	2307      	movs	r3, #7
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4826      	ldr	r0, [pc, #152]	@ (8001d38 <HAL_UART_MspInit+0x110>)
 8001c9e:	f000 fbf7 	bl	8002490 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2026      	movs	r0, #38	@ 0x26
 8001ca8:	f000 fb29 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cac:	2026      	movs	r0, #38	@ 0x26
 8001cae:	f000 fb42 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001cb2:	e038      	b.n	8001d26 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a20      	ldr	r2, [pc, #128]	@ (8001d3c <HAL_UART_MspInit+0x114>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d133      	bne.n	8001d26 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
 8001ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a14      	ldr	r2, [pc, #80]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_UART_MspInit+0x10c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cf6:	23c0      	movs	r3, #192	@ 0xc0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d06:	2308      	movs	r3, #8
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <HAL_UART_MspInit+0x118>)
 8001d12:	f000 fbbd 	bl	8002490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2047      	movs	r0, #71	@ 0x47
 8001d1c:	f000 faef 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d20:	2047      	movs	r0, #71	@ 0x47
 8001d22:	f000 fb08 	bl	8002336 <HAL_NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3730      	adds	r7, #48	@ 0x30
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40004400 	.word	0x40004400
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40011400 	.word	0x40011400
 8001d40:	40020800 	.word	0x40020800

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <NMI_Handler+0x4>

08001d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9a:	f000 f991 	bl	80020c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_BTN_Pin);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 fcf6 	bl	8002798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLOOR_BTN_Pin);
 8001db4:	2002      	movs	r0, #2
 8001db6:	f000 fcef 	bl	8002798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACTUATOR_BTN_Pin);
 8001dc2:	2004      	movs	r0, #4
 8001dc4:	f000 fce8 	bl	8002798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_BTN_Pin);
 8001dd0:	2008      	movs	r0, #8
 8001dd2:	f000 fce1 	bl	8002798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <TIM3_IRQHandler+0x10>)
 8001de2:	f001 fed9 	bl	8003b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000134 	.word	0x20000134

08001df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <USART2_IRQHandler+0x10>)
 8001df6:	f002 fb57 	bl	80044a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000017c 	.word	0x2000017c

08001e04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <USART6_IRQHandler+0x10>)
 8001e0a:	f002 fb4d 	bl	80044a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200001c4 	.word	0x200001c4

08001e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_kill>:

int _kill(int pid, int sig)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e32:	f003 fe4d 	bl	8005ad0 <__errno>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2216      	movs	r2, #22
 8001e3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_exit>:

void _exit (int status)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffe7 	bl	8001e28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e5a:	bf00      	nop
 8001e5c:	e7fd      	b.n	8001e5a <_exit+0x12>

08001e5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e00a      	b.n	8001e86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e70:	f3af 8000 	nop.w
 8001e74:	4601      	mov	r1, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	60ba      	str	r2, [r7, #8]
 8001e7c:	b2ca      	uxtb	r2, r1
 8001e7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3301      	adds	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbf0      	blt.n	8001e70 <_read+0x12>
  }

  return len;
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e009      	b.n	8001ebe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	60ba      	str	r2, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fc62 	bl	800177c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	dbf1      	blt.n	8001eaa <_write+0x12>
  }
  return len;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_close>:

int _close(int file)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef8:	605a      	str	r2, [r3, #4]
  return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_isatty>:

int _isatty(int file)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	@ (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f68:	f003 fdb2 	bl	8005ad0 <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	220c      	movs	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e009      	b.n	8001f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <_sbrk+0x64>)
 8001f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20020000 	.word	0x20020000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	2000029c 	.word	0x2000029c
 8001fa0:	200003f0 	.word	0x200003f0

08001fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <SystemInit+0x20>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fae:	4a05      	ldr	r2, [pc, #20]	@ (8001fc4 <SystemInit+0x20>)
 8001fb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002000 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fcc:	f7ff ffea 	bl	8001fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480c      	ldr	r0, [pc, #48]	@ (8002004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd2:	490d      	ldr	r1, [pc, #52]	@ (8002008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8002014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f003 fd71 	bl	8005adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffa:	f7fe fc3b 	bl	8000874 <main>
  bx  lr    
 8001ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 800200c:	080075d0 	.word	0x080075d0
  ldr r2, =_sbss
 8002010:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8002014:	200003f0 	.word	0x200003f0

08002018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC_IRQHandler>
	...

0800201c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_Init+0x40>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <HAL_Init+0x40>)
 8002026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800202a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_Init+0x40>)
 8002032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a07      	ldr	r2, [pc, #28]	@ (800205c <HAL_Init+0x40>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 f94f 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204a:	2000      	movs	r0, #0
 800204c:	f000 f808 	bl	8002060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002050:	f7ff fd52 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023c00 	.word	0x40023c00

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_InitTick+0x54>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_InitTick+0x58>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002076:	fbb3 f3f1 	udiv	r3, r3, r1
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f967 	bl	8002352 <HAL_SYSTICK_Config>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00e      	b.n	80020ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b0f      	cmp	r3, #15
 8002092:	d80a      	bhi.n	80020aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002094:	2200      	movs	r2, #0
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f000 f92f 	bl	80022fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a0:	4a06      	ldr	r2, [pc, #24]	@ (80020bc <HAL_InitTick+0x5c>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000054 	.word	0x20000054
 80020b8:	2000005c 	.word	0x2000005c
 80020bc:	20000058 	.word	0x20000058

080020c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_IncTick+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_IncTick+0x24>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <HAL_IncTick+0x24>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	2000005c 	.word	0x2000005c
 80020e4:	200002a0 	.word	0x200002a0

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	200002a0 	.word	0x200002a0

08002100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff ffee 	bl	80020e8 <HAL_GetTick>
 800210c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d005      	beq.n	8002126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <HAL_Delay+0x44>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002126:	bf00      	nop
 8002128:	f7ff ffde 	bl	80020e8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	429a      	cmp	r2, r3
 8002136:	d8f7      	bhi.n	8002128 <HAL_Delay+0x28>
  {
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	2000005c 	.word	0x2000005c

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4907      	ldr	r1, [pc, #28]	@ (80021e4 <__NVIC_EnableIRQ+0x38>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	@ (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	@ 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	@ 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f7ff ff8e 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff29 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff3e 	bl	8002190 <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff8e 	bl	800223c <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff31 	bl	80021ac <__NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffa2 	bl	80022a4 <SysTick_Config>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff feb6 	bl	80020e8 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d008      	beq.n	800239c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2280      	movs	r2, #128	@ 0x80
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e052      	b.n	8002442 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0216 	bic.w	r2, r2, #22
 80023aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <HAL_DMA_Abort+0x62>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0208 	bic.w	r2, r2, #8
 80023da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ec:	e013      	b.n	8002416 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ee:	f7ff fe7b 	bl	80020e8 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d90c      	bls.n	8002416 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2203      	movs	r2, #3
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e015      	b.n	8002442 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e4      	bne.n	80023ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002428:	223f      	movs	r2, #63	@ 0x3f
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d004      	beq.n	8002468 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2280      	movs	r2, #128	@ 0x80
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e00c      	b.n	8002482 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2205      	movs	r2, #5
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e159      	b.n	8002760 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8148 	bne.w	800275a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d005      	beq.n	80024e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d130      	bne.n	8002544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0201 	and.w	r2, r3, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b03      	cmp	r3, #3
 800254e:	d017      	beq.n	8002580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d123      	bne.n	80025d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0203 	and.w	r2, r3, #3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a2 	beq.w	800275a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b57      	ldr	r3, [pc, #348]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a56      	ldr	r2, [pc, #344]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b54      	ldr	r3, [pc, #336]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002632:	4a52      	ldr	r2, [pc, #328]	@ (800277c <HAL_GPIO_Init+0x2ec>)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a49      	ldr	r2, [pc, #292]	@ (8002780 <HAL_GPIO_Init+0x2f0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d019      	beq.n	8002692 <HAL_GPIO_Init+0x202>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a48      	ldr	r2, [pc, #288]	@ (8002784 <HAL_GPIO_Init+0x2f4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x1fe>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a47      	ldr	r2, [pc, #284]	@ (8002788 <HAL_GPIO_Init+0x2f8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x1fa>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a46      	ldr	r2, [pc, #280]	@ (800278c <HAL_GPIO_Init+0x2fc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x1f6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a45      	ldr	r2, [pc, #276]	@ (8002790 <HAL_GPIO_Init+0x300>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x1f2>
 800267e:	2304      	movs	r3, #4
 8002680:	e008      	b.n	8002694 <HAL_GPIO_Init+0x204>
 8002682:	2307      	movs	r3, #7
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x204>
 8002686:	2303      	movs	r3, #3
 8002688:	e004      	b.n	8002694 <HAL_GPIO_Init+0x204>
 800268a:	2302      	movs	r3, #2
 800268c:	e002      	b.n	8002694 <HAL_GPIO_Init+0x204>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_GPIO_Init+0x204>
 8002692:	2300      	movs	r3, #0
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	f002 0203 	and.w	r2, r2, #3
 800269a:	0092      	lsls	r2, r2, #2
 800269c:	4093      	lsls	r3, r2
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a4:	4935      	ldr	r1, [pc, #212]	@ (800277c <HAL_GPIO_Init+0x2ec>)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b2:	4b38      	ldr	r3, [pc, #224]	@ (8002794 <HAL_GPIO_Init+0x304>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002794 <HAL_GPIO_Init+0x304>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_GPIO_Init+0x304>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002700:	4a24      	ldr	r2, [pc, #144]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272a:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <HAL_GPIO_Init+0x304>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002754:	4a0f      	ldr	r2, [pc, #60]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3301      	adds	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b0f      	cmp	r3, #15
 8002764:	f67f aea2 	bls.w	80024ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3724      	adds	r7, #36	@ 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	40013800 	.word	0x40013800
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	40020800 	.word	0x40020800
 800278c:	40020c00 	.word	0x40020c00
 8002790:	40021000 	.word	0x40021000
 8002794:	40013c00 	.word	0x40013c00

08002798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027a2:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ae:	4a05      	ldr	r2, [pc, #20]	@ (80027c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f8ac 	bl	8001914 <HAL_GPIO_EXTI_Callback>
  }
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40013c00 	.word	0x40013c00

080027c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e12b      	b.n	8002a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff f9aa 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2224      	movs	r2, #36	@ 0x24
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800281a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800282a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800282c:	f001 f8da 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8002830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4a81      	ldr	r2, [pc, #516]	@ (8002a3c <HAL_I2C_Init+0x274>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d807      	bhi.n	800284c <HAL_I2C_Init+0x84>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a80      	ldr	r2, [pc, #512]	@ (8002a40 <HAL_I2C_Init+0x278>)
 8002840:	4293      	cmp	r3, r2
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e006      	b.n	800285a <HAL_I2C_Init+0x92>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a44 <HAL_I2C_Init+0x27c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	bf94      	ite	ls
 8002854:	2301      	movls	r3, #1
 8002856:	2300      	movhi	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0e7      	b.n	8002a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a78      	ldr	r2, [pc, #480]	@ (8002a48 <HAL_I2C_Init+0x280>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	0c9b      	lsrs	r3, r3, #18
 800286c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a6a      	ldr	r2, [pc, #424]	@ (8002a3c <HAL_I2C_Init+0x274>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d802      	bhi.n	800289c <HAL_I2C_Init+0xd4>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	3301      	adds	r3, #1
 800289a:	e009      	b.n	80028b0 <HAL_I2C_Init+0xe8>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	4a69      	ldr	r2, [pc, #420]	@ (8002a4c <HAL_I2C_Init+0x284>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	3301      	adds	r3, #1
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	495c      	ldr	r1, [pc, #368]	@ (8002a3c <HAL_I2C_Init+0x274>)
 80028cc:	428b      	cmp	r3, r1
 80028ce:	d819      	bhi.n	8002904 <HAL_I2C_Init+0x13c>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1e59      	subs	r1, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fbb1 f3f3 	udiv	r3, r1, r3
 80028de:	1c59      	adds	r1, r3, #1
 80028e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028e4:	400b      	ands	r3, r1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_I2C_Init+0x138>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1e59      	subs	r1, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fe:	e051      	b.n	80029a4 <HAL_I2C_Init+0x1dc>
 8002900:	2304      	movs	r3, #4
 8002902:	e04f      	b.n	80029a4 <HAL_I2C_Init+0x1dc>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d111      	bne.n	8002930 <HAL_I2C_Init+0x168>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1e58      	subs	r0, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e012      	b.n	8002956 <HAL_I2C_Init+0x18e>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e58      	subs	r0, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	0099      	lsls	r1, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	fbb0 f3f3 	udiv	r3, r0, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Init+0x196>
 800295a:	2301      	movs	r3, #1
 800295c:	e022      	b.n	80029a4 <HAL_I2C_Init+0x1dc>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10e      	bne.n	8002984 <HAL_I2C_Init+0x1bc>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e58      	subs	r0, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	460b      	mov	r3, r1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	440b      	add	r3, r1
 8002974:	fbb0 f3f3 	udiv	r3, r0, r3
 8002978:	3301      	adds	r3, #1
 800297a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002982:	e00f      	b.n	80029a4 <HAL_I2C_Init+0x1dc>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	0099      	lsls	r1, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	6809      	ldr	r1, [r1, #0]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6911      	ldr	r1, [r2, #16]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68d2      	ldr	r2, [r2, #12]
 80029de:	4311      	orrs	r1, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	000186a0 	.word	0x000186a0
 8002a40:	001e847f 	.word	0x001e847f
 8002a44:	003d08ff 	.word	0x003d08ff
 8002a48:	431bde83 	.word	0x431bde83
 8002a4c:	10624dd3 	.word	0x10624dd3

08002a50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	817b      	strh	r3, [r7, #10]
 8002a60:	4613      	mov	r3, r2
 8002a62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a64:	f7ff fb40 	bl	80020e8 <HAL_GetTick>
 8002a68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	f040 80e0 	bne.w	8002c38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2319      	movs	r3, #25
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4970      	ldr	r1, [pc, #448]	@ (8002c44 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f964 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0d3      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_I2C_Master_Transmit+0x50>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e0cc      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d007      	beq.n	8002ac6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2221      	movs	r2, #33	@ 0x21
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	893a      	ldrh	r2, [r7, #8]
 8002af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a50      	ldr	r2, [pc, #320]	@ (8002c48 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b08:	8979      	ldrh	r1, [r7, #10]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f89c 	bl	8002c4c <I2C_MasterRequestWrite>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e08d      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b34:	e066      	b.n	8002c04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	6a39      	ldr	r1, [r7, #32]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fa22 	bl	8002f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d107      	bne.n	8002b5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06b      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_I2C_Master_Transmit+0x188>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d017      	beq.n	8002bd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	6a39      	ldr	r1, [r7, #32]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fa19 	bl	8003014 <I2C_WaitOnBTFFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d107      	bne.n	8002c00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e01a      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d194      	bne.n	8002b36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	00100002 	.word	0x00100002
 8002c48:	ffff0000 	.word	0xffff0000

08002c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d006      	beq.n	8002c76 <I2C_MasterRequestWrite+0x2a>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d003      	beq.n	8002c76 <I2C_MasterRequestWrite+0x2a>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c74:	d108      	bne.n	8002c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e00b      	b.n	8002ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	2b12      	cmp	r3, #18
 8002c8e:	d107      	bne.n	8002ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f84f 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cc6:	d103      	bne.n	8002cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e035      	b.n	8002d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cdc:	d108      	bne.n	8002cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cec:	611a      	str	r2, [r3, #16]
 8002cee:	e01b      	b.n	8002d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cf0:	897b      	ldrh	r3, [r7, #10]
 8002cf2:	11db      	asrs	r3, r3, #7
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f003 0306 	and.w	r3, r3, #6
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f063 030f 	orn	r3, r3, #15
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	490e      	ldr	r1, [pc, #56]	@ (8002d48 <I2C_MasterRequestWrite+0xfc>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f898 	bl	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e010      	b.n	8002d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4907      	ldr	r1, [pc, #28]	@ (8002d4c <I2C_MasterRequestWrite+0x100>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f888 	bl	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	00010008 	.word	0x00010008
 8002d4c:	00010002 	.word	0x00010002

08002d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d60:	e048      	b.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d044      	beq.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6a:	f7ff f9bd 	bl	80020e8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d139      	bne.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d10d      	bne.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	43da      	mvns	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4013      	ands	r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	e00c      	b.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	43da      	mvns	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d116      	bne.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e023      	b.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	0c1b      	lsrs	r3, r3, #16
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d10d      	bne.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	43da      	mvns	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	e00c      	b.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	43da      	mvns	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4013      	ands	r3, r2
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d093      	beq.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e52:	e071      	b.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e62:	d123      	bne.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e067      	b.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d041      	beq.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	f7ff f918 	bl	80020e8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d302      	bcc.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d136      	bne.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10c      	bne.n	8002eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	e00b      	b.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e021      	b.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	0c1b      	lsrs	r3, r3, #16
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d10c      	bne.n	8002f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e00b      	b.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4013      	ands	r3, r2
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf14      	ite	ne
 8002f6e:	2301      	movne	r3, #1
 8002f70:	2300      	moveq	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f47f af6d 	bne.w	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f90:	e034      	b.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f886 	bl	80030a4 <I2C_IsAcknowledgeFailed>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e034      	b.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d028      	beq.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002faa:	f7ff f89d 	bl	80020e8 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d302      	bcc.n	8002fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d11d      	bne.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fca:	2b80      	cmp	r3, #128	@ 0x80
 8002fcc:	d016      	beq.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e007      	b.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003006:	2b80      	cmp	r3, #128	@ 0x80
 8003008:	d1c3      	bne.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003020:	e034      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f83e 	bl	80030a4 <I2C_IsAcknowledgeFailed>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e034      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d028      	beq.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303a:	f7ff f855 	bl	80020e8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11d      	bne.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d016      	beq.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e007      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b04      	cmp	r3, #4
 8003098:	d1c3      	bne.n	8003022 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ba:	d11b      	bne.n	80030f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	f043 0204 	orr.w	r2, r3, #4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e267      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d075      	beq.n	800320e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003122:	4b88      	ldr	r3, [pc, #544]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b04      	cmp	r3, #4
 800312c:	d00c      	beq.n	8003148 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4b85      	ldr	r3, [pc, #532]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003136:	2b08      	cmp	r3, #8
 8003138:	d112      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313a:	4b82      	ldr	r3, [pc, #520]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003146:	d10b      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	4b7e      	ldr	r3, [pc, #504]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05b      	beq.n	800320c <HAL_RCC_OscConfig+0x108>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d157      	bne.n	800320c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e242      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003168:	d106      	bne.n	8003178 <HAL_RCC_OscConfig+0x74>
 800316a:	4b76      	ldr	r3, [pc, #472]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a75      	ldr	r2, [pc, #468]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e01d      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x98>
 8003182:	4b70      	ldr	r3, [pc, #448]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a6f      	ldr	r2, [pc, #444]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b6d      	ldr	r3, [pc, #436]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a6c      	ldr	r2, [pc, #432]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e00b      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 800319c:	4b69      	ldr	r3, [pc, #420]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a68      	ldr	r2, [pc, #416]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b66      	ldr	r3, [pc, #408]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a65      	ldr	r2, [pc, #404]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 80031ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe ff94 	bl	80020e8 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fe ff90 	bl	80020e8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	@ 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e207      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0xc0>
 80031e2:	e014      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fe ff80 	bl	80020e8 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe ff7c 	bl	80020e8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	@ 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1f3      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fe:	4b51      	ldr	r3, [pc, #324]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0xe8>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d063      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800321a:	4b4a      	ldr	r3, [pc, #296]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003226:	4b47      	ldr	r3, [pc, #284]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800322e:	2b08      	cmp	r3, #8
 8003230:	d11c      	bne.n	800326c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b44      	ldr	r3, [pc, #272]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d116      	bne.n	800326c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	4b41      	ldr	r3, [pc, #260]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x152>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e1c7      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	4b3b      	ldr	r3, [pc, #236]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4937      	ldr	r1, [pc, #220]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	e03a      	b.n	80032e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003274:	4b34      	ldr	r3, [pc, #208]	@ (8003348 <HAL_RCC_OscConfig+0x244>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe ff35 	bl	80020e8 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003282:	f7fe ff31 	bl	80020e8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e1a8      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003294:	4b2b      	ldr	r3, [pc, #172]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b28      	ldr	r3, [pc, #160]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4925      	ldr	r1, [pc, #148]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b6:	4b24      	ldr	r3, [pc, #144]	@ (8003348 <HAL_RCC_OscConfig+0x244>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe ff14 	bl	80020e8 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fe ff10 	bl	80020e8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e187      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d036      	beq.n	800335c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f6:	4b15      	ldr	r3, [pc, #84]	@ (800334c <HAL_RCC_OscConfig+0x248>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fef4 	bl	80020e8 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003304:	f7fe fef0 	bl	80020e8 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e167      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <HAL_RCC_OscConfig+0x240>)
 8003318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x200>
 8003322:	e01b      	b.n	800335c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003324:	4b09      	ldr	r3, [pc, #36]	@ (800334c <HAL_RCC_OscConfig+0x248>)
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7fe fedd 	bl	80020e8 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003330:	e00e      	b.n	8003350 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003332:	f7fe fed9 	bl	80020e8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d907      	bls.n	8003350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e150      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
 8003344:	40023800 	.word	0x40023800
 8003348:	42470000 	.word	0x42470000
 800334c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	4b88      	ldr	r3, [pc, #544]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ea      	bne.n	8003332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8097 	beq.w	8003498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b81      	ldr	r3, [pc, #516]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10f      	bne.n	800339a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b7d      	ldr	r3, [pc, #500]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	4a7c      	ldr	r2, [pc, #496]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003388:	6413      	str	r3, [r2, #64]	@ 0x40
 800338a:	4b7a      	ldr	r3, [pc, #488]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	4b77      	ldr	r3, [pc, #476]	@ (8003578 <HAL_RCC_OscConfig+0x474>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d118      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a6:	4b74      	ldr	r3, [pc, #464]	@ (8003578 <HAL_RCC_OscConfig+0x474>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a73      	ldr	r2, [pc, #460]	@ (8003578 <HAL_RCC_OscConfig+0x474>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b2:	f7fe fe99 	bl	80020e8 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fe fe95 	bl	80020e8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e10c      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003578 <HAL_RCC_OscConfig+0x474>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x2ea>
 80033e0:	4b64      	ldr	r3, [pc, #400]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e4:	4a63      	ldr	r2, [pc, #396]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ec:	e01c      	b.n	8003428 <HAL_RCC_OscConfig+0x324>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x30c>
 80033f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6713      	str	r3, [r2, #112]	@ 0x70
 8003402:	4b5c      	ldr	r3, [pc, #368]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003406:	4a5b      	ldr	r2, [pc, #364]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6713      	str	r3, [r2, #112]	@ 0x70
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0x324>
 8003410:	4b58      	ldr	r3, [pc, #352]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003414:	4a57      	ldr	r2, [pc, #348]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	@ 0x70
 800341c:	4b55      	ldr	r3, [pc, #340]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003420:	4a54      	ldr	r2, [pc, #336]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003422:	f023 0304 	bic.w	r3, r3, #4
 8003426:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d015      	beq.n	800345c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003430:	f7fe fe5a 	bl	80020e8 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7fe fe56 	bl	80020e8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0cb      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344e:	4b49      	ldr	r3, [pc, #292]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0ee      	beq.n	8003438 <HAL_RCC_OscConfig+0x334>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345c:	f7fe fe44 	bl	80020e8 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003462:	e00a      	b.n	800347a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003464:	f7fe fe40 	bl	80020e8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0b5      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347a:	4b3e      	ldr	r3, [pc, #248]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1ee      	bne.n	8003464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348c:	4b39      	ldr	r3, [pc, #228]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	4a38      	ldr	r2, [pc, #224]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003496:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a1 	beq.w	80035e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034a2:	4b34      	ldr	r3, [pc, #208]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d05c      	beq.n	8003568 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d141      	bne.n	800353a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b31      	ldr	r3, [pc, #196]	@ (800357c <HAL_RCC_OscConfig+0x478>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fe14 	bl	80020e8 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fe fe10 	bl	80020e8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e087      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d6:	4b27      	ldr	r3, [pc, #156]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	019b      	lsls	r3, r3, #6
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	3b01      	subs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	491b      	ldr	r1, [pc, #108]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 8003508:	4313      	orrs	r3, r2
 800350a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800350c:	4b1b      	ldr	r3, [pc, #108]	@ (800357c <HAL_RCC_OscConfig+0x478>)
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe fde9 	bl	80020e8 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351a:	f7fe fde5 	bl	80020e8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e05c      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352c:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x416>
 8003538:	e054      	b.n	80035e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	4b10      	ldr	r3, [pc, #64]	@ (800357c <HAL_RCC_OscConfig+0x478>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe fdd2 	bl	80020e8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003548:	f7fe fdce 	bl	80020e8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e045      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCC_OscConfig+0x470>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x444>
 8003566:	e03d      	b.n	80035e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e038      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
 8003574:	40023800 	.word	0x40023800
 8003578:	40007000 	.word	0x40007000
 800357c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003580:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_RCC_OscConfig+0x4ec>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d028      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d121      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d11a      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035b0:	4013      	ands	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d111      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	3b01      	subs	r3, #1
 80035ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0cc      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b68      	ldr	r3, [pc, #416]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d90c      	bls.n	8003630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b65      	ldr	r3, [pc, #404]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b63      	ldr	r3, [pc, #396]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0b8      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003648:	4b59      	ldr	r3, [pc, #356]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a58      	ldr	r2, [pc, #352]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003652:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003660:	4b53      	ldr	r3, [pc, #332]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a52      	ldr	r2, [pc, #328]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800366a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366c:	4b50      	ldr	r3, [pc, #320]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	494d      	ldr	r1, [pc, #308]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d044      	beq.n	8003714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b47      	ldr	r3, [pc, #284]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d119      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e07f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b3f      	ldr	r3, [pc, #252]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c2:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e067      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b37      	ldr	r3, [pc, #220]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4934      	ldr	r1, [pc, #208]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fe fd00 	bl	80020e8 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fe fcfc 	bl	80020e8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e04f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d20c      	bcs.n	800373c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b22      	ldr	r3, [pc, #136]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b20      	ldr	r3, [pc, #128]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e032      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003748:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4916      	ldr	r1, [pc, #88]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003766:	4b12      	ldr	r3, [pc, #72]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	490e      	ldr	r1, [pc, #56]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800377a:	f000 f821 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800377e:	4602      	mov	r2, r0
 8003780:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	490a      	ldr	r1, [pc, #40]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	5ccb      	ldrb	r3, [r1, r3]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a09      	ldr	r2, [pc, #36]	@ (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fc60 	bl	8002060 <HAL_InitTick>

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023c00 	.word	0x40023c00
 80037b0:	40023800 	.word	0x40023800
 80037b4:	080073ac 	.word	0x080073ac
 80037b8:	20000054 	.word	0x20000054
 80037bc:	20000058 	.word	0x20000058

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c4:	b094      	sub	sp, #80	@ 0x50
 80037c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d8:	4b79      	ldr	r3, [pc, #484]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d00d      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x40>
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	f200 80e1 	bhi.w	80039ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x3a>
 80037f2:	e0db      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b73      	ldr	r3, [pc, #460]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037f8:	e0db      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037fa:	4b73      	ldr	r3, [pc, #460]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80037fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037fe:	e0d8      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003800:	4b6f      	ldr	r3, [pc, #444]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003808:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800380a:	4b6d      	ldr	r3, [pc, #436]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d063      	beq.n	80038de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003816:	4b6a      	ldr	r3, [pc, #424]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	2200      	movs	r2, #0
 800381e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003820:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003828:	633b      	str	r3, [r7, #48]	@ 0x30
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
 800382e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003832:	4622      	mov	r2, r4
 8003834:	462b      	mov	r3, r5
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	0159      	lsls	r1, r3, #5
 8003840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003844:	0150      	lsls	r0, r2, #5
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4621      	mov	r1, r4
 800384c:	1a51      	subs	r1, r2, r1
 800384e:	6139      	str	r1, [r7, #16]
 8003850:	4629      	mov	r1, r5
 8003852:	eb63 0301 	sbc.w	r3, r3, r1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003864:	4659      	mov	r1, fp
 8003866:	018b      	lsls	r3, r1, #6
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800386e:	4651      	mov	r1, sl
 8003870:	018a      	lsls	r2, r1, #6
 8003872:	4651      	mov	r1, sl
 8003874:	ebb2 0801 	subs.w	r8, r2, r1
 8003878:	4659      	mov	r1, fp
 800387a:	eb63 0901 	sbc.w	r9, r3, r1
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003892:	4690      	mov	r8, r2
 8003894:	4699      	mov	r9, r3
 8003896:	4623      	mov	r3, r4
 8003898:	eb18 0303 	adds.w	r3, r8, r3
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	462b      	mov	r3, r5
 80038a0:	eb49 0303 	adc.w	r3, r9, r3
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038b2:	4629      	mov	r1, r5
 80038b4:	024b      	lsls	r3, r1, #9
 80038b6:	4621      	mov	r1, r4
 80038b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038bc:	4621      	mov	r1, r4
 80038be:	024a      	lsls	r2, r1, #9
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038c6:	2200      	movs	r2, #0
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038d0:	f7fc fcee 	bl	80002b0 <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4613      	mov	r3, r2
 80038da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038dc:	e058      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038de:	4b38      	ldr	r3, [pc, #224]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	2200      	movs	r2, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	4611      	mov	r1, r2
 80038ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	f04f 0000 	mov.w	r0, #0
 8003900:	f04f 0100 	mov.w	r1, #0
 8003904:	0159      	lsls	r1, r3, #5
 8003906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800390a:	0150      	lsls	r0, r2, #5
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4641      	mov	r1, r8
 8003912:	ebb2 0a01 	subs.w	sl, r2, r1
 8003916:	4649      	mov	r1, r9
 8003918:	eb63 0b01 	sbc.w	fp, r3, r1
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003928:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800392c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003930:	ebb2 040a 	subs.w	r4, r2, sl
 8003934:	eb63 050b 	sbc.w	r5, r3, fp
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	00eb      	lsls	r3, r5, #3
 8003942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003946:	00e2      	lsls	r2, r4, #3
 8003948:	4614      	mov	r4, r2
 800394a:	461d      	mov	r5, r3
 800394c:	4643      	mov	r3, r8
 800394e:	18e3      	adds	r3, r4, r3
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	464b      	mov	r3, r9
 8003954:	eb45 0303 	adc.w	r3, r5, r3
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003966:	4629      	mov	r1, r5
 8003968:	028b      	lsls	r3, r1, #10
 800396a:	4621      	mov	r1, r4
 800396c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003970:	4621      	mov	r1, r4
 8003972:	028a      	lsls	r2, r1, #10
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397a:	2200      	movs	r2, #0
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	61fa      	str	r2, [r7, #28]
 8003980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003984:	f7fc fc94 	bl	80002b0 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4613      	mov	r3, r2
 800398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003990:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	0c1b      	lsrs	r3, r3, #16
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	3301      	adds	r3, #1
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039aa:	e002      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3750      	adds	r7, #80	@ 0x50
 80039b8:	46bd      	mov	sp, r7
 80039ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	007a1200 	.word	0x007a1200

080039cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b03      	ldr	r3, [pc, #12]	@ (80039e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000054 	.word	0x20000054

080039e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039e8:	f7ff fff0 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b05      	ldr	r3, [pc, #20]	@ (8003a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	0a9b      	lsrs	r3, r3, #10
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4903      	ldr	r1, [pc, #12]	@ (8003a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	080073bc 	.word	0x080073bc

08003a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a10:	f7ff ffdc 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0b5b      	lsrs	r3, r3, #13
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	@ (8003a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	080073bc 	.word	0x080073bc

08003a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e041      	b.n	8003aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe f8bc 	bl	8001bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 fa70 	bl	8003f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e044      	b.n	8003b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d018      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x6c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b16:	d013      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x6c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00e      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x6c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a19      	ldr	r2, [pc, #100]	@ (8003b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d009      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x6c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a17      	ldr	r2, [pc, #92]	@ (8003b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x6c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a16      	ldr	r2, [pc, #88]	@ (8003b94 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d111      	bne.n	8003b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b06      	cmp	r3, #6
 8003b50:	d010      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b62:	e007      	b.n	8003b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40000800 	.word	0x40000800
 8003b90:	40000c00 	.word	0x40000c00
 8003b94:	40014000 	.word	0x40014000

08003b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0202 	mvn.w	r2, #2
 8003bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f999 	bl	8003f1a <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f98b 	bl	8003f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f99c 	bl	8003f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d020      	beq.n	8003c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01b      	beq.n	8003c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0204 	mvn.w	r2, #4
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f973 	bl	8003f1a <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f965 	bl	8003f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f976 	bl	8003f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d020      	beq.n	8003c94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01b      	beq.n	8003c94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0208 	mvn.w	r2, #8
 8003c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f94d 	bl	8003f1a <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f93f 	bl	8003f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f950 	bl	8003f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d020      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01b      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0210 	mvn.w	r2, #16
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f927 	bl	8003f1a <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f919 	bl	8003f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f92a 	bl	8003f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00c      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0201 	mvn.w	r2, #1
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd fe50 	bl	80019a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00c      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fab6 	bl	8004294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00c      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8fb 	bl	8003f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0220 	mvn.w	r2, #32
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa88 	bl	8004280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIM_ConfigClockSource+0x1c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e0b4      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x186>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dcc:	d03e      	beq.n	8003e4c <HAL_TIM_ConfigClockSource+0xd4>
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd2:	f200 8087 	bhi.w	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dda:	f000 8086 	beq.w	8003eea <HAL_TIM_ConfigClockSource+0x172>
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de2:	d87f      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b70      	cmp	r3, #112	@ 0x70
 8003de6:	d01a      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0xa6>
 8003de8:	2b70      	cmp	r3, #112	@ 0x70
 8003dea:	d87b      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b60      	cmp	r3, #96	@ 0x60
 8003dee:	d050      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x11a>
 8003df0:	2b60      	cmp	r3, #96	@ 0x60
 8003df2:	d877      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b50      	cmp	r3, #80	@ 0x50
 8003df6:	d03c      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0xfa>
 8003df8:	2b50      	cmp	r3, #80	@ 0x50
 8003dfa:	d873      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b40      	cmp	r3, #64	@ 0x40
 8003dfe:	d058      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8003e00:	2b40      	cmp	r3, #64	@ 0x40
 8003e02:	d86f      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b30      	cmp	r3, #48	@ 0x30
 8003e06:	d064      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e08:	2b30      	cmp	r3, #48	@ 0x30
 8003e0a:	d86b      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d060      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d867      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d05c      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d05a      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e1c:	e062      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e2e:	f000 f999 	bl	8004164 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	609a      	str	r2, [r3, #8]
      break;
 8003e4a:	e04f      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e5c:	f000 f982 	bl	8004164 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e6e:	609a      	str	r2, [r3, #8]
      break;
 8003e70:	e03c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f000 f8f6 	bl	8004070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2150      	movs	r1, #80	@ 0x50
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f94f 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003e90:	e02c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f000 f915 	bl	80040ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2160      	movs	r1, #96	@ 0x60
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f93f 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003eb0:	e01c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f000 f8d6 	bl	8004070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2140      	movs	r1, #64	@ 0x40
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f92f 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003ed0:	e00c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f000 f926 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003ee2:	e003      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a3a      	ldr	r2, [pc, #232]	@ (8004054 <TIM_Base_SetConfig+0xfc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00f      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a37      	ldr	r2, [pc, #220]	@ (8004058 <TIM_Base_SetConfig+0x100>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a36      	ldr	r2, [pc, #216]	@ (800405c <TIM_Base_SetConfig+0x104>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a35      	ldr	r2, [pc, #212]	@ (8004060 <TIM_Base_SetConfig+0x108>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <TIM_Base_SetConfig+0xfc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb0:	d017      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a28      	ldr	r2, [pc, #160]	@ (8004058 <TIM_Base_SetConfig+0x100>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a27      	ldr	r2, [pc, #156]	@ (800405c <TIM_Base_SetConfig+0x104>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	@ (8004060 <TIM_Base_SetConfig+0x108>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <TIM_Base_SetConfig+0x10c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a24      	ldr	r2, [pc, #144]	@ (8004068 <TIM_Base_SetConfig+0x110>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a23      	ldr	r2, [pc, #140]	@ (800406c <TIM_Base_SetConfig+0x114>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d108      	bne.n	8003ff4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a0e      	ldr	r2, [pc, #56]	@ (8004054 <TIM_Base_SetConfig+0xfc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d103      	bne.n	8004028 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	611a      	str	r2, [r3, #16]
  }
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40014000 	.word	0x40014000
 8004068:	40014400 	.word	0x40014400
 800406c:	40014800 	.word	0x40014800

08004070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f023 0201 	bic.w	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800409a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f023 030a 	bic.w	r3, r3, #10
 80040ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b087      	sub	sp, #28
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f023 0210 	bic.w	r2, r3, #16
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	031b      	lsls	r3, r3, #12
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800410a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	f043 0307 	orr.w	r3, r3, #7
 8004150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800417e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	021a      	lsls	r2, r3, #8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	431a      	orrs	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e050      	b.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1c      	ldr	r2, [pc, #112]	@ (800426c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d018      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004208:	d013      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a18      	ldr	r2, [pc, #96]	@ (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a16      	ldr	r2, [pc, #88]	@ (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a15      	ldr	r2, [pc, #84]	@ (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a13      	ldr	r2, [pc, #76]	@ (800427c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10c      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	4313      	orrs	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800
 8004278:	40000c00 	.word	0x40000c00
 800427c:	40014000 	.word	0x40014000

08004280 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e042      	b.n	8004340 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fd fcaa 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2224      	movs	r2, #36	@ 0x24
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fdbd 	bl	8004e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	@ 0x28
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b20      	cmp	r3, #32
 8004366:	d175      	bne.n	8004454 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Transmit+0x2c>
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e06e      	b.n	8004456 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2221      	movs	r2, #33	@ 0x21
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004386:	f7fd feaf 	bl	80020e8 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	88fa      	ldrh	r2, [r7, #6]
 8004396:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a0:	d108      	bne.n	80043b4 <HAL_UART_Transmit+0x6c>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e003      	b.n	80043bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043bc:	e02e      	b.n	800441c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2180      	movs	r1, #128	@ 0x80
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fb1f 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e03a      	b.n	8004456 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3302      	adds	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e007      	b.n	800440e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3301      	adds	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1cb      	bne.n	80043be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	2140      	movs	r1, #64	@ 0x40
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 faeb 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e006      	b.n	8004456 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	4613      	mov	r3, r2
 800446a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b20      	cmp	r3, #32
 8004476:	d112      	bne.n	800449e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_UART_Receive_IT+0x26>
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e00b      	b.n	80044a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	461a      	mov	r2, r3
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fb12 	bl	8004abe <UART_Start_Receive_IT>
 800449a:	4603      	mov	r3, r0
 800449c:	e000      	b.n	80044a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b0ba      	sub	sp, #232	@ 0xe8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80044e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10f      	bne.n	800450e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_UART_IRQHandler+0x66>
 80044fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fbf2 	bl	8004cf0 <UART_Receive_IT>
      return;
 800450c:	e25b      	b.n	80049c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800450e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80de 	beq.w	80046d4 <HAL_UART_IRQHandler+0x22c>
 8004518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004528:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80d1 	beq.w	80046d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_UART_IRQHandler+0xae>
 800453e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <HAL_UART_IRQHandler+0xd2>
 8004562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	f043 0202 	orr.w	r2, r3, #2
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_UART_IRQHandler+0xf6>
 8004586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f043 0204 	orr.w	r2, r3, #4
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d011      	beq.n	80045ce <HAL_UART_IRQHandler+0x126>
 80045aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d105      	bne.n	80045c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	f043 0208 	orr.w	r2, r3, #8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 81f2 	beq.w	80049bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_UART_IRQHandler+0x14e>
 80045e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fb7d 	bl	8004cf0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b40      	cmp	r3, #64	@ 0x40
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <HAL_UART_IRQHandler+0x17a>
 800461a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d04f      	beq.n	80046c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa85 	bl	8004b32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004632:	2b40      	cmp	r3, #64	@ 0x40
 8004634:	d141      	bne.n	80046ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3314      	adds	r3, #20
 800463c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800464c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3314      	adds	r3, #20
 800465e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004662:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800466e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800467a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1d9      	bne.n	8004636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d013      	beq.n	80046b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468e:	4a7e      	ldr	r2, [pc, #504]	@ (8004888 <HAL_UART_IRQHandler+0x3e0>)
 8004690:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004696:	4618      	mov	r0, r3
 8004698:	f7fd fed7 	bl	800244a <HAL_DMA_Abort_IT>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046ac:	4610      	mov	r0, r2
 80046ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	e00e      	b.n	80046d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f994 	bl	80049e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	e00a      	b.n	80046d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f990 	bl	80049e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c0:	e006      	b.n	80046d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f98c 	bl	80049e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046ce:	e175      	b.n	80049bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d0:	bf00      	nop
    return;
 80046d2:	e173      	b.n	80049bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d8:	2b01      	cmp	r3, #1
 80046da:	f040 814f 	bne.w	800497c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8148 	beq.w	800497c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8141 	beq.w	800497c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471a:	2b40      	cmp	r3, #64	@ 0x40
 800471c:	f040 80b6 	bne.w	800488c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800472c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8145 	beq.w	80049c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800473a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800473e:	429a      	cmp	r2, r3
 8004740:	f080 813e 	bcs.w	80049c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800474a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004756:	f000 8088 	beq.w	800486a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004770:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004786:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800478a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004792:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800479e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1d9      	bne.n	800475a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3314      	adds	r3, #20
 80047c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e1      	bne.n	80047a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3314      	adds	r3, #20
 8004802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004806:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004808:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800480c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e3      	bne.n	80047e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483a:	f023 0310 	bic.w	r3, r3, #16
 800483e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800484c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800484e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004852:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800485a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e3      	bne.n	8004828 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004864:	4618      	mov	r0, r3
 8004866:	f7fd fd80 	bl	800236a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004878:	b29b      	uxth	r3, r3
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	b29b      	uxth	r3, r3
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f8b7 	bl	80049f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004886:	e09b      	b.n	80049c0 <HAL_UART_IRQHandler+0x518>
 8004888:	08004bf9 	.word	0x08004bf9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004894:	b29b      	uxth	r3, r3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 808e 	beq.w	80049c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8089 	beq.w	80049c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80048d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80048d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e3      	bne.n	80048b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3314      	adds	r3, #20
 80048f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	623b      	str	r3, [r7, #32]
   return(result);
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3314      	adds	r3, #20
 800490a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800490e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e3      	bne.n	80048ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0310 	bic.w	r3, r3, #16
 8004946:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004954:	61fa      	str	r2, [r7, #28]
 8004956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	69b9      	ldr	r1, [r7, #24]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	617b      	str	r3, [r7, #20]
   return(result);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e3      	bne.n	8004930 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800496e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f83d 	bl	80049f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800497a:	e023      	b.n	80049c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800497c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <HAL_UART_IRQHandler+0x4f4>
 8004988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800498c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f943 	bl	8004c20 <UART_Transmit_IT>
    return;
 800499a:	e014      	b.n	80049c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800499c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00e      	beq.n	80049c6 <HAL_UART_IRQHandler+0x51e>
 80049a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f983 	bl	8004cc0 <UART_EndTransmit_IT>
    return;
 80049ba:	e004      	b.n	80049c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80049bc:	bf00      	nop
 80049be:	e002      	b.n	80049c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80049c4:	bf00      	nop
  }
}
 80049c6:	37e8      	adds	r7, #232	@ 0xe8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	e03b      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d037      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fd fb5f 	bl	80020e8 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e03a      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d023      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b80      	cmp	r3, #128	@ 0x80
 8004a52:	d020      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b40      	cmp	r3, #64	@ 0x40
 8004a58:	d01d      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d116      	bne.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f857 	bl	8004b32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2208      	movs	r2, #8
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e00f      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d0b4      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2222      	movs	r2, #34	@ 0x22
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b02:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0220 	orr.w	r2, r2, #32
 8004b22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b095      	sub	sp, #84	@ 0x54
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	330c      	adds	r3, #12
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e5      	bne.n	8004b3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3314      	adds	r3, #20
 8004b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d119      	bne.n	8004bde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f023 0310 	bic.w	r3, r3, #16
 8004bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bca:	61ba      	str	r2, [r7, #24]
 8004bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6979      	ldr	r1, [r7, #20]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e5      	bne.n	8004baa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bec:	bf00      	nop
 8004bee:	3754      	adds	r7, #84	@ 0x54
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7ff fee4 	bl	80049e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b21      	cmp	r3, #33	@ 0x21
 8004c32:	d13e      	bne.n	8004cb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3c:	d114      	bne.n	8004c68 <UART_Transmit_IT+0x48>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d110      	bne.n	8004c68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	621a      	str	r2, [r3, #32]
 8004c66:	e008      	b.n	8004c7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	1c59      	adds	r1, r3, #1
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6211      	str	r1, [r2, #32]
 8004c72:	781a      	ldrb	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4619      	mov	r1, r3
 8004c88:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10f      	bne.n	8004cae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
  }
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fe73 	bl	80049cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08c      	sub	sp, #48	@ 0x30
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b22      	cmp	r3, #34	@ 0x22
 8004d02:	f040 80ae 	bne.w	8004e62 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0e:	d117      	bne.n	8004d40 <UART_Receive_IT+0x50>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d113      	bne.n	8004d40 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	1c9a      	adds	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d3e:	e026      	b.n	8004d8e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d52:	d007      	beq.n	8004d64 <UART_Receive_IT+0x74>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <UART_Receive_IT+0x82>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e008      	b.n	8004d84 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d82:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d15d      	bne.n	8004e5e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0220 	bic.w	r2, r2, #32
 8004db0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d135      	bne.n	8004e54 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f023 0310 	bic.w	r3, r3, #16
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0e:	623a      	str	r2, [r7, #32]
 8004e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	69f9      	ldr	r1, [r7, #28]
 8004e14:	6a3a      	ldr	r2, [r7, #32]
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d10a      	bne.n	8004e46 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fdd1 	bl	80049f4 <HAL_UARTEx_RxEventCallback>
 8004e52:	e002      	b.n	8004e5a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fc fdcd 	bl	80019f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e002      	b.n	8004e64 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e000      	b.n	8004e64 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e62:	2302      	movs	r3, #2
  }
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3730      	adds	r7, #48	@ 0x30
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e70:	b0c0      	sub	sp, #256	@ 0x100
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e88:	68d9      	ldr	r1, [r3, #12]
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	ea40 0301 	orr.w	r3, r0, r1
 8004e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ec4:	f021 010c 	bic.w	r1, r1, #12
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee6:	6999      	ldr	r1, [r3, #24]
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	ea40 0301 	orr.w	r3, r0, r1
 8004ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b8f      	ldr	r3, [pc, #572]	@ (8005138 <UART_SetConfig+0x2cc>)
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d005      	beq.n	8004f0c <UART_SetConfig+0xa0>
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b8d      	ldr	r3, [pc, #564]	@ (800513c <UART_SetConfig+0x2d0>)
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d104      	bne.n	8004f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f0c:	f7fe fd7e 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 8004f10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f14:	e003      	b.n	8004f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f16:	f7fe fd65 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8004f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f28:	f040 810c 	bne.w	8005144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f3e:	4622      	mov	r2, r4
 8004f40:	462b      	mov	r3, r5
 8004f42:	1891      	adds	r1, r2, r2
 8004f44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f46:	415b      	adcs	r3, r3
 8004f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f4e:	4621      	mov	r1, r4
 8004f50:	eb12 0801 	adds.w	r8, r2, r1
 8004f54:	4629      	mov	r1, r5
 8004f56:	eb43 0901 	adc.w	r9, r3, r1
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f6e:	4690      	mov	r8, r2
 8004f70:	4699      	mov	r9, r3
 8004f72:	4623      	mov	r3, r4
 8004f74:	eb18 0303 	adds.w	r3, r8, r3
 8004f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f7c:	462b      	mov	r3, r5
 8004f7e:	eb49 0303 	adc.w	r3, r9, r3
 8004f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	18db      	adds	r3, r3, r3
 8004f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	eb42 0303 	adc.w	r3, r2, r3
 8004fa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fb0:	f7fb f97e 	bl	80002b0 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4b61      	ldr	r3, [pc, #388]	@ (8005140 <UART_SetConfig+0x2d4>)
 8004fba:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	011c      	lsls	r4, r3, #4
 8004fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	1891      	adds	r1, r2, r2
 8004fda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fdc:	415b      	adcs	r3, r3
 8004fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8004fea:	4649      	mov	r1, r9
 8004fec:	eb43 0b01 	adc.w	fp, r3, r1
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005004:	4692      	mov	sl, r2
 8005006:	469b      	mov	fp, r3
 8005008:	4643      	mov	r3, r8
 800500a:	eb1a 0303 	adds.w	r3, sl, r3
 800500e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005012:	464b      	mov	r3, r9
 8005014:	eb4b 0303 	adc.w	r3, fp, r3
 8005018:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005028:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800502c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005030:	460b      	mov	r3, r1
 8005032:	18db      	adds	r3, r3, r3
 8005034:	643b      	str	r3, [r7, #64]	@ 0x40
 8005036:	4613      	mov	r3, r2
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	647b      	str	r3, [r7, #68]	@ 0x44
 800503e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005046:	f7fb f933 	bl	80002b0 <__aeabi_uldivmod>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4611      	mov	r1, r2
 8005050:	4b3b      	ldr	r3, [pc, #236]	@ (8005140 <UART_SetConfig+0x2d4>)
 8005052:	fba3 2301 	umull	r2, r3, r3, r1
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	2264      	movs	r2, #100	@ 0x64
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	1acb      	subs	r3, r1, r3
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005066:	4b36      	ldr	r3, [pc, #216]	@ (8005140 <UART_SetConfig+0x2d4>)
 8005068:	fba3 2302 	umull	r2, r3, r3, r2
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005074:	441c      	add	r4, r3
 8005076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800507a:	2200      	movs	r2, #0
 800507c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005080:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005088:	4642      	mov	r2, r8
 800508a:	464b      	mov	r3, r9
 800508c:	1891      	adds	r1, r2, r2
 800508e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005090:	415b      	adcs	r3, r3
 8005092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005098:	4641      	mov	r1, r8
 800509a:	1851      	adds	r1, r2, r1
 800509c:	6339      	str	r1, [r7, #48]	@ 0x30
 800509e:	4649      	mov	r1, r9
 80050a0:	414b      	adcs	r3, r1
 80050a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050b0:	4659      	mov	r1, fp
 80050b2:	00cb      	lsls	r3, r1, #3
 80050b4:	4651      	mov	r1, sl
 80050b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ba:	4651      	mov	r1, sl
 80050bc:	00ca      	lsls	r2, r1, #3
 80050be:	4610      	mov	r0, r2
 80050c0:	4619      	mov	r1, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	4642      	mov	r2, r8
 80050c6:	189b      	adds	r3, r3, r2
 80050c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050cc:	464b      	mov	r3, r9
 80050ce:	460a      	mov	r2, r1
 80050d0:	eb42 0303 	adc.w	r3, r2, r3
 80050d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050ec:	460b      	mov	r3, r1
 80050ee:	18db      	adds	r3, r3, r3
 80050f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050f2:	4613      	mov	r3, r2
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005102:	f7fb f8d5 	bl	80002b0 <__aeabi_uldivmod>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <UART_SetConfig+0x2d4>)
 800510c:	fba3 1302 	umull	r1, r3, r3, r2
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	2164      	movs	r1, #100	@ 0x64
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	3332      	adds	r3, #50	@ 0x32
 800511e:	4a08      	ldr	r2, [pc, #32]	@ (8005140 <UART_SetConfig+0x2d4>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	f003 0207 	and.w	r2, r3, #7
 800512a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4422      	add	r2, r4
 8005132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005134:	e106      	b.n	8005344 <UART_SetConfig+0x4d8>
 8005136:	bf00      	nop
 8005138:	40011000 	.word	0x40011000
 800513c:	40011400 	.word	0x40011400
 8005140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800514e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005156:	4642      	mov	r2, r8
 8005158:	464b      	mov	r3, r9
 800515a:	1891      	adds	r1, r2, r2
 800515c:	6239      	str	r1, [r7, #32]
 800515e:	415b      	adcs	r3, r3
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
 8005162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005166:	4641      	mov	r1, r8
 8005168:	1854      	adds	r4, r2, r1
 800516a:	4649      	mov	r1, r9
 800516c:	eb43 0501 	adc.w	r5, r3, r1
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	00eb      	lsls	r3, r5, #3
 800517a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800517e:	00e2      	lsls	r2, r4, #3
 8005180:	4614      	mov	r4, r2
 8005182:	461d      	mov	r5, r3
 8005184:	4643      	mov	r3, r8
 8005186:	18e3      	adds	r3, r4, r3
 8005188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800518c:	464b      	mov	r3, r9
 800518e:	eb45 0303 	adc.w	r3, r5, r3
 8005192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051b2:	4629      	mov	r1, r5
 80051b4:	008b      	lsls	r3, r1, #2
 80051b6:	4621      	mov	r1, r4
 80051b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051bc:	4621      	mov	r1, r4
 80051be:	008a      	lsls	r2, r1, #2
 80051c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051c4:	f7fb f874 	bl	80002b0 <__aeabi_uldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4b60      	ldr	r3, [pc, #384]	@ (8005350 <UART_SetConfig+0x4e4>)
 80051ce:	fba3 2302 	umull	r2, r3, r3, r2
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	011c      	lsls	r4, r3, #4
 80051d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051e8:	4642      	mov	r2, r8
 80051ea:	464b      	mov	r3, r9
 80051ec:	1891      	adds	r1, r2, r2
 80051ee:	61b9      	str	r1, [r7, #24]
 80051f0:	415b      	adcs	r3, r3
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f8:	4641      	mov	r1, r8
 80051fa:	1851      	adds	r1, r2, r1
 80051fc:	6139      	str	r1, [r7, #16]
 80051fe:	4649      	mov	r1, r9
 8005200:	414b      	adcs	r3, r1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005210:	4659      	mov	r1, fp
 8005212:	00cb      	lsls	r3, r1, #3
 8005214:	4651      	mov	r1, sl
 8005216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800521a:	4651      	mov	r1, sl
 800521c:	00ca      	lsls	r2, r1, #3
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	4603      	mov	r3, r0
 8005224:	4642      	mov	r2, r8
 8005226:	189b      	adds	r3, r3, r2
 8005228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800522c:	464b      	mov	r3, r9
 800522e:	460a      	mov	r2, r1
 8005230:	eb42 0303 	adc.w	r3, r2, r3
 8005234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005242:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005250:	4649      	mov	r1, r9
 8005252:	008b      	lsls	r3, r1, #2
 8005254:	4641      	mov	r1, r8
 8005256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800525a:	4641      	mov	r1, r8
 800525c:	008a      	lsls	r2, r1, #2
 800525e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005262:	f7fb f825 	bl	80002b0 <__aeabi_uldivmod>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4611      	mov	r1, r2
 800526c:	4b38      	ldr	r3, [pc, #224]	@ (8005350 <UART_SetConfig+0x4e4>)
 800526e:	fba3 2301 	umull	r2, r3, r3, r1
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2264      	movs	r2, #100	@ 0x64
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	1acb      	subs	r3, r1, r3
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	3332      	adds	r3, #50	@ 0x32
 8005280:	4a33      	ldr	r2, [pc, #204]	@ (8005350 <UART_SetConfig+0x4e4>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800528c:	441c      	add	r4, r3
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005292:	2200      	movs	r2, #0
 8005294:	673b      	str	r3, [r7, #112]	@ 0x70
 8005296:	677a      	str	r2, [r7, #116]	@ 0x74
 8005298:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800529c:	4642      	mov	r2, r8
 800529e:	464b      	mov	r3, r9
 80052a0:	1891      	adds	r1, r2, r2
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	415b      	adcs	r3, r3
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ac:	4641      	mov	r1, r8
 80052ae:	1851      	adds	r1, r2, r1
 80052b0:	6039      	str	r1, [r7, #0]
 80052b2:	4649      	mov	r1, r9
 80052b4:	414b      	adcs	r3, r1
 80052b6:	607b      	str	r3, [r7, #4]
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052c4:	4659      	mov	r1, fp
 80052c6:	00cb      	lsls	r3, r1, #3
 80052c8:	4651      	mov	r1, sl
 80052ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ce:	4651      	mov	r1, sl
 80052d0:	00ca      	lsls	r2, r1, #3
 80052d2:	4610      	mov	r0, r2
 80052d4:	4619      	mov	r1, r3
 80052d6:	4603      	mov	r3, r0
 80052d8:	4642      	mov	r2, r8
 80052da:	189b      	adds	r3, r3, r2
 80052dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052de:	464b      	mov	r3, r9
 80052e0:	460a      	mov	r2, r1
 80052e2:	eb42 0303 	adc.w	r3, r2, r3
 80052e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005300:	4649      	mov	r1, r9
 8005302:	008b      	lsls	r3, r1, #2
 8005304:	4641      	mov	r1, r8
 8005306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800530a:	4641      	mov	r1, r8
 800530c:	008a      	lsls	r2, r1, #2
 800530e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005312:	f7fa ffcd 	bl	80002b0 <__aeabi_uldivmod>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <UART_SetConfig+0x4e4>)
 800531c:	fba3 1302 	umull	r1, r3, r3, r2
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	2164      	movs	r1, #100	@ 0x64
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	3332      	adds	r3, #50	@ 0x32
 800532e:	4a08      	ldr	r2, [pc, #32]	@ (8005350 <UART_SetConfig+0x4e4>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	f003 020f 	and.w	r2, r3, #15
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4422      	add	r2, r4
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800534a:	46bd      	mov	sp, r7
 800534c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005350:	51eb851f 	.word	0x51eb851f

08005354 <atoi>:
 8005354:	220a      	movs	r2, #10
 8005356:	2100      	movs	r1, #0
 8005358:	f000 b87c 	b.w	8005454 <strtol>

0800535c <_strtol_l.constprop.0>:
 800535c:	2b24      	cmp	r3, #36	@ 0x24
 800535e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005362:	4686      	mov	lr, r0
 8005364:	4690      	mov	r8, r2
 8005366:	d801      	bhi.n	800536c <_strtol_l.constprop.0+0x10>
 8005368:	2b01      	cmp	r3, #1
 800536a:	d106      	bne.n	800537a <_strtol_l.constprop.0+0x1e>
 800536c:	f000 fbb0 	bl	8005ad0 <__errno>
 8005370:	2316      	movs	r3, #22
 8005372:	6003      	str	r3, [r0, #0]
 8005374:	2000      	movs	r0, #0
 8005376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537a:	4834      	ldr	r0, [pc, #208]	@ (800544c <_strtol_l.constprop.0+0xf0>)
 800537c:	460d      	mov	r5, r1
 800537e:	462a      	mov	r2, r5
 8005380:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005384:	5d06      	ldrb	r6, [r0, r4]
 8005386:	f016 0608 	ands.w	r6, r6, #8
 800538a:	d1f8      	bne.n	800537e <_strtol_l.constprop.0+0x22>
 800538c:	2c2d      	cmp	r4, #45	@ 0x2d
 800538e:	d12d      	bne.n	80053ec <_strtol_l.constprop.0+0x90>
 8005390:	782c      	ldrb	r4, [r5, #0]
 8005392:	2601      	movs	r6, #1
 8005394:	1c95      	adds	r5, r2, #2
 8005396:	f033 0210 	bics.w	r2, r3, #16
 800539a:	d109      	bne.n	80053b0 <_strtol_l.constprop.0+0x54>
 800539c:	2c30      	cmp	r4, #48	@ 0x30
 800539e:	d12a      	bne.n	80053f6 <_strtol_l.constprop.0+0x9a>
 80053a0:	782a      	ldrb	r2, [r5, #0]
 80053a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80053a6:	2a58      	cmp	r2, #88	@ 0x58
 80053a8:	d125      	bne.n	80053f6 <_strtol_l.constprop.0+0x9a>
 80053aa:	786c      	ldrb	r4, [r5, #1]
 80053ac:	2310      	movs	r3, #16
 80053ae:	3502      	adds	r5, #2
 80053b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80053b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80053b8:	2200      	movs	r2, #0
 80053ba:	fbbc f9f3 	udiv	r9, ip, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80053c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80053c8:	2f09      	cmp	r7, #9
 80053ca:	d81b      	bhi.n	8005404 <_strtol_l.constprop.0+0xa8>
 80053cc:	463c      	mov	r4, r7
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	dd27      	ble.n	8005422 <_strtol_l.constprop.0+0xc6>
 80053d2:	1c57      	adds	r7, r2, #1
 80053d4:	d007      	beq.n	80053e6 <_strtol_l.constprop.0+0x8a>
 80053d6:	4581      	cmp	r9, r0
 80053d8:	d320      	bcc.n	800541c <_strtol_l.constprop.0+0xc0>
 80053da:	d101      	bne.n	80053e0 <_strtol_l.constprop.0+0x84>
 80053dc:	45a2      	cmp	sl, r4
 80053de:	db1d      	blt.n	800541c <_strtol_l.constprop.0+0xc0>
 80053e0:	fb00 4003 	mla	r0, r0, r3, r4
 80053e4:	2201      	movs	r2, #1
 80053e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053ea:	e7eb      	b.n	80053c4 <_strtol_l.constprop.0+0x68>
 80053ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80053ee:	bf04      	itt	eq
 80053f0:	782c      	ldrbeq	r4, [r5, #0]
 80053f2:	1c95      	addeq	r5, r2, #2
 80053f4:	e7cf      	b.n	8005396 <_strtol_l.constprop.0+0x3a>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1da      	bne.n	80053b0 <_strtol_l.constprop.0+0x54>
 80053fa:	2c30      	cmp	r4, #48	@ 0x30
 80053fc:	bf0c      	ite	eq
 80053fe:	2308      	moveq	r3, #8
 8005400:	230a      	movne	r3, #10
 8005402:	e7d5      	b.n	80053b0 <_strtol_l.constprop.0+0x54>
 8005404:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005408:	2f19      	cmp	r7, #25
 800540a:	d801      	bhi.n	8005410 <_strtol_l.constprop.0+0xb4>
 800540c:	3c37      	subs	r4, #55	@ 0x37
 800540e:	e7de      	b.n	80053ce <_strtol_l.constprop.0+0x72>
 8005410:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005414:	2f19      	cmp	r7, #25
 8005416:	d804      	bhi.n	8005422 <_strtol_l.constprop.0+0xc6>
 8005418:	3c57      	subs	r4, #87	@ 0x57
 800541a:	e7d8      	b.n	80053ce <_strtol_l.constprop.0+0x72>
 800541c:	f04f 32ff 	mov.w	r2, #4294967295
 8005420:	e7e1      	b.n	80053e6 <_strtol_l.constprop.0+0x8a>
 8005422:	1c53      	adds	r3, r2, #1
 8005424:	d108      	bne.n	8005438 <_strtol_l.constprop.0+0xdc>
 8005426:	2322      	movs	r3, #34	@ 0x22
 8005428:	f8ce 3000 	str.w	r3, [lr]
 800542c:	4660      	mov	r0, ip
 800542e:	f1b8 0f00 	cmp.w	r8, #0
 8005432:	d0a0      	beq.n	8005376 <_strtol_l.constprop.0+0x1a>
 8005434:	1e69      	subs	r1, r5, #1
 8005436:	e006      	b.n	8005446 <_strtol_l.constprop.0+0xea>
 8005438:	b106      	cbz	r6, 800543c <_strtol_l.constprop.0+0xe0>
 800543a:	4240      	negs	r0, r0
 800543c:	f1b8 0f00 	cmp.w	r8, #0
 8005440:	d099      	beq.n	8005376 <_strtol_l.constprop.0+0x1a>
 8005442:	2a00      	cmp	r2, #0
 8005444:	d1f6      	bne.n	8005434 <_strtol_l.constprop.0+0xd8>
 8005446:	f8c8 1000 	str.w	r1, [r8]
 800544a:	e794      	b.n	8005376 <_strtol_l.constprop.0+0x1a>
 800544c:	080073c5 	.word	0x080073c5

08005450 <_strtol_r>:
 8005450:	f7ff bf84 	b.w	800535c <_strtol_l.constprop.0>

08005454 <strtol>:
 8005454:	4613      	mov	r3, r2
 8005456:	460a      	mov	r2, r1
 8005458:	4601      	mov	r1, r0
 800545a:	4802      	ldr	r0, [pc, #8]	@ (8005464 <strtol+0x10>)
 800545c:	6800      	ldr	r0, [r0, #0]
 800545e:	f7ff bf7d 	b.w	800535c <_strtol_l.constprop.0>
 8005462:	bf00      	nop
 8005464:	2000006c 	.word	0x2000006c

08005468 <std>:
 8005468:	2300      	movs	r3, #0
 800546a:	b510      	push	{r4, lr}
 800546c:	4604      	mov	r4, r0
 800546e:	e9c0 3300 	strd	r3, r3, [r0]
 8005472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005476:	6083      	str	r3, [r0, #8]
 8005478:	8181      	strh	r1, [r0, #12]
 800547a:	6643      	str	r3, [r0, #100]	@ 0x64
 800547c:	81c2      	strh	r2, [r0, #14]
 800547e:	6183      	str	r3, [r0, #24]
 8005480:	4619      	mov	r1, r3
 8005482:	2208      	movs	r2, #8
 8005484:	305c      	adds	r0, #92	@ 0x5c
 8005486:	f000 fa79 	bl	800597c <memset>
 800548a:	4b0d      	ldr	r3, [pc, #52]	@ (80054c0 <std+0x58>)
 800548c:	6263      	str	r3, [r4, #36]	@ 0x24
 800548e:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <std+0x5c>)
 8005490:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005492:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <std+0x60>)
 8005494:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005496:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <std+0x64>)
 8005498:	6323      	str	r3, [r4, #48]	@ 0x30
 800549a:	4b0d      	ldr	r3, [pc, #52]	@ (80054d0 <std+0x68>)
 800549c:	6224      	str	r4, [r4, #32]
 800549e:	429c      	cmp	r4, r3
 80054a0:	d006      	beq.n	80054b0 <std+0x48>
 80054a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054a6:	4294      	cmp	r4, r2
 80054a8:	d002      	beq.n	80054b0 <std+0x48>
 80054aa:	33d0      	adds	r3, #208	@ 0xd0
 80054ac:	429c      	cmp	r4, r3
 80054ae:	d105      	bne.n	80054bc <std+0x54>
 80054b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054b8:	f000 bb34 	b.w	8005b24 <__retarget_lock_init_recursive>
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	bf00      	nop
 80054c0:	080057c9 	.word	0x080057c9
 80054c4:	080057ef 	.word	0x080057ef
 80054c8:	08005827 	.word	0x08005827
 80054cc:	0800584b 	.word	0x0800584b
 80054d0:	200002a4 	.word	0x200002a4

080054d4 <stdio_exit_handler>:
 80054d4:	4a02      	ldr	r2, [pc, #8]	@ (80054e0 <stdio_exit_handler+0xc>)
 80054d6:	4903      	ldr	r1, [pc, #12]	@ (80054e4 <stdio_exit_handler+0x10>)
 80054d8:	4803      	ldr	r0, [pc, #12]	@ (80054e8 <stdio_exit_handler+0x14>)
 80054da:	f000 b869 	b.w	80055b0 <_fwalk_sglue>
 80054de:	bf00      	nop
 80054e0:	20000060 	.word	0x20000060
 80054e4:	08006d05 	.word	0x08006d05
 80054e8:	20000070 	.word	0x20000070

080054ec <cleanup_stdio>:
 80054ec:	6841      	ldr	r1, [r0, #4]
 80054ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <cleanup_stdio+0x34>)
 80054f0:	4299      	cmp	r1, r3
 80054f2:	b510      	push	{r4, lr}
 80054f4:	4604      	mov	r4, r0
 80054f6:	d001      	beq.n	80054fc <cleanup_stdio+0x10>
 80054f8:	f001 fc04 	bl	8006d04 <_fflush_r>
 80054fc:	68a1      	ldr	r1, [r4, #8]
 80054fe:	4b09      	ldr	r3, [pc, #36]	@ (8005524 <cleanup_stdio+0x38>)
 8005500:	4299      	cmp	r1, r3
 8005502:	d002      	beq.n	800550a <cleanup_stdio+0x1e>
 8005504:	4620      	mov	r0, r4
 8005506:	f001 fbfd 	bl	8006d04 <_fflush_r>
 800550a:	68e1      	ldr	r1, [r4, #12]
 800550c:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <cleanup_stdio+0x3c>)
 800550e:	4299      	cmp	r1, r3
 8005510:	d004      	beq.n	800551c <cleanup_stdio+0x30>
 8005512:	4620      	mov	r0, r4
 8005514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005518:	f001 bbf4 	b.w	8006d04 <_fflush_r>
 800551c:	bd10      	pop	{r4, pc}
 800551e:	bf00      	nop
 8005520:	200002a4 	.word	0x200002a4
 8005524:	2000030c 	.word	0x2000030c
 8005528:	20000374 	.word	0x20000374

0800552c <global_stdio_init.part.0>:
 800552c:	b510      	push	{r4, lr}
 800552e:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <global_stdio_init.part.0+0x30>)
 8005530:	4c0b      	ldr	r4, [pc, #44]	@ (8005560 <global_stdio_init.part.0+0x34>)
 8005532:	4a0c      	ldr	r2, [pc, #48]	@ (8005564 <global_stdio_init.part.0+0x38>)
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	4620      	mov	r0, r4
 8005538:	2200      	movs	r2, #0
 800553a:	2104      	movs	r1, #4
 800553c:	f7ff ff94 	bl	8005468 <std>
 8005540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005544:	2201      	movs	r2, #1
 8005546:	2109      	movs	r1, #9
 8005548:	f7ff ff8e 	bl	8005468 <std>
 800554c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005550:	2202      	movs	r2, #2
 8005552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005556:	2112      	movs	r1, #18
 8005558:	f7ff bf86 	b.w	8005468 <std>
 800555c:	200003dc 	.word	0x200003dc
 8005560:	200002a4 	.word	0x200002a4
 8005564:	080054d5 	.word	0x080054d5

08005568 <__sfp_lock_acquire>:
 8005568:	4801      	ldr	r0, [pc, #4]	@ (8005570 <__sfp_lock_acquire+0x8>)
 800556a:	f000 badc 	b.w	8005b26 <__retarget_lock_acquire_recursive>
 800556e:	bf00      	nop
 8005570:	200003e5 	.word	0x200003e5

08005574 <__sfp_lock_release>:
 8005574:	4801      	ldr	r0, [pc, #4]	@ (800557c <__sfp_lock_release+0x8>)
 8005576:	f000 bad7 	b.w	8005b28 <__retarget_lock_release_recursive>
 800557a:	bf00      	nop
 800557c:	200003e5 	.word	0x200003e5

08005580 <__sinit>:
 8005580:	b510      	push	{r4, lr}
 8005582:	4604      	mov	r4, r0
 8005584:	f7ff fff0 	bl	8005568 <__sfp_lock_acquire>
 8005588:	6a23      	ldr	r3, [r4, #32]
 800558a:	b11b      	cbz	r3, 8005594 <__sinit+0x14>
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005590:	f7ff bff0 	b.w	8005574 <__sfp_lock_release>
 8005594:	4b04      	ldr	r3, [pc, #16]	@ (80055a8 <__sinit+0x28>)
 8005596:	6223      	str	r3, [r4, #32]
 8005598:	4b04      	ldr	r3, [pc, #16]	@ (80055ac <__sinit+0x2c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f5      	bne.n	800558c <__sinit+0xc>
 80055a0:	f7ff ffc4 	bl	800552c <global_stdio_init.part.0>
 80055a4:	e7f2      	b.n	800558c <__sinit+0xc>
 80055a6:	bf00      	nop
 80055a8:	080054ed 	.word	0x080054ed
 80055ac:	200003dc 	.word	0x200003dc

080055b0 <_fwalk_sglue>:
 80055b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b4:	4607      	mov	r7, r0
 80055b6:	4688      	mov	r8, r1
 80055b8:	4614      	mov	r4, r2
 80055ba:	2600      	movs	r6, #0
 80055bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055c0:	f1b9 0901 	subs.w	r9, r9, #1
 80055c4:	d505      	bpl.n	80055d2 <_fwalk_sglue+0x22>
 80055c6:	6824      	ldr	r4, [r4, #0]
 80055c8:	2c00      	cmp	r4, #0
 80055ca:	d1f7      	bne.n	80055bc <_fwalk_sglue+0xc>
 80055cc:	4630      	mov	r0, r6
 80055ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055d2:	89ab      	ldrh	r3, [r5, #12]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d907      	bls.n	80055e8 <_fwalk_sglue+0x38>
 80055d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055dc:	3301      	adds	r3, #1
 80055de:	d003      	beq.n	80055e8 <_fwalk_sglue+0x38>
 80055e0:	4629      	mov	r1, r5
 80055e2:	4638      	mov	r0, r7
 80055e4:	47c0      	blx	r8
 80055e6:	4306      	orrs	r6, r0
 80055e8:	3568      	adds	r5, #104	@ 0x68
 80055ea:	e7e9      	b.n	80055c0 <_fwalk_sglue+0x10>

080055ec <iprintf>:
 80055ec:	b40f      	push	{r0, r1, r2, r3}
 80055ee:	b507      	push	{r0, r1, r2, lr}
 80055f0:	4906      	ldr	r1, [pc, #24]	@ (800560c <iprintf+0x20>)
 80055f2:	ab04      	add	r3, sp, #16
 80055f4:	6808      	ldr	r0, [r1, #0]
 80055f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055fa:	6881      	ldr	r1, [r0, #8]
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	f000 ff09 	bl	8006414 <_vfiprintf_r>
 8005602:	b003      	add	sp, #12
 8005604:	f85d eb04 	ldr.w	lr, [sp], #4
 8005608:	b004      	add	sp, #16
 800560a:	4770      	bx	lr
 800560c:	2000006c 	.word	0x2000006c

08005610 <_puts_r>:
 8005610:	6a03      	ldr	r3, [r0, #32]
 8005612:	b570      	push	{r4, r5, r6, lr}
 8005614:	6884      	ldr	r4, [r0, #8]
 8005616:	4605      	mov	r5, r0
 8005618:	460e      	mov	r6, r1
 800561a:	b90b      	cbnz	r3, 8005620 <_puts_r+0x10>
 800561c:	f7ff ffb0 	bl	8005580 <__sinit>
 8005620:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005622:	07db      	lsls	r3, r3, #31
 8005624:	d405      	bmi.n	8005632 <_puts_r+0x22>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	0598      	lsls	r0, r3, #22
 800562a:	d402      	bmi.n	8005632 <_puts_r+0x22>
 800562c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800562e:	f000 fa7a 	bl	8005b26 <__retarget_lock_acquire_recursive>
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	0719      	lsls	r1, r3, #28
 8005636:	d502      	bpl.n	800563e <_puts_r+0x2e>
 8005638:	6923      	ldr	r3, [r4, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d135      	bne.n	80056aa <_puts_r+0x9a>
 800563e:	4621      	mov	r1, r4
 8005640:	4628      	mov	r0, r5
 8005642:	f000 f945 	bl	80058d0 <__swsetup_r>
 8005646:	b380      	cbz	r0, 80056aa <_puts_r+0x9a>
 8005648:	f04f 35ff 	mov.w	r5, #4294967295
 800564c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800564e:	07da      	lsls	r2, r3, #31
 8005650:	d405      	bmi.n	800565e <_puts_r+0x4e>
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	059b      	lsls	r3, r3, #22
 8005656:	d402      	bmi.n	800565e <_puts_r+0x4e>
 8005658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800565a:	f000 fa65 	bl	8005b28 <__retarget_lock_release_recursive>
 800565e:	4628      	mov	r0, r5
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	2b00      	cmp	r3, #0
 8005664:	da04      	bge.n	8005670 <_puts_r+0x60>
 8005666:	69a2      	ldr	r2, [r4, #24]
 8005668:	429a      	cmp	r2, r3
 800566a:	dc17      	bgt.n	800569c <_puts_r+0x8c>
 800566c:	290a      	cmp	r1, #10
 800566e:	d015      	beq.n	800569c <_puts_r+0x8c>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	6022      	str	r2, [r4, #0]
 8005676:	7019      	strb	r1, [r3, #0]
 8005678:	68a3      	ldr	r3, [r4, #8]
 800567a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800567e:	3b01      	subs	r3, #1
 8005680:	60a3      	str	r3, [r4, #8]
 8005682:	2900      	cmp	r1, #0
 8005684:	d1ed      	bne.n	8005662 <_puts_r+0x52>
 8005686:	2b00      	cmp	r3, #0
 8005688:	da11      	bge.n	80056ae <_puts_r+0x9e>
 800568a:	4622      	mov	r2, r4
 800568c:	210a      	movs	r1, #10
 800568e:	4628      	mov	r0, r5
 8005690:	f000 f8df 	bl	8005852 <__swbuf_r>
 8005694:	3001      	adds	r0, #1
 8005696:	d0d7      	beq.n	8005648 <_puts_r+0x38>
 8005698:	250a      	movs	r5, #10
 800569a:	e7d7      	b.n	800564c <_puts_r+0x3c>
 800569c:	4622      	mov	r2, r4
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 f8d7 	bl	8005852 <__swbuf_r>
 80056a4:	3001      	adds	r0, #1
 80056a6:	d1e7      	bne.n	8005678 <_puts_r+0x68>
 80056a8:	e7ce      	b.n	8005648 <_puts_r+0x38>
 80056aa:	3e01      	subs	r6, #1
 80056ac:	e7e4      	b.n	8005678 <_puts_r+0x68>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	6022      	str	r2, [r4, #0]
 80056b4:	220a      	movs	r2, #10
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e7ee      	b.n	8005698 <_puts_r+0x88>
	...

080056bc <puts>:
 80056bc:	4b02      	ldr	r3, [pc, #8]	@ (80056c8 <puts+0xc>)
 80056be:	4601      	mov	r1, r0
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	f7ff bfa5 	b.w	8005610 <_puts_r>
 80056c6:	bf00      	nop
 80056c8:	2000006c 	.word	0x2000006c

080056cc <sniprintf>:
 80056cc:	b40c      	push	{r2, r3}
 80056ce:	b530      	push	{r4, r5, lr}
 80056d0:	4b17      	ldr	r3, [pc, #92]	@ (8005730 <sniprintf+0x64>)
 80056d2:	1e0c      	subs	r4, r1, #0
 80056d4:	681d      	ldr	r5, [r3, #0]
 80056d6:	b09d      	sub	sp, #116	@ 0x74
 80056d8:	da08      	bge.n	80056ec <sniprintf+0x20>
 80056da:	238b      	movs	r3, #139	@ 0x8b
 80056dc:	602b      	str	r3, [r5, #0]
 80056de:	f04f 30ff 	mov.w	r0, #4294967295
 80056e2:	b01d      	add	sp, #116	@ 0x74
 80056e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056e8:	b002      	add	sp, #8
 80056ea:	4770      	bx	lr
 80056ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80056f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80056f4:	bf14      	ite	ne
 80056f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80056fa:	4623      	moveq	r3, r4
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	9307      	str	r3, [sp, #28]
 8005700:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005704:	9002      	str	r0, [sp, #8]
 8005706:	9006      	str	r0, [sp, #24]
 8005708:	f8ad 3016 	strh.w	r3, [sp, #22]
 800570c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800570e:	ab21      	add	r3, sp, #132	@ 0x84
 8005710:	a902      	add	r1, sp, #8
 8005712:	4628      	mov	r0, r5
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	f000 fb8b 	bl	8005e30 <_svfiprintf_r>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	bfbc      	itt	lt
 800571e:	238b      	movlt	r3, #139	@ 0x8b
 8005720:	602b      	strlt	r3, [r5, #0]
 8005722:	2c00      	cmp	r4, #0
 8005724:	d0dd      	beq.n	80056e2 <sniprintf+0x16>
 8005726:	9b02      	ldr	r3, [sp, #8]
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e7d9      	b.n	80056e2 <sniprintf+0x16>
 800572e:	bf00      	nop
 8005730:	2000006c 	.word	0x2000006c

08005734 <siprintf>:
 8005734:	b40e      	push	{r1, r2, r3}
 8005736:	b500      	push	{lr}
 8005738:	b09c      	sub	sp, #112	@ 0x70
 800573a:	ab1d      	add	r3, sp, #116	@ 0x74
 800573c:	9002      	str	r0, [sp, #8]
 800573e:	9006      	str	r0, [sp, #24]
 8005740:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005744:	4809      	ldr	r0, [pc, #36]	@ (800576c <siprintf+0x38>)
 8005746:	9107      	str	r1, [sp, #28]
 8005748:	9104      	str	r1, [sp, #16]
 800574a:	4909      	ldr	r1, [pc, #36]	@ (8005770 <siprintf+0x3c>)
 800574c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005750:	9105      	str	r1, [sp, #20]
 8005752:	6800      	ldr	r0, [r0, #0]
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	a902      	add	r1, sp, #8
 8005758:	f000 fb6a 	bl	8005e30 <_svfiprintf_r>
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	b01c      	add	sp, #112	@ 0x70
 8005764:	f85d eb04 	ldr.w	lr, [sp], #4
 8005768:	b003      	add	sp, #12
 800576a:	4770      	bx	lr
 800576c:	2000006c 	.word	0x2000006c
 8005770:	ffff0208 	.word	0xffff0208

08005774 <siscanf>:
 8005774:	b40e      	push	{r1, r2, r3}
 8005776:	b530      	push	{r4, r5, lr}
 8005778:	b09c      	sub	sp, #112	@ 0x70
 800577a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800577c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005780:	f854 5b04 	ldr.w	r5, [r4], #4
 8005784:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005788:	9002      	str	r0, [sp, #8]
 800578a:	9006      	str	r0, [sp, #24]
 800578c:	f7fa fd32 	bl	80001f4 <strlen>
 8005790:	4b0b      	ldr	r3, [pc, #44]	@ (80057c0 <siscanf+0x4c>)
 8005792:	9003      	str	r0, [sp, #12]
 8005794:	9007      	str	r0, [sp, #28]
 8005796:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005798:	480a      	ldr	r0, [pc, #40]	@ (80057c4 <siscanf+0x50>)
 800579a:	9401      	str	r4, [sp, #4]
 800579c:	2300      	movs	r3, #0
 800579e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80057a0:	9314      	str	r3, [sp, #80]	@ 0x50
 80057a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057aa:	462a      	mov	r2, r5
 80057ac:	4623      	mov	r3, r4
 80057ae:	a902      	add	r1, sp, #8
 80057b0:	6800      	ldr	r0, [r0, #0]
 80057b2:	f000 fc91 	bl	80060d8 <__ssvfiscanf_r>
 80057b6:	b01c      	add	sp, #112	@ 0x70
 80057b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057bc:	b003      	add	sp, #12
 80057be:	4770      	bx	lr
 80057c0:	080057eb 	.word	0x080057eb
 80057c4:	2000006c 	.word	0x2000006c

080057c8 <__sread>:
 80057c8:	b510      	push	{r4, lr}
 80057ca:	460c      	mov	r4, r1
 80057cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d0:	f000 f95a 	bl	8005a88 <_read_r>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	bfab      	itete	ge
 80057d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057da:	89a3      	ldrhlt	r3, [r4, #12]
 80057dc:	181b      	addge	r3, r3, r0
 80057de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057e2:	bfac      	ite	ge
 80057e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057e6:	81a3      	strhlt	r3, [r4, #12]
 80057e8:	bd10      	pop	{r4, pc}

080057ea <__seofread>:
 80057ea:	2000      	movs	r0, #0
 80057ec:	4770      	bx	lr

080057ee <__swrite>:
 80057ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f2:	461f      	mov	r7, r3
 80057f4:	898b      	ldrh	r3, [r1, #12]
 80057f6:	05db      	lsls	r3, r3, #23
 80057f8:	4605      	mov	r5, r0
 80057fa:	460c      	mov	r4, r1
 80057fc:	4616      	mov	r6, r2
 80057fe:	d505      	bpl.n	800580c <__swrite+0x1e>
 8005800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005804:	2302      	movs	r3, #2
 8005806:	2200      	movs	r2, #0
 8005808:	f000 f92c 	bl	8005a64 <_lseek_r>
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	4632      	mov	r2, r6
 800581a:	463b      	mov	r3, r7
 800581c:	4628      	mov	r0, r5
 800581e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005822:	f000 b943 	b.w	8005aac <_write_r>

08005826 <__sseek>:
 8005826:	b510      	push	{r4, lr}
 8005828:	460c      	mov	r4, r1
 800582a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582e:	f000 f919 	bl	8005a64 <_lseek_r>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	bf15      	itete	ne
 8005838:	6560      	strne	r0, [r4, #84]	@ 0x54
 800583a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800583e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005842:	81a3      	strheq	r3, [r4, #12]
 8005844:	bf18      	it	ne
 8005846:	81a3      	strhne	r3, [r4, #12]
 8005848:	bd10      	pop	{r4, pc}

0800584a <__sclose>:
 800584a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584e:	f000 b8f9 	b.w	8005a44 <_close_r>

08005852 <__swbuf_r>:
 8005852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005854:	460e      	mov	r6, r1
 8005856:	4614      	mov	r4, r2
 8005858:	4605      	mov	r5, r0
 800585a:	b118      	cbz	r0, 8005864 <__swbuf_r+0x12>
 800585c:	6a03      	ldr	r3, [r0, #32]
 800585e:	b90b      	cbnz	r3, 8005864 <__swbuf_r+0x12>
 8005860:	f7ff fe8e 	bl	8005580 <__sinit>
 8005864:	69a3      	ldr	r3, [r4, #24]
 8005866:	60a3      	str	r3, [r4, #8]
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	071a      	lsls	r2, r3, #28
 800586c:	d501      	bpl.n	8005872 <__swbuf_r+0x20>
 800586e:	6923      	ldr	r3, [r4, #16]
 8005870:	b943      	cbnz	r3, 8005884 <__swbuf_r+0x32>
 8005872:	4621      	mov	r1, r4
 8005874:	4628      	mov	r0, r5
 8005876:	f000 f82b 	bl	80058d0 <__swsetup_r>
 800587a:	b118      	cbz	r0, 8005884 <__swbuf_r+0x32>
 800587c:	f04f 37ff 	mov.w	r7, #4294967295
 8005880:	4638      	mov	r0, r7
 8005882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	6922      	ldr	r2, [r4, #16]
 8005888:	1a98      	subs	r0, r3, r2
 800588a:	6963      	ldr	r3, [r4, #20]
 800588c:	b2f6      	uxtb	r6, r6
 800588e:	4283      	cmp	r3, r0
 8005890:	4637      	mov	r7, r6
 8005892:	dc05      	bgt.n	80058a0 <__swbuf_r+0x4e>
 8005894:	4621      	mov	r1, r4
 8005896:	4628      	mov	r0, r5
 8005898:	f001 fa34 	bl	8006d04 <_fflush_r>
 800589c:	2800      	cmp	r0, #0
 800589e:	d1ed      	bne.n	800587c <__swbuf_r+0x2a>
 80058a0:	68a3      	ldr	r3, [r4, #8]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	60a3      	str	r3, [r4, #8]
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	6022      	str	r2, [r4, #0]
 80058ac:	701e      	strb	r6, [r3, #0]
 80058ae:	6962      	ldr	r2, [r4, #20]
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d004      	beq.n	80058c0 <__swbuf_r+0x6e>
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	07db      	lsls	r3, r3, #31
 80058ba:	d5e1      	bpl.n	8005880 <__swbuf_r+0x2e>
 80058bc:	2e0a      	cmp	r6, #10
 80058be:	d1df      	bne.n	8005880 <__swbuf_r+0x2e>
 80058c0:	4621      	mov	r1, r4
 80058c2:	4628      	mov	r0, r5
 80058c4:	f001 fa1e 	bl	8006d04 <_fflush_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d0d9      	beq.n	8005880 <__swbuf_r+0x2e>
 80058cc:	e7d6      	b.n	800587c <__swbuf_r+0x2a>
	...

080058d0 <__swsetup_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4b29      	ldr	r3, [pc, #164]	@ (8005978 <__swsetup_r+0xa8>)
 80058d4:	4605      	mov	r5, r0
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	460c      	mov	r4, r1
 80058da:	b118      	cbz	r0, 80058e4 <__swsetup_r+0x14>
 80058dc:	6a03      	ldr	r3, [r0, #32]
 80058de:	b90b      	cbnz	r3, 80058e4 <__swsetup_r+0x14>
 80058e0:	f7ff fe4e 	bl	8005580 <__sinit>
 80058e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e8:	0719      	lsls	r1, r3, #28
 80058ea:	d422      	bmi.n	8005932 <__swsetup_r+0x62>
 80058ec:	06da      	lsls	r2, r3, #27
 80058ee:	d407      	bmi.n	8005900 <__swsetup_r+0x30>
 80058f0:	2209      	movs	r2, #9
 80058f2:	602a      	str	r2, [r5, #0]
 80058f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295
 80058fe:	e033      	b.n	8005968 <__swsetup_r+0x98>
 8005900:	0758      	lsls	r0, r3, #29
 8005902:	d512      	bpl.n	800592a <__swsetup_r+0x5a>
 8005904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005906:	b141      	cbz	r1, 800591a <__swsetup_r+0x4a>
 8005908:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800590c:	4299      	cmp	r1, r3
 800590e:	d002      	beq.n	8005916 <__swsetup_r+0x46>
 8005910:	4628      	mov	r0, r5
 8005912:	f000 f931 	bl	8005b78 <_free_r>
 8005916:	2300      	movs	r3, #0
 8005918:	6363      	str	r3, [r4, #52]	@ 0x34
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	2300      	movs	r3, #0
 8005924:	6063      	str	r3, [r4, #4]
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	f043 0308 	orr.w	r3, r3, #8
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	b94b      	cbnz	r3, 800594a <__swsetup_r+0x7a>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800593c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005940:	d003      	beq.n	800594a <__swsetup_r+0x7a>
 8005942:	4621      	mov	r1, r4
 8005944:	4628      	mov	r0, r5
 8005946:	f001 fa3d 	bl	8006dc4 <__smakebuf_r>
 800594a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594e:	f013 0201 	ands.w	r2, r3, #1
 8005952:	d00a      	beq.n	800596a <__swsetup_r+0x9a>
 8005954:	2200      	movs	r2, #0
 8005956:	60a2      	str	r2, [r4, #8]
 8005958:	6962      	ldr	r2, [r4, #20]
 800595a:	4252      	negs	r2, r2
 800595c:	61a2      	str	r2, [r4, #24]
 800595e:	6922      	ldr	r2, [r4, #16]
 8005960:	b942      	cbnz	r2, 8005974 <__swsetup_r+0xa4>
 8005962:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005966:	d1c5      	bne.n	80058f4 <__swsetup_r+0x24>
 8005968:	bd38      	pop	{r3, r4, r5, pc}
 800596a:	0799      	lsls	r1, r3, #30
 800596c:	bf58      	it	pl
 800596e:	6962      	ldrpl	r2, [r4, #20]
 8005970:	60a2      	str	r2, [r4, #8]
 8005972:	e7f4      	b.n	800595e <__swsetup_r+0x8e>
 8005974:	2000      	movs	r0, #0
 8005976:	e7f7      	b.n	8005968 <__swsetup_r+0x98>
 8005978:	2000006c 	.word	0x2000006c

0800597c <memset>:
 800597c:	4402      	add	r2, r0
 800597e:	4603      	mov	r3, r0
 8005980:	4293      	cmp	r3, r2
 8005982:	d100      	bne.n	8005986 <memset+0xa>
 8005984:	4770      	bx	lr
 8005986:	f803 1b01 	strb.w	r1, [r3], #1
 800598a:	e7f9      	b.n	8005980 <memset+0x4>

0800598c <strtok>:
 800598c:	4b16      	ldr	r3, [pc, #88]	@ (80059e8 <strtok+0x5c>)
 800598e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005992:	681f      	ldr	r7, [r3, #0]
 8005994:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005996:	4605      	mov	r5, r0
 8005998:	460e      	mov	r6, r1
 800599a:	b9ec      	cbnz	r4, 80059d8 <strtok+0x4c>
 800599c:	2050      	movs	r0, #80	@ 0x50
 800599e:	f000 f935 	bl	8005c0c <malloc>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6478      	str	r0, [r7, #68]	@ 0x44
 80059a6:	b920      	cbnz	r0, 80059b2 <strtok+0x26>
 80059a8:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <strtok+0x60>)
 80059aa:	4811      	ldr	r0, [pc, #68]	@ (80059f0 <strtok+0x64>)
 80059ac:	215b      	movs	r1, #91	@ 0x5b
 80059ae:	f000 f8c5 	bl	8005b3c <__assert_func>
 80059b2:	e9c0 4400 	strd	r4, r4, [r0]
 80059b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80059ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80059be:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80059c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80059c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80059ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80059ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80059d2:	6184      	str	r4, [r0, #24]
 80059d4:	7704      	strb	r4, [r0, #28]
 80059d6:	6244      	str	r4, [r0, #36]	@ 0x24
 80059d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	2301      	movs	r3, #1
 80059e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	f000 b806 	b.w	80059f4 <__strtok_r>
 80059e8:	2000006c 	.word	0x2000006c
 80059ec:	080074c5 	.word	0x080074c5
 80059f0:	080074dc 	.word	0x080074dc

080059f4 <__strtok_r>:
 80059f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f6:	4604      	mov	r4, r0
 80059f8:	b908      	cbnz	r0, 80059fe <__strtok_r+0xa>
 80059fa:	6814      	ldr	r4, [r2, #0]
 80059fc:	b144      	cbz	r4, 8005a10 <__strtok_r+0x1c>
 80059fe:	4620      	mov	r0, r4
 8005a00:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a04:	460f      	mov	r7, r1
 8005a06:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a0a:	b91e      	cbnz	r6, 8005a14 <__strtok_r+0x20>
 8005a0c:	b965      	cbnz	r5, 8005a28 <__strtok_r+0x34>
 8005a0e:	6015      	str	r5, [r2, #0]
 8005a10:	2000      	movs	r0, #0
 8005a12:	e005      	b.n	8005a20 <__strtok_r+0x2c>
 8005a14:	42b5      	cmp	r5, r6
 8005a16:	d1f6      	bne.n	8005a06 <__strtok_r+0x12>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f0      	bne.n	80059fe <__strtok_r+0xa>
 8005a1c:	6014      	str	r4, [r2, #0]
 8005a1e:	7003      	strb	r3, [r0, #0]
 8005a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a22:	461c      	mov	r4, r3
 8005a24:	e00c      	b.n	8005a40 <__strtok_r+0x4c>
 8005a26:	b915      	cbnz	r5, 8005a2e <__strtok_r+0x3a>
 8005a28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a2c:	460e      	mov	r6, r1
 8005a2e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005a32:	42ab      	cmp	r3, r5
 8005a34:	d1f7      	bne.n	8005a26 <__strtok_r+0x32>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f3      	beq.n	8005a22 <__strtok_r+0x2e>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005a40:	6014      	str	r4, [r2, #0]
 8005a42:	e7ed      	b.n	8005a20 <__strtok_r+0x2c>

08005a44 <_close_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d06      	ldr	r5, [pc, #24]	@ (8005a60 <_close_r+0x1c>)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	f7fc fa3e 	bl	8001ed0 <_close>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_close_r+0x1a>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_close_r+0x1a>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	200003e0 	.word	0x200003e0

08005a64 <_lseek_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d07      	ldr	r5, [pc, #28]	@ (8005a84 <_lseek_r+0x20>)
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4608      	mov	r0, r1
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	602a      	str	r2, [r5, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	f7fc fa53 	bl	8001f1e <_lseek>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_lseek_r+0x1e>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_lseek_r+0x1e>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	200003e0 	.word	0x200003e0

08005a88 <_read_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4d07      	ldr	r5, [pc, #28]	@ (8005aa8 <_read_r+0x20>)
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	4608      	mov	r0, r1
 8005a90:	4611      	mov	r1, r2
 8005a92:	2200      	movs	r2, #0
 8005a94:	602a      	str	r2, [r5, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f7fc f9e1 	bl	8001e5e <_read>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_read_r+0x1e>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_read_r+0x1e>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	200003e0 	.word	0x200003e0

08005aac <_write_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4d07      	ldr	r5, [pc, #28]	@ (8005acc <_write_r+0x20>)
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	602a      	str	r2, [r5, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f7fc f9ec 	bl	8001e98 <_write>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_write_r+0x1e>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_write_r+0x1e>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	200003e0 	.word	0x200003e0

08005ad0 <__errno>:
 8005ad0:	4b01      	ldr	r3, [pc, #4]	@ (8005ad8 <__errno+0x8>)
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	2000006c 	.word	0x2000006c

08005adc <__libc_init_array>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	4d0d      	ldr	r5, [pc, #52]	@ (8005b14 <__libc_init_array+0x38>)
 8005ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8005b18 <__libc_init_array+0x3c>)
 8005ae2:	1b64      	subs	r4, r4, r5
 8005ae4:	10a4      	asrs	r4, r4, #2
 8005ae6:	2600      	movs	r6, #0
 8005ae8:	42a6      	cmp	r6, r4
 8005aea:	d109      	bne.n	8005b00 <__libc_init_array+0x24>
 8005aec:	4d0b      	ldr	r5, [pc, #44]	@ (8005b1c <__libc_init_array+0x40>)
 8005aee:	4c0c      	ldr	r4, [pc, #48]	@ (8005b20 <__libc_init_array+0x44>)
 8005af0:	f001 fb64 	bl	80071bc <_init>
 8005af4:	1b64      	subs	r4, r4, r5
 8005af6:	10a4      	asrs	r4, r4, #2
 8005af8:	2600      	movs	r6, #0
 8005afa:	42a6      	cmp	r6, r4
 8005afc:	d105      	bne.n	8005b0a <__libc_init_array+0x2e>
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b04:	4798      	blx	r3
 8005b06:	3601      	adds	r6, #1
 8005b08:	e7ee      	b.n	8005ae8 <__libc_init_array+0xc>
 8005b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0e:	4798      	blx	r3
 8005b10:	3601      	adds	r6, #1
 8005b12:	e7f2      	b.n	8005afa <__libc_init_array+0x1e>
 8005b14:	080075c8 	.word	0x080075c8
 8005b18:	080075c8 	.word	0x080075c8
 8005b1c:	080075c8 	.word	0x080075c8
 8005b20:	080075cc 	.word	0x080075cc

08005b24 <__retarget_lock_init_recursive>:
 8005b24:	4770      	bx	lr

08005b26 <__retarget_lock_acquire_recursive>:
 8005b26:	4770      	bx	lr

08005b28 <__retarget_lock_release_recursive>:
 8005b28:	4770      	bx	lr

08005b2a <strcpy>:
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b30:	f803 2b01 	strb.w	r2, [r3], #1
 8005b34:	2a00      	cmp	r2, #0
 8005b36:	d1f9      	bne.n	8005b2c <strcpy+0x2>
 8005b38:	4770      	bx	lr
	...

08005b3c <__assert_func>:
 8005b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b3e:	4614      	mov	r4, r2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <__assert_func+0x2c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4605      	mov	r5, r0
 8005b48:	68d8      	ldr	r0, [r3, #12]
 8005b4a:	b954      	cbnz	r4, 8005b62 <__assert_func+0x26>
 8005b4c:	4b07      	ldr	r3, [pc, #28]	@ (8005b6c <__assert_func+0x30>)
 8005b4e:	461c      	mov	r4, r3
 8005b50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b54:	9100      	str	r1, [sp, #0]
 8005b56:	462b      	mov	r3, r5
 8005b58:	4905      	ldr	r1, [pc, #20]	@ (8005b70 <__assert_func+0x34>)
 8005b5a:	f001 f8fb 	bl	8006d54 <fiprintf>
 8005b5e:	f001 fa3b 	bl	8006fd8 <abort>
 8005b62:	4b04      	ldr	r3, [pc, #16]	@ (8005b74 <__assert_func+0x38>)
 8005b64:	e7f4      	b.n	8005b50 <__assert_func+0x14>
 8005b66:	bf00      	nop
 8005b68:	2000006c 	.word	0x2000006c
 8005b6c:	08007571 	.word	0x08007571
 8005b70:	08007543 	.word	0x08007543
 8005b74:	08007536 	.word	0x08007536

08005b78 <_free_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	d041      	beq.n	8005c04 <_free_r+0x8c>
 8005b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b84:	1f0c      	subs	r4, r1, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfb8      	it	lt
 8005b8a:	18e4      	addlt	r4, r4, r3
 8005b8c:	f000 f8e8 	bl	8005d60 <__malloc_lock>
 8005b90:	4a1d      	ldr	r2, [pc, #116]	@ (8005c08 <_free_r+0x90>)
 8005b92:	6813      	ldr	r3, [r2, #0]
 8005b94:	b933      	cbnz	r3, 8005ba4 <_free_r+0x2c>
 8005b96:	6063      	str	r3, [r4, #4]
 8005b98:	6014      	str	r4, [r2, #0]
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ba0:	f000 b8e4 	b.w	8005d6c <__malloc_unlock>
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d908      	bls.n	8005bba <_free_r+0x42>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	1821      	adds	r1, r4, r0
 8005bac:	428b      	cmp	r3, r1
 8005bae:	bf01      	itttt	eq
 8005bb0:	6819      	ldreq	r1, [r3, #0]
 8005bb2:	685b      	ldreq	r3, [r3, #4]
 8005bb4:	1809      	addeq	r1, r1, r0
 8005bb6:	6021      	streq	r1, [r4, #0]
 8005bb8:	e7ed      	b.n	8005b96 <_free_r+0x1e>
 8005bba:	461a      	mov	r2, r3
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	b10b      	cbz	r3, 8005bc4 <_free_r+0x4c>
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d9fa      	bls.n	8005bba <_free_r+0x42>
 8005bc4:	6811      	ldr	r1, [r2, #0]
 8005bc6:	1850      	adds	r0, r2, r1
 8005bc8:	42a0      	cmp	r0, r4
 8005bca:	d10b      	bne.n	8005be4 <_free_r+0x6c>
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	4401      	add	r1, r0
 8005bd0:	1850      	adds	r0, r2, r1
 8005bd2:	4283      	cmp	r3, r0
 8005bd4:	6011      	str	r1, [r2, #0]
 8005bd6:	d1e0      	bne.n	8005b9a <_free_r+0x22>
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	6053      	str	r3, [r2, #4]
 8005bde:	4408      	add	r0, r1
 8005be0:	6010      	str	r0, [r2, #0]
 8005be2:	e7da      	b.n	8005b9a <_free_r+0x22>
 8005be4:	d902      	bls.n	8005bec <_free_r+0x74>
 8005be6:	230c      	movs	r3, #12
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	e7d6      	b.n	8005b9a <_free_r+0x22>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	1821      	adds	r1, r4, r0
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	bf04      	itt	eq
 8005bf4:	6819      	ldreq	r1, [r3, #0]
 8005bf6:	685b      	ldreq	r3, [r3, #4]
 8005bf8:	6063      	str	r3, [r4, #4]
 8005bfa:	bf04      	itt	eq
 8005bfc:	1809      	addeq	r1, r1, r0
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	6054      	str	r4, [r2, #4]
 8005c02:	e7ca      	b.n	8005b9a <_free_r+0x22>
 8005c04:	bd38      	pop	{r3, r4, r5, pc}
 8005c06:	bf00      	nop
 8005c08:	200003ec 	.word	0x200003ec

08005c0c <malloc>:
 8005c0c:	4b02      	ldr	r3, [pc, #8]	@ (8005c18 <malloc+0xc>)
 8005c0e:	4601      	mov	r1, r0
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	f000 b825 	b.w	8005c60 <_malloc_r>
 8005c16:	bf00      	nop
 8005c18:	2000006c 	.word	0x2000006c

08005c1c <sbrk_aligned>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c5c <sbrk_aligned+0x40>)
 8005c20:	460c      	mov	r4, r1
 8005c22:	6831      	ldr	r1, [r6, #0]
 8005c24:	4605      	mov	r5, r0
 8005c26:	b911      	cbnz	r1, 8005c2e <sbrk_aligned+0x12>
 8005c28:	f001 f9b8 	bl	8006f9c <_sbrk_r>
 8005c2c:	6030      	str	r0, [r6, #0]
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	f001 f9b3 	bl	8006f9c <_sbrk_r>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	d103      	bne.n	8005c42 <sbrk_aligned+0x26>
 8005c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8005c3e:	4620      	mov	r0, r4
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
 8005c42:	1cc4      	adds	r4, r0, #3
 8005c44:	f024 0403 	bic.w	r4, r4, #3
 8005c48:	42a0      	cmp	r0, r4
 8005c4a:	d0f8      	beq.n	8005c3e <sbrk_aligned+0x22>
 8005c4c:	1a21      	subs	r1, r4, r0
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f001 f9a4 	bl	8006f9c <_sbrk_r>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d1f2      	bne.n	8005c3e <sbrk_aligned+0x22>
 8005c58:	e7ef      	b.n	8005c3a <sbrk_aligned+0x1e>
 8005c5a:	bf00      	nop
 8005c5c:	200003e8 	.word	0x200003e8

08005c60 <_malloc_r>:
 8005c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c64:	1ccd      	adds	r5, r1, #3
 8005c66:	f025 0503 	bic.w	r5, r5, #3
 8005c6a:	3508      	adds	r5, #8
 8005c6c:	2d0c      	cmp	r5, #12
 8005c6e:	bf38      	it	cc
 8005c70:	250c      	movcc	r5, #12
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	4606      	mov	r6, r0
 8005c76:	db01      	blt.n	8005c7c <_malloc_r+0x1c>
 8005c78:	42a9      	cmp	r1, r5
 8005c7a:	d904      	bls.n	8005c86 <_malloc_r+0x26>
 8005c7c:	230c      	movs	r3, #12
 8005c7e:	6033      	str	r3, [r6, #0]
 8005c80:	2000      	movs	r0, #0
 8005c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d5c <_malloc_r+0xfc>
 8005c8a:	f000 f869 	bl	8005d60 <__malloc_lock>
 8005c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c92:	461c      	mov	r4, r3
 8005c94:	bb44      	cbnz	r4, 8005ce8 <_malloc_r+0x88>
 8005c96:	4629      	mov	r1, r5
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7ff ffbf 	bl	8005c1c <sbrk_aligned>
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	d158      	bne.n	8005d56 <_malloc_r+0xf6>
 8005ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ca8:	4627      	mov	r7, r4
 8005caa:	2f00      	cmp	r7, #0
 8005cac:	d143      	bne.n	8005d36 <_malloc_r+0xd6>
 8005cae:	2c00      	cmp	r4, #0
 8005cb0:	d04b      	beq.n	8005d4a <_malloc_r+0xea>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	4639      	mov	r1, r7
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	eb04 0903 	add.w	r9, r4, r3
 8005cbc:	f001 f96e 	bl	8006f9c <_sbrk_r>
 8005cc0:	4581      	cmp	r9, r0
 8005cc2:	d142      	bne.n	8005d4a <_malloc_r+0xea>
 8005cc4:	6821      	ldr	r1, [r4, #0]
 8005cc6:	1a6d      	subs	r5, r5, r1
 8005cc8:	4629      	mov	r1, r5
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7ff ffa6 	bl	8005c1c <sbrk_aligned>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d03a      	beq.n	8005d4a <_malloc_r+0xea>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	442b      	add	r3, r5
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	f8d8 3000 	ldr.w	r3, [r8]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	bb62      	cbnz	r2, 8005d3c <_malloc_r+0xdc>
 8005ce2:	f8c8 7000 	str.w	r7, [r8]
 8005ce6:	e00f      	b.n	8005d08 <_malloc_r+0xa8>
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	1b52      	subs	r2, r2, r5
 8005cec:	d420      	bmi.n	8005d30 <_malloc_r+0xd0>
 8005cee:	2a0b      	cmp	r2, #11
 8005cf0:	d917      	bls.n	8005d22 <_malloc_r+0xc2>
 8005cf2:	1961      	adds	r1, r4, r5
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	6025      	str	r5, [r4, #0]
 8005cf8:	bf18      	it	ne
 8005cfa:	6059      	strne	r1, [r3, #4]
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	bf08      	it	eq
 8005d00:	f8c8 1000 	streq.w	r1, [r8]
 8005d04:	5162      	str	r2, [r4, r5]
 8005d06:	604b      	str	r3, [r1, #4]
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f000 f82f 	bl	8005d6c <__malloc_unlock>
 8005d0e:	f104 000b 	add.w	r0, r4, #11
 8005d12:	1d23      	adds	r3, r4, #4
 8005d14:	f020 0007 	bic.w	r0, r0, #7
 8005d18:	1ac2      	subs	r2, r0, r3
 8005d1a:	bf1c      	itt	ne
 8005d1c:	1a1b      	subne	r3, r3, r0
 8005d1e:	50a3      	strne	r3, [r4, r2]
 8005d20:	e7af      	b.n	8005c82 <_malloc_r+0x22>
 8005d22:	6862      	ldr	r2, [r4, #4]
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	bf0c      	ite	eq
 8005d28:	f8c8 2000 	streq.w	r2, [r8]
 8005d2c:	605a      	strne	r2, [r3, #4]
 8005d2e:	e7eb      	b.n	8005d08 <_malloc_r+0xa8>
 8005d30:	4623      	mov	r3, r4
 8005d32:	6864      	ldr	r4, [r4, #4]
 8005d34:	e7ae      	b.n	8005c94 <_malloc_r+0x34>
 8005d36:	463c      	mov	r4, r7
 8005d38:	687f      	ldr	r7, [r7, #4]
 8005d3a:	e7b6      	b.n	8005caa <_malloc_r+0x4a>
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	d1fb      	bne.n	8005d3c <_malloc_r+0xdc>
 8005d44:	2300      	movs	r3, #0
 8005d46:	6053      	str	r3, [r2, #4]
 8005d48:	e7de      	b.n	8005d08 <_malloc_r+0xa8>
 8005d4a:	230c      	movs	r3, #12
 8005d4c:	6033      	str	r3, [r6, #0]
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f000 f80c 	bl	8005d6c <__malloc_unlock>
 8005d54:	e794      	b.n	8005c80 <_malloc_r+0x20>
 8005d56:	6005      	str	r5, [r0, #0]
 8005d58:	e7d6      	b.n	8005d08 <_malloc_r+0xa8>
 8005d5a:	bf00      	nop
 8005d5c:	200003ec 	.word	0x200003ec

08005d60 <__malloc_lock>:
 8005d60:	4801      	ldr	r0, [pc, #4]	@ (8005d68 <__malloc_lock+0x8>)
 8005d62:	f7ff bee0 	b.w	8005b26 <__retarget_lock_acquire_recursive>
 8005d66:	bf00      	nop
 8005d68:	200003e4 	.word	0x200003e4

08005d6c <__malloc_unlock>:
 8005d6c:	4801      	ldr	r0, [pc, #4]	@ (8005d74 <__malloc_unlock+0x8>)
 8005d6e:	f7ff bedb 	b.w	8005b28 <__retarget_lock_release_recursive>
 8005d72:	bf00      	nop
 8005d74:	200003e4 	.word	0x200003e4

08005d78 <__ssputs_r>:
 8005d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	688e      	ldr	r6, [r1, #8]
 8005d7e:	461f      	mov	r7, r3
 8005d80:	42be      	cmp	r6, r7
 8005d82:	680b      	ldr	r3, [r1, #0]
 8005d84:	4682      	mov	sl, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	4690      	mov	r8, r2
 8005d8a:	d82d      	bhi.n	8005de8 <__ssputs_r+0x70>
 8005d8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d94:	d026      	beq.n	8005de4 <__ssputs_r+0x6c>
 8005d96:	6965      	ldr	r5, [r4, #20]
 8005d98:	6909      	ldr	r1, [r1, #16]
 8005d9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d9e:	eba3 0901 	sub.w	r9, r3, r1
 8005da2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005da6:	1c7b      	adds	r3, r7, #1
 8005da8:	444b      	add	r3, r9
 8005daa:	106d      	asrs	r5, r5, #1
 8005dac:	429d      	cmp	r5, r3
 8005dae:	bf38      	it	cc
 8005db0:	461d      	movcc	r5, r3
 8005db2:	0553      	lsls	r3, r2, #21
 8005db4:	d527      	bpl.n	8005e06 <__ssputs_r+0x8e>
 8005db6:	4629      	mov	r1, r5
 8005db8:	f7ff ff52 	bl	8005c60 <_malloc_r>
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	b360      	cbz	r0, 8005e1a <__ssputs_r+0xa2>
 8005dc0:	6921      	ldr	r1, [r4, #16]
 8005dc2:	464a      	mov	r2, r9
 8005dc4:	f001 f8fa 	bl	8006fbc <memcpy>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	6126      	str	r6, [r4, #16]
 8005dd6:	6165      	str	r5, [r4, #20]
 8005dd8:	444e      	add	r6, r9
 8005dda:	eba5 0509 	sub.w	r5, r5, r9
 8005dde:	6026      	str	r6, [r4, #0]
 8005de0:	60a5      	str	r5, [r4, #8]
 8005de2:	463e      	mov	r6, r7
 8005de4:	42be      	cmp	r6, r7
 8005de6:	d900      	bls.n	8005dea <__ssputs_r+0x72>
 8005de8:	463e      	mov	r6, r7
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	4632      	mov	r2, r6
 8005dee:	4641      	mov	r1, r8
 8005df0:	f001 f897 	bl	8006f22 <memmove>
 8005df4:	68a3      	ldr	r3, [r4, #8]
 8005df6:	1b9b      	subs	r3, r3, r6
 8005df8:	60a3      	str	r3, [r4, #8]
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	4433      	add	r3, r6
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	2000      	movs	r0, #0
 8005e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e06:	462a      	mov	r2, r5
 8005e08:	f001 f8ed 	bl	8006fe6 <_realloc_r>
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d1e0      	bne.n	8005dd4 <__ssputs_r+0x5c>
 8005e12:	6921      	ldr	r1, [r4, #16]
 8005e14:	4650      	mov	r0, sl
 8005e16:	f7ff feaf 	bl	8005b78 <_free_r>
 8005e1a:	230c      	movs	r3, #12
 8005e1c:	f8ca 3000 	str.w	r3, [sl]
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e26:	81a3      	strh	r3, [r4, #12]
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	e7e9      	b.n	8005e02 <__ssputs_r+0x8a>
	...

08005e30 <_svfiprintf_r>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	4698      	mov	r8, r3
 8005e36:	898b      	ldrh	r3, [r1, #12]
 8005e38:	061b      	lsls	r3, r3, #24
 8005e3a:	b09d      	sub	sp, #116	@ 0x74
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	460d      	mov	r5, r1
 8005e40:	4614      	mov	r4, r2
 8005e42:	d510      	bpl.n	8005e66 <_svfiprintf_r+0x36>
 8005e44:	690b      	ldr	r3, [r1, #16]
 8005e46:	b973      	cbnz	r3, 8005e66 <_svfiprintf_r+0x36>
 8005e48:	2140      	movs	r1, #64	@ 0x40
 8005e4a:	f7ff ff09 	bl	8005c60 <_malloc_r>
 8005e4e:	6028      	str	r0, [r5, #0]
 8005e50:	6128      	str	r0, [r5, #16]
 8005e52:	b930      	cbnz	r0, 8005e62 <_svfiprintf_r+0x32>
 8005e54:	230c      	movs	r3, #12
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	b01d      	add	sp, #116	@ 0x74
 8005e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e62:	2340      	movs	r3, #64	@ 0x40
 8005e64:	616b      	str	r3, [r5, #20]
 8005e66:	2300      	movs	r3, #0
 8005e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e74:	2330      	movs	r3, #48	@ 0x30
 8005e76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006014 <_svfiprintf_r+0x1e4>
 8005e7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e7e:	f04f 0901 	mov.w	r9, #1
 8005e82:	4623      	mov	r3, r4
 8005e84:	469a      	mov	sl, r3
 8005e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e8a:	b10a      	cbz	r2, 8005e90 <_svfiprintf_r+0x60>
 8005e8c:	2a25      	cmp	r2, #37	@ 0x25
 8005e8e:	d1f9      	bne.n	8005e84 <_svfiprintf_r+0x54>
 8005e90:	ebba 0b04 	subs.w	fp, sl, r4
 8005e94:	d00b      	beq.n	8005eae <_svfiprintf_r+0x7e>
 8005e96:	465b      	mov	r3, fp
 8005e98:	4622      	mov	r2, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f7ff ff6b 	bl	8005d78 <__ssputs_r>
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f000 80a7 	beq.w	8005ff6 <_svfiprintf_r+0x1c6>
 8005ea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eaa:	445a      	add	r2, fp
 8005eac:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eae:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 809f 	beq.w	8005ff6 <_svfiprintf_r+0x1c6>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ec2:	f10a 0a01 	add.w	sl, sl, #1
 8005ec6:	9304      	str	r3, [sp, #16]
 8005ec8:	9307      	str	r3, [sp, #28]
 8005eca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ece:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ed0:	4654      	mov	r4, sl
 8005ed2:	2205      	movs	r2, #5
 8005ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed8:	484e      	ldr	r0, [pc, #312]	@ (8006014 <_svfiprintf_r+0x1e4>)
 8005eda:	f7fa f999 	bl	8000210 <memchr>
 8005ede:	9a04      	ldr	r2, [sp, #16]
 8005ee0:	b9d8      	cbnz	r0, 8005f1a <_svfiprintf_r+0xea>
 8005ee2:	06d0      	lsls	r0, r2, #27
 8005ee4:	bf44      	itt	mi
 8005ee6:	2320      	movmi	r3, #32
 8005ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eec:	0711      	lsls	r1, r2, #28
 8005eee:	bf44      	itt	mi
 8005ef0:	232b      	movmi	r3, #43	@ 0x2b
 8005ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8005efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005efc:	d015      	beq.n	8005f2a <_svfiprintf_r+0xfa>
 8005efe:	9a07      	ldr	r2, [sp, #28]
 8005f00:	4654      	mov	r4, sl
 8005f02:	2000      	movs	r0, #0
 8005f04:	f04f 0c0a 	mov.w	ip, #10
 8005f08:	4621      	mov	r1, r4
 8005f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f0e:	3b30      	subs	r3, #48	@ 0x30
 8005f10:	2b09      	cmp	r3, #9
 8005f12:	d94b      	bls.n	8005fac <_svfiprintf_r+0x17c>
 8005f14:	b1b0      	cbz	r0, 8005f44 <_svfiprintf_r+0x114>
 8005f16:	9207      	str	r2, [sp, #28]
 8005f18:	e014      	b.n	8005f44 <_svfiprintf_r+0x114>
 8005f1a:	eba0 0308 	sub.w	r3, r0, r8
 8005f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	46a2      	mov	sl, r4
 8005f28:	e7d2      	b.n	8005ed0 <_svfiprintf_r+0xa0>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	1d19      	adds	r1, r3, #4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	9103      	str	r1, [sp, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bfbb      	ittet	lt
 8005f36:	425b      	neglt	r3, r3
 8005f38:	f042 0202 	orrlt.w	r2, r2, #2
 8005f3c:	9307      	strge	r3, [sp, #28]
 8005f3e:	9307      	strlt	r3, [sp, #28]
 8005f40:	bfb8      	it	lt
 8005f42:	9204      	strlt	r2, [sp, #16]
 8005f44:	7823      	ldrb	r3, [r4, #0]
 8005f46:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f48:	d10a      	bne.n	8005f60 <_svfiprintf_r+0x130>
 8005f4a:	7863      	ldrb	r3, [r4, #1]
 8005f4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f4e:	d132      	bne.n	8005fb6 <_svfiprintf_r+0x186>
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	1d1a      	adds	r2, r3, #4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	9203      	str	r2, [sp, #12]
 8005f58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f5c:	3402      	adds	r4, #2
 8005f5e:	9305      	str	r3, [sp, #20]
 8005f60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006024 <_svfiprintf_r+0x1f4>
 8005f64:	7821      	ldrb	r1, [r4, #0]
 8005f66:	2203      	movs	r2, #3
 8005f68:	4650      	mov	r0, sl
 8005f6a:	f7fa f951 	bl	8000210 <memchr>
 8005f6e:	b138      	cbz	r0, 8005f80 <_svfiprintf_r+0x150>
 8005f70:	9b04      	ldr	r3, [sp, #16]
 8005f72:	eba0 000a 	sub.w	r0, r0, sl
 8005f76:	2240      	movs	r2, #64	@ 0x40
 8005f78:	4082      	lsls	r2, r0
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	3401      	adds	r4, #1
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f84:	4824      	ldr	r0, [pc, #144]	@ (8006018 <_svfiprintf_r+0x1e8>)
 8005f86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f8a:	2206      	movs	r2, #6
 8005f8c:	f7fa f940 	bl	8000210 <memchr>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d036      	beq.n	8006002 <_svfiprintf_r+0x1d2>
 8005f94:	4b21      	ldr	r3, [pc, #132]	@ (800601c <_svfiprintf_r+0x1ec>)
 8005f96:	bb1b      	cbnz	r3, 8005fe0 <_svfiprintf_r+0x1b0>
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	3307      	adds	r3, #7
 8005f9c:	f023 0307 	bic.w	r3, r3, #7
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	9303      	str	r3, [sp, #12]
 8005fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa6:	4433      	add	r3, r6
 8005fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005faa:	e76a      	b.n	8005e82 <_svfiprintf_r+0x52>
 8005fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	e7a8      	b.n	8005f08 <_svfiprintf_r+0xd8>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	3401      	adds	r4, #1
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	f04f 0c0a 	mov.w	ip, #10
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc8:	3a30      	subs	r2, #48	@ 0x30
 8005fca:	2a09      	cmp	r2, #9
 8005fcc:	d903      	bls.n	8005fd6 <_svfiprintf_r+0x1a6>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0c6      	beq.n	8005f60 <_svfiprintf_r+0x130>
 8005fd2:	9105      	str	r1, [sp, #20]
 8005fd4:	e7c4      	b.n	8005f60 <_svfiprintf_r+0x130>
 8005fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fda:	4604      	mov	r4, r0
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e7f0      	b.n	8005fc2 <_svfiprintf_r+0x192>
 8005fe0:	ab03      	add	r3, sp, #12
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	462a      	mov	r2, r5
 8005fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8006020 <_svfiprintf_r+0x1f0>)
 8005fe8:	a904      	add	r1, sp, #16
 8005fea:	4638      	mov	r0, r7
 8005fec:	f3af 8000 	nop.w
 8005ff0:	1c42      	adds	r2, r0, #1
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	d1d6      	bne.n	8005fa4 <_svfiprintf_r+0x174>
 8005ff6:	89ab      	ldrh	r3, [r5, #12]
 8005ff8:	065b      	lsls	r3, r3, #25
 8005ffa:	f53f af2d 	bmi.w	8005e58 <_svfiprintf_r+0x28>
 8005ffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006000:	e72c      	b.n	8005e5c <_svfiprintf_r+0x2c>
 8006002:	ab03      	add	r3, sp, #12
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	462a      	mov	r2, r5
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <_svfiprintf_r+0x1f0>)
 800600a:	a904      	add	r1, sp, #16
 800600c:	4638      	mov	r0, r7
 800600e:	f000 fb87 	bl	8006720 <_printf_i>
 8006012:	e7ed      	b.n	8005ff0 <_svfiprintf_r+0x1c0>
 8006014:	08007572 	.word	0x08007572
 8006018:	0800757c 	.word	0x0800757c
 800601c:	00000000 	.word	0x00000000
 8006020:	08005d79 	.word	0x08005d79
 8006024:	08007578 	.word	0x08007578

08006028 <_sungetc_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	1c4b      	adds	r3, r1, #1
 800602c:	4614      	mov	r4, r2
 800602e:	d103      	bne.n	8006038 <_sungetc_r+0x10>
 8006030:	f04f 35ff 	mov.w	r5, #4294967295
 8006034:	4628      	mov	r0, r5
 8006036:	bd38      	pop	{r3, r4, r5, pc}
 8006038:	8993      	ldrh	r3, [r2, #12]
 800603a:	f023 0320 	bic.w	r3, r3, #32
 800603e:	8193      	strh	r3, [r2, #12]
 8006040:	6853      	ldr	r3, [r2, #4]
 8006042:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006044:	b2cd      	uxtb	r5, r1
 8006046:	b18a      	cbz	r2, 800606c <_sungetc_r+0x44>
 8006048:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800604a:	429a      	cmp	r2, r3
 800604c:	dd08      	ble.n	8006060 <_sungetc_r+0x38>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	1e5a      	subs	r2, r3, #1
 8006052:	6022      	str	r2, [r4, #0]
 8006054:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	3301      	adds	r3, #1
 800605c:	6063      	str	r3, [r4, #4]
 800605e:	e7e9      	b.n	8006034 <_sungetc_r+0xc>
 8006060:	4621      	mov	r1, r4
 8006062:	f000 ff24 	bl	8006eae <__submore>
 8006066:	2800      	cmp	r0, #0
 8006068:	d0f1      	beq.n	800604e <_sungetc_r+0x26>
 800606a:	e7e1      	b.n	8006030 <_sungetc_r+0x8>
 800606c:	6921      	ldr	r1, [r4, #16]
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	b141      	cbz	r1, 8006084 <_sungetc_r+0x5c>
 8006072:	4291      	cmp	r1, r2
 8006074:	d206      	bcs.n	8006084 <_sungetc_r+0x5c>
 8006076:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800607a:	42a9      	cmp	r1, r5
 800607c:	d102      	bne.n	8006084 <_sungetc_r+0x5c>
 800607e:	3a01      	subs	r2, #1
 8006080:	6022      	str	r2, [r4, #0]
 8006082:	e7ea      	b.n	800605a <_sungetc_r+0x32>
 8006084:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800608c:	6363      	str	r3, [r4, #52]	@ 0x34
 800608e:	2303      	movs	r3, #3
 8006090:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006092:	4623      	mov	r3, r4
 8006094:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	2301      	movs	r3, #1
 800609c:	e7de      	b.n	800605c <_sungetc_r+0x34>

0800609e <__ssrefill_r>:
 800609e:	b510      	push	{r4, lr}
 80060a0:	460c      	mov	r4, r1
 80060a2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80060a4:	b169      	cbz	r1, 80060c2 <__ssrefill_r+0x24>
 80060a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060aa:	4299      	cmp	r1, r3
 80060ac:	d001      	beq.n	80060b2 <__ssrefill_r+0x14>
 80060ae:	f7ff fd63 	bl	8005b78 <_free_r>
 80060b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060b4:	6063      	str	r3, [r4, #4]
 80060b6:	2000      	movs	r0, #0
 80060b8:	6360      	str	r0, [r4, #52]	@ 0x34
 80060ba:	b113      	cbz	r3, 80060c2 <__ssrefill_r+0x24>
 80060bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	6063      	str	r3, [r4, #4]
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	f043 0320 	orr.w	r3, r3, #32
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
 80060d6:	e7f3      	b.n	80060c0 <__ssrefill_r+0x22>

080060d8 <__ssvfiscanf_r>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	460c      	mov	r4, r1
 80060de:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80060e2:	2100      	movs	r1, #0
 80060e4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80060e8:	49a5      	ldr	r1, [pc, #660]	@ (8006380 <__ssvfiscanf_r+0x2a8>)
 80060ea:	91a0      	str	r1, [sp, #640]	@ 0x280
 80060ec:	f10d 0804 	add.w	r8, sp, #4
 80060f0:	49a4      	ldr	r1, [pc, #656]	@ (8006384 <__ssvfiscanf_r+0x2ac>)
 80060f2:	4fa5      	ldr	r7, [pc, #660]	@ (8006388 <__ssvfiscanf_r+0x2b0>)
 80060f4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80060f8:	4606      	mov	r6, r0
 80060fa:	91a1      	str	r1, [sp, #644]	@ 0x284
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	7813      	ldrb	r3, [r2, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8158 	beq.w	80063b6 <__ssvfiscanf_r+0x2de>
 8006106:	5cf9      	ldrb	r1, [r7, r3]
 8006108:	f011 0108 	ands.w	r1, r1, #8
 800610c:	f102 0501 	add.w	r5, r2, #1
 8006110:	d019      	beq.n	8006146 <__ssvfiscanf_r+0x6e>
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	dd0f      	ble.n	8006138 <__ssvfiscanf_r+0x60>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	5cba      	ldrb	r2, [r7, r2]
 800611e:	0712      	lsls	r2, r2, #28
 8006120:	d401      	bmi.n	8006126 <__ssvfiscanf_r+0x4e>
 8006122:	462a      	mov	r2, r5
 8006124:	e7eb      	b.n	80060fe <__ssvfiscanf_r+0x26>
 8006126:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006128:	3201      	adds	r2, #1
 800612a:	9245      	str	r2, [sp, #276]	@ 0x114
 800612c:	6862      	ldr	r2, [r4, #4]
 800612e:	3301      	adds	r3, #1
 8006130:	3a01      	subs	r2, #1
 8006132:	6062      	str	r2, [r4, #4]
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	e7ec      	b.n	8006112 <__ssvfiscanf_r+0x3a>
 8006138:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800613a:	4621      	mov	r1, r4
 800613c:	4630      	mov	r0, r6
 800613e:	4798      	blx	r3
 8006140:	2800      	cmp	r0, #0
 8006142:	d0e9      	beq.n	8006118 <__ssvfiscanf_r+0x40>
 8006144:	e7ed      	b.n	8006122 <__ssvfiscanf_r+0x4a>
 8006146:	2b25      	cmp	r3, #37	@ 0x25
 8006148:	d012      	beq.n	8006170 <__ssvfiscanf_r+0x98>
 800614a:	4699      	mov	r9, r3
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f340 8093 	ble.w	800627a <__ssvfiscanf_r+0x1a2>
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	7813      	ldrb	r3, [r2, #0]
 8006158:	454b      	cmp	r3, r9
 800615a:	f040 812c 	bne.w	80063b6 <__ssvfiscanf_r+0x2de>
 800615e:	6863      	ldr	r3, [r4, #4]
 8006160:	3b01      	subs	r3, #1
 8006162:	6063      	str	r3, [r4, #4]
 8006164:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006166:	3201      	adds	r2, #1
 8006168:	3301      	adds	r3, #1
 800616a:	6022      	str	r2, [r4, #0]
 800616c:	9345      	str	r3, [sp, #276]	@ 0x114
 800616e:	e7d8      	b.n	8006122 <__ssvfiscanf_r+0x4a>
 8006170:	9141      	str	r1, [sp, #260]	@ 0x104
 8006172:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006174:	7853      	ldrb	r3, [r2, #1]
 8006176:	2b2a      	cmp	r3, #42	@ 0x2a
 8006178:	bf02      	ittt	eq
 800617a:	2310      	moveq	r3, #16
 800617c:	1c95      	addeq	r5, r2, #2
 800617e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006180:	220a      	movs	r2, #10
 8006182:	46a9      	mov	r9, r5
 8006184:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006188:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800618c:	2b09      	cmp	r3, #9
 800618e:	d91e      	bls.n	80061ce <__ssvfiscanf_r+0xf6>
 8006190:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800638c <__ssvfiscanf_r+0x2b4>
 8006194:	2203      	movs	r2, #3
 8006196:	4650      	mov	r0, sl
 8006198:	f7fa f83a 	bl	8000210 <memchr>
 800619c:	b138      	cbz	r0, 80061ae <__ssvfiscanf_r+0xd6>
 800619e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80061a0:	eba0 000a 	sub.w	r0, r0, sl
 80061a4:	2301      	movs	r3, #1
 80061a6:	4083      	lsls	r3, r0
 80061a8:	4313      	orrs	r3, r2
 80061aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80061ac:	464d      	mov	r5, r9
 80061ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061b2:	2b78      	cmp	r3, #120	@ 0x78
 80061b4:	d806      	bhi.n	80061c4 <__ssvfiscanf_r+0xec>
 80061b6:	2b57      	cmp	r3, #87	@ 0x57
 80061b8:	d810      	bhi.n	80061dc <__ssvfiscanf_r+0x104>
 80061ba:	2b25      	cmp	r3, #37	@ 0x25
 80061bc:	d0c5      	beq.n	800614a <__ssvfiscanf_r+0x72>
 80061be:	d857      	bhi.n	8006270 <__ssvfiscanf_r+0x198>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d065      	beq.n	8006290 <__ssvfiscanf_r+0x1b8>
 80061c4:	2303      	movs	r3, #3
 80061c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80061c8:	230a      	movs	r3, #10
 80061ca:	9342      	str	r3, [sp, #264]	@ 0x108
 80061cc:	e078      	b.n	80062c0 <__ssvfiscanf_r+0x1e8>
 80061ce:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80061d0:	fb02 1103 	mla	r1, r2, r3, r1
 80061d4:	3930      	subs	r1, #48	@ 0x30
 80061d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80061d8:	464d      	mov	r5, r9
 80061da:	e7d2      	b.n	8006182 <__ssvfiscanf_r+0xaa>
 80061dc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80061e0:	2a20      	cmp	r2, #32
 80061e2:	d8ef      	bhi.n	80061c4 <__ssvfiscanf_r+0xec>
 80061e4:	a101      	add	r1, pc, #4	@ (adr r1, 80061ec <__ssvfiscanf_r+0x114>)
 80061e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	0800629f 	.word	0x0800629f
 80061f0:	080061c5 	.word	0x080061c5
 80061f4:	080061c5 	.word	0x080061c5
 80061f8:	080062f9 	.word	0x080062f9
 80061fc:	080061c5 	.word	0x080061c5
 8006200:	080061c5 	.word	0x080061c5
 8006204:	080061c5 	.word	0x080061c5
 8006208:	080061c5 	.word	0x080061c5
 800620c:	080061c5 	.word	0x080061c5
 8006210:	080061c5 	.word	0x080061c5
 8006214:	080061c5 	.word	0x080061c5
 8006218:	0800630f 	.word	0x0800630f
 800621c:	080062f5 	.word	0x080062f5
 8006220:	08006277 	.word	0x08006277
 8006224:	08006277 	.word	0x08006277
 8006228:	08006277 	.word	0x08006277
 800622c:	080061c5 	.word	0x080061c5
 8006230:	080062b1 	.word	0x080062b1
 8006234:	080061c5 	.word	0x080061c5
 8006238:	080061c5 	.word	0x080061c5
 800623c:	080061c5 	.word	0x080061c5
 8006240:	080061c5 	.word	0x080061c5
 8006244:	0800631f 	.word	0x0800631f
 8006248:	080062b9 	.word	0x080062b9
 800624c:	08006297 	.word	0x08006297
 8006250:	080061c5 	.word	0x080061c5
 8006254:	080061c5 	.word	0x080061c5
 8006258:	0800631b 	.word	0x0800631b
 800625c:	080061c5 	.word	0x080061c5
 8006260:	080062f5 	.word	0x080062f5
 8006264:	080061c5 	.word	0x080061c5
 8006268:	080061c5 	.word	0x080061c5
 800626c:	0800629f 	.word	0x0800629f
 8006270:	3b45      	subs	r3, #69	@ 0x45
 8006272:	2b02      	cmp	r3, #2
 8006274:	d8a6      	bhi.n	80061c4 <__ssvfiscanf_r+0xec>
 8006276:	2305      	movs	r3, #5
 8006278:	e021      	b.n	80062be <__ssvfiscanf_r+0x1e6>
 800627a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800627c:	4621      	mov	r1, r4
 800627e:	4630      	mov	r0, r6
 8006280:	4798      	blx	r3
 8006282:	2800      	cmp	r0, #0
 8006284:	f43f af66 	beq.w	8006154 <__ssvfiscanf_r+0x7c>
 8006288:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800628a:	2800      	cmp	r0, #0
 800628c:	f040 808b 	bne.w	80063a6 <__ssvfiscanf_r+0x2ce>
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	e08b      	b.n	80063ae <__ssvfiscanf_r+0x2d6>
 8006296:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006298:	f042 0220 	orr.w	r2, r2, #32
 800629c:	9241      	str	r2, [sp, #260]	@ 0x104
 800629e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80062a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a4:	9241      	str	r2, [sp, #260]	@ 0x104
 80062a6:	2210      	movs	r2, #16
 80062a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80062aa:	9242      	str	r2, [sp, #264]	@ 0x108
 80062ac:	d902      	bls.n	80062b4 <__ssvfiscanf_r+0x1dc>
 80062ae:	e005      	b.n	80062bc <__ssvfiscanf_r+0x1e4>
 80062b0:	2300      	movs	r3, #0
 80062b2:	9342      	str	r3, [sp, #264]	@ 0x108
 80062b4:	2303      	movs	r3, #3
 80062b6:	e002      	b.n	80062be <__ssvfiscanf_r+0x1e6>
 80062b8:	2308      	movs	r3, #8
 80062ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80062bc:	2304      	movs	r3, #4
 80062be:	9347      	str	r3, [sp, #284]	@ 0x11c
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	dd39      	ble.n	800633a <__ssvfiscanf_r+0x262>
 80062c6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80062c8:	0659      	lsls	r1, r3, #25
 80062ca:	d404      	bmi.n	80062d6 <__ssvfiscanf_r+0x1fe>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	5cba      	ldrb	r2, [r7, r2]
 80062d2:	0712      	lsls	r2, r2, #28
 80062d4:	d438      	bmi.n	8006348 <__ssvfiscanf_r+0x270>
 80062d6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80062d8:	2b02      	cmp	r3, #2
 80062da:	dc47      	bgt.n	800636c <__ssvfiscanf_r+0x294>
 80062dc:	466b      	mov	r3, sp
 80062de:	4622      	mov	r2, r4
 80062e0:	a941      	add	r1, sp, #260	@ 0x104
 80062e2:	4630      	mov	r0, r6
 80062e4:	f000 fb3c 	bl	8006960 <_scanf_chars>
 80062e8:	2801      	cmp	r0, #1
 80062ea:	d064      	beq.n	80063b6 <__ssvfiscanf_r+0x2de>
 80062ec:	2802      	cmp	r0, #2
 80062ee:	f47f af18 	bne.w	8006122 <__ssvfiscanf_r+0x4a>
 80062f2:	e7c9      	b.n	8006288 <__ssvfiscanf_r+0x1b0>
 80062f4:	220a      	movs	r2, #10
 80062f6:	e7d7      	b.n	80062a8 <__ssvfiscanf_r+0x1d0>
 80062f8:	4629      	mov	r1, r5
 80062fa:	4640      	mov	r0, r8
 80062fc:	f000 fd9e 	bl	8006e3c <__sccl>
 8006300:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006306:	9341      	str	r3, [sp, #260]	@ 0x104
 8006308:	4605      	mov	r5, r0
 800630a:	2301      	movs	r3, #1
 800630c:	e7d7      	b.n	80062be <__ssvfiscanf_r+0x1e6>
 800630e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006314:	9341      	str	r3, [sp, #260]	@ 0x104
 8006316:	2300      	movs	r3, #0
 8006318:	e7d1      	b.n	80062be <__ssvfiscanf_r+0x1e6>
 800631a:	2302      	movs	r3, #2
 800631c:	e7cf      	b.n	80062be <__ssvfiscanf_r+0x1e6>
 800631e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006320:	06c3      	lsls	r3, r0, #27
 8006322:	f53f aefe 	bmi.w	8006122 <__ssvfiscanf_r+0x4a>
 8006326:	9b00      	ldr	r3, [sp, #0]
 8006328:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800632a:	1d19      	adds	r1, r3, #4
 800632c:	9100      	str	r1, [sp, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	07c0      	lsls	r0, r0, #31
 8006332:	bf4c      	ite	mi
 8006334:	801a      	strhmi	r2, [r3, #0]
 8006336:	601a      	strpl	r2, [r3, #0]
 8006338:	e6f3      	b.n	8006122 <__ssvfiscanf_r+0x4a>
 800633a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800633c:	4621      	mov	r1, r4
 800633e:	4630      	mov	r0, r6
 8006340:	4798      	blx	r3
 8006342:	2800      	cmp	r0, #0
 8006344:	d0bf      	beq.n	80062c6 <__ssvfiscanf_r+0x1ee>
 8006346:	e79f      	b.n	8006288 <__ssvfiscanf_r+0x1b0>
 8006348:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800634a:	3201      	adds	r2, #1
 800634c:	9245      	str	r2, [sp, #276]	@ 0x114
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	3a01      	subs	r2, #1
 8006352:	2a00      	cmp	r2, #0
 8006354:	6062      	str	r2, [r4, #4]
 8006356:	dd02      	ble.n	800635e <__ssvfiscanf_r+0x286>
 8006358:	3301      	adds	r3, #1
 800635a:	6023      	str	r3, [r4, #0]
 800635c:	e7b6      	b.n	80062cc <__ssvfiscanf_r+0x1f4>
 800635e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006360:	4621      	mov	r1, r4
 8006362:	4630      	mov	r0, r6
 8006364:	4798      	blx	r3
 8006366:	2800      	cmp	r0, #0
 8006368:	d0b0      	beq.n	80062cc <__ssvfiscanf_r+0x1f4>
 800636a:	e78d      	b.n	8006288 <__ssvfiscanf_r+0x1b0>
 800636c:	2b04      	cmp	r3, #4
 800636e:	dc0f      	bgt.n	8006390 <__ssvfiscanf_r+0x2b8>
 8006370:	466b      	mov	r3, sp
 8006372:	4622      	mov	r2, r4
 8006374:	a941      	add	r1, sp, #260	@ 0x104
 8006376:	4630      	mov	r0, r6
 8006378:	f000 fb4c 	bl	8006a14 <_scanf_i>
 800637c:	e7b4      	b.n	80062e8 <__ssvfiscanf_r+0x210>
 800637e:	bf00      	nop
 8006380:	08006029 	.word	0x08006029
 8006384:	0800609f 	.word	0x0800609f
 8006388:	080073c5 	.word	0x080073c5
 800638c:	08007578 	.word	0x08007578
 8006390:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <__ssvfiscanf_r+0x2e4>)
 8006392:	2b00      	cmp	r3, #0
 8006394:	f43f aec5 	beq.w	8006122 <__ssvfiscanf_r+0x4a>
 8006398:	466b      	mov	r3, sp
 800639a:	4622      	mov	r2, r4
 800639c:	a941      	add	r1, sp, #260	@ 0x104
 800639e:	4630      	mov	r0, r6
 80063a0:	f3af 8000 	nop.w
 80063a4:	e7a0      	b.n	80062e8 <__ssvfiscanf_r+0x210>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	065b      	lsls	r3, r3, #25
 80063aa:	f53f af71 	bmi.w	8006290 <__ssvfiscanf_r+0x1b8>
 80063ae:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80063b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80063b8:	e7f9      	b.n	80063ae <__ssvfiscanf_r+0x2d6>
 80063ba:	bf00      	nop
 80063bc:	00000000 	.word	0x00000000

080063c0 <__sfputc_r>:
 80063c0:	6893      	ldr	r3, [r2, #8]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	b410      	push	{r4}
 80063c8:	6093      	str	r3, [r2, #8]
 80063ca:	da08      	bge.n	80063de <__sfputc_r+0x1e>
 80063cc:	6994      	ldr	r4, [r2, #24]
 80063ce:	42a3      	cmp	r3, r4
 80063d0:	db01      	blt.n	80063d6 <__sfputc_r+0x16>
 80063d2:	290a      	cmp	r1, #10
 80063d4:	d103      	bne.n	80063de <__sfputc_r+0x1e>
 80063d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063da:	f7ff ba3a 	b.w	8005852 <__swbuf_r>
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	1c58      	adds	r0, r3, #1
 80063e2:	6010      	str	r0, [r2, #0]
 80063e4:	7019      	strb	r1, [r3, #0]
 80063e6:	4608      	mov	r0, r1
 80063e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <__sfputs_r>:
 80063ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f0:	4606      	mov	r6, r0
 80063f2:	460f      	mov	r7, r1
 80063f4:	4614      	mov	r4, r2
 80063f6:	18d5      	adds	r5, r2, r3
 80063f8:	42ac      	cmp	r4, r5
 80063fa:	d101      	bne.n	8006400 <__sfputs_r+0x12>
 80063fc:	2000      	movs	r0, #0
 80063fe:	e007      	b.n	8006410 <__sfputs_r+0x22>
 8006400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006404:	463a      	mov	r2, r7
 8006406:	4630      	mov	r0, r6
 8006408:	f7ff ffda 	bl	80063c0 <__sfputc_r>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d1f3      	bne.n	80063f8 <__sfputs_r+0xa>
 8006410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006414 <_vfiprintf_r>:
 8006414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006418:	460d      	mov	r5, r1
 800641a:	b09d      	sub	sp, #116	@ 0x74
 800641c:	4614      	mov	r4, r2
 800641e:	4698      	mov	r8, r3
 8006420:	4606      	mov	r6, r0
 8006422:	b118      	cbz	r0, 800642c <_vfiprintf_r+0x18>
 8006424:	6a03      	ldr	r3, [r0, #32]
 8006426:	b90b      	cbnz	r3, 800642c <_vfiprintf_r+0x18>
 8006428:	f7ff f8aa 	bl	8005580 <__sinit>
 800642c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800642e:	07d9      	lsls	r1, r3, #31
 8006430:	d405      	bmi.n	800643e <_vfiprintf_r+0x2a>
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	059a      	lsls	r2, r3, #22
 8006436:	d402      	bmi.n	800643e <_vfiprintf_r+0x2a>
 8006438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800643a:	f7ff fb74 	bl	8005b26 <__retarget_lock_acquire_recursive>
 800643e:	89ab      	ldrh	r3, [r5, #12]
 8006440:	071b      	lsls	r3, r3, #28
 8006442:	d501      	bpl.n	8006448 <_vfiprintf_r+0x34>
 8006444:	692b      	ldr	r3, [r5, #16]
 8006446:	b99b      	cbnz	r3, 8006470 <_vfiprintf_r+0x5c>
 8006448:	4629      	mov	r1, r5
 800644a:	4630      	mov	r0, r6
 800644c:	f7ff fa40 	bl	80058d0 <__swsetup_r>
 8006450:	b170      	cbz	r0, 8006470 <_vfiprintf_r+0x5c>
 8006452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006454:	07dc      	lsls	r4, r3, #31
 8006456:	d504      	bpl.n	8006462 <_vfiprintf_r+0x4e>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295
 800645c:	b01d      	add	sp, #116	@ 0x74
 800645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006462:	89ab      	ldrh	r3, [r5, #12]
 8006464:	0598      	lsls	r0, r3, #22
 8006466:	d4f7      	bmi.n	8006458 <_vfiprintf_r+0x44>
 8006468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800646a:	f7ff fb5d 	bl	8005b28 <__retarget_lock_release_recursive>
 800646e:	e7f3      	b.n	8006458 <_vfiprintf_r+0x44>
 8006470:	2300      	movs	r3, #0
 8006472:	9309      	str	r3, [sp, #36]	@ 0x24
 8006474:	2320      	movs	r3, #32
 8006476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800647a:	f8cd 800c 	str.w	r8, [sp, #12]
 800647e:	2330      	movs	r3, #48	@ 0x30
 8006480:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006630 <_vfiprintf_r+0x21c>
 8006484:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006488:	f04f 0901 	mov.w	r9, #1
 800648c:	4623      	mov	r3, r4
 800648e:	469a      	mov	sl, r3
 8006490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006494:	b10a      	cbz	r2, 800649a <_vfiprintf_r+0x86>
 8006496:	2a25      	cmp	r2, #37	@ 0x25
 8006498:	d1f9      	bne.n	800648e <_vfiprintf_r+0x7a>
 800649a:	ebba 0b04 	subs.w	fp, sl, r4
 800649e:	d00b      	beq.n	80064b8 <_vfiprintf_r+0xa4>
 80064a0:	465b      	mov	r3, fp
 80064a2:	4622      	mov	r2, r4
 80064a4:	4629      	mov	r1, r5
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ffa1 	bl	80063ee <__sfputs_r>
 80064ac:	3001      	adds	r0, #1
 80064ae:	f000 80a7 	beq.w	8006600 <_vfiprintf_r+0x1ec>
 80064b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064b4:	445a      	add	r2, fp
 80064b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80064b8:	f89a 3000 	ldrb.w	r3, [sl]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 809f 	beq.w	8006600 <_vfiprintf_r+0x1ec>
 80064c2:	2300      	movs	r3, #0
 80064c4:	f04f 32ff 	mov.w	r2, #4294967295
 80064c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064cc:	f10a 0a01 	add.w	sl, sl, #1
 80064d0:	9304      	str	r3, [sp, #16]
 80064d2:	9307      	str	r3, [sp, #28]
 80064d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80064da:	4654      	mov	r4, sl
 80064dc:	2205      	movs	r2, #5
 80064de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e2:	4853      	ldr	r0, [pc, #332]	@ (8006630 <_vfiprintf_r+0x21c>)
 80064e4:	f7f9 fe94 	bl	8000210 <memchr>
 80064e8:	9a04      	ldr	r2, [sp, #16]
 80064ea:	b9d8      	cbnz	r0, 8006524 <_vfiprintf_r+0x110>
 80064ec:	06d1      	lsls	r1, r2, #27
 80064ee:	bf44      	itt	mi
 80064f0:	2320      	movmi	r3, #32
 80064f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064f6:	0713      	lsls	r3, r2, #28
 80064f8:	bf44      	itt	mi
 80064fa:	232b      	movmi	r3, #43	@ 0x2b
 80064fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006500:	f89a 3000 	ldrb.w	r3, [sl]
 8006504:	2b2a      	cmp	r3, #42	@ 0x2a
 8006506:	d015      	beq.n	8006534 <_vfiprintf_r+0x120>
 8006508:	9a07      	ldr	r2, [sp, #28]
 800650a:	4654      	mov	r4, sl
 800650c:	2000      	movs	r0, #0
 800650e:	f04f 0c0a 	mov.w	ip, #10
 8006512:	4621      	mov	r1, r4
 8006514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006518:	3b30      	subs	r3, #48	@ 0x30
 800651a:	2b09      	cmp	r3, #9
 800651c:	d94b      	bls.n	80065b6 <_vfiprintf_r+0x1a2>
 800651e:	b1b0      	cbz	r0, 800654e <_vfiprintf_r+0x13a>
 8006520:	9207      	str	r2, [sp, #28]
 8006522:	e014      	b.n	800654e <_vfiprintf_r+0x13a>
 8006524:	eba0 0308 	sub.w	r3, r0, r8
 8006528:	fa09 f303 	lsl.w	r3, r9, r3
 800652c:	4313      	orrs	r3, r2
 800652e:	9304      	str	r3, [sp, #16]
 8006530:	46a2      	mov	sl, r4
 8006532:	e7d2      	b.n	80064da <_vfiprintf_r+0xc6>
 8006534:	9b03      	ldr	r3, [sp, #12]
 8006536:	1d19      	adds	r1, r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	9103      	str	r1, [sp, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	bfbb      	ittet	lt
 8006540:	425b      	neglt	r3, r3
 8006542:	f042 0202 	orrlt.w	r2, r2, #2
 8006546:	9307      	strge	r3, [sp, #28]
 8006548:	9307      	strlt	r3, [sp, #28]
 800654a:	bfb8      	it	lt
 800654c:	9204      	strlt	r2, [sp, #16]
 800654e:	7823      	ldrb	r3, [r4, #0]
 8006550:	2b2e      	cmp	r3, #46	@ 0x2e
 8006552:	d10a      	bne.n	800656a <_vfiprintf_r+0x156>
 8006554:	7863      	ldrb	r3, [r4, #1]
 8006556:	2b2a      	cmp	r3, #42	@ 0x2a
 8006558:	d132      	bne.n	80065c0 <_vfiprintf_r+0x1ac>
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	1d1a      	adds	r2, r3, #4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	9203      	str	r2, [sp, #12]
 8006562:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006566:	3402      	adds	r4, #2
 8006568:	9305      	str	r3, [sp, #20]
 800656a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006640 <_vfiprintf_r+0x22c>
 800656e:	7821      	ldrb	r1, [r4, #0]
 8006570:	2203      	movs	r2, #3
 8006572:	4650      	mov	r0, sl
 8006574:	f7f9 fe4c 	bl	8000210 <memchr>
 8006578:	b138      	cbz	r0, 800658a <_vfiprintf_r+0x176>
 800657a:	9b04      	ldr	r3, [sp, #16]
 800657c:	eba0 000a 	sub.w	r0, r0, sl
 8006580:	2240      	movs	r2, #64	@ 0x40
 8006582:	4082      	lsls	r2, r0
 8006584:	4313      	orrs	r3, r2
 8006586:	3401      	adds	r4, #1
 8006588:	9304      	str	r3, [sp, #16]
 800658a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658e:	4829      	ldr	r0, [pc, #164]	@ (8006634 <_vfiprintf_r+0x220>)
 8006590:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006594:	2206      	movs	r2, #6
 8006596:	f7f9 fe3b 	bl	8000210 <memchr>
 800659a:	2800      	cmp	r0, #0
 800659c:	d03f      	beq.n	800661e <_vfiprintf_r+0x20a>
 800659e:	4b26      	ldr	r3, [pc, #152]	@ (8006638 <_vfiprintf_r+0x224>)
 80065a0:	bb1b      	cbnz	r3, 80065ea <_vfiprintf_r+0x1d6>
 80065a2:	9b03      	ldr	r3, [sp, #12]
 80065a4:	3307      	adds	r3, #7
 80065a6:	f023 0307 	bic.w	r3, r3, #7
 80065aa:	3308      	adds	r3, #8
 80065ac:	9303      	str	r3, [sp, #12]
 80065ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b0:	443b      	add	r3, r7
 80065b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80065b4:	e76a      	b.n	800648c <_vfiprintf_r+0x78>
 80065b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80065ba:	460c      	mov	r4, r1
 80065bc:	2001      	movs	r0, #1
 80065be:	e7a8      	b.n	8006512 <_vfiprintf_r+0xfe>
 80065c0:	2300      	movs	r3, #0
 80065c2:	3401      	adds	r4, #1
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	4619      	mov	r1, r3
 80065c8:	f04f 0c0a 	mov.w	ip, #10
 80065cc:	4620      	mov	r0, r4
 80065ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065d2:	3a30      	subs	r2, #48	@ 0x30
 80065d4:	2a09      	cmp	r2, #9
 80065d6:	d903      	bls.n	80065e0 <_vfiprintf_r+0x1cc>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0c6      	beq.n	800656a <_vfiprintf_r+0x156>
 80065dc:	9105      	str	r1, [sp, #20]
 80065de:	e7c4      	b.n	800656a <_vfiprintf_r+0x156>
 80065e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80065e4:	4604      	mov	r4, r0
 80065e6:	2301      	movs	r3, #1
 80065e8:	e7f0      	b.n	80065cc <_vfiprintf_r+0x1b8>
 80065ea:	ab03      	add	r3, sp, #12
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	462a      	mov	r2, r5
 80065f0:	4b12      	ldr	r3, [pc, #72]	@ (800663c <_vfiprintf_r+0x228>)
 80065f2:	a904      	add	r1, sp, #16
 80065f4:	4630      	mov	r0, r6
 80065f6:	f3af 8000 	nop.w
 80065fa:	4607      	mov	r7, r0
 80065fc:	1c78      	adds	r0, r7, #1
 80065fe:	d1d6      	bne.n	80065ae <_vfiprintf_r+0x19a>
 8006600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006602:	07d9      	lsls	r1, r3, #31
 8006604:	d405      	bmi.n	8006612 <_vfiprintf_r+0x1fe>
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	059a      	lsls	r2, r3, #22
 800660a:	d402      	bmi.n	8006612 <_vfiprintf_r+0x1fe>
 800660c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800660e:	f7ff fa8b 	bl	8005b28 <__retarget_lock_release_recursive>
 8006612:	89ab      	ldrh	r3, [r5, #12]
 8006614:	065b      	lsls	r3, r3, #25
 8006616:	f53f af1f 	bmi.w	8006458 <_vfiprintf_r+0x44>
 800661a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800661c:	e71e      	b.n	800645c <_vfiprintf_r+0x48>
 800661e:	ab03      	add	r3, sp, #12
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	462a      	mov	r2, r5
 8006624:	4b05      	ldr	r3, [pc, #20]	@ (800663c <_vfiprintf_r+0x228>)
 8006626:	a904      	add	r1, sp, #16
 8006628:	4630      	mov	r0, r6
 800662a:	f000 f879 	bl	8006720 <_printf_i>
 800662e:	e7e4      	b.n	80065fa <_vfiprintf_r+0x1e6>
 8006630:	08007572 	.word	0x08007572
 8006634:	0800757c 	.word	0x0800757c
 8006638:	00000000 	.word	0x00000000
 800663c:	080063ef 	.word	0x080063ef
 8006640:	08007578 	.word	0x08007578

08006644 <_printf_common>:
 8006644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	4616      	mov	r6, r2
 800664a:	4698      	mov	r8, r3
 800664c:	688a      	ldr	r2, [r1, #8]
 800664e:	690b      	ldr	r3, [r1, #16]
 8006650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006654:	4293      	cmp	r3, r2
 8006656:	bfb8      	it	lt
 8006658:	4613      	movlt	r3, r2
 800665a:	6033      	str	r3, [r6, #0]
 800665c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006660:	4607      	mov	r7, r0
 8006662:	460c      	mov	r4, r1
 8006664:	b10a      	cbz	r2, 800666a <_printf_common+0x26>
 8006666:	3301      	adds	r3, #1
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	0699      	lsls	r1, r3, #26
 800666e:	bf42      	ittt	mi
 8006670:	6833      	ldrmi	r3, [r6, #0]
 8006672:	3302      	addmi	r3, #2
 8006674:	6033      	strmi	r3, [r6, #0]
 8006676:	6825      	ldr	r5, [r4, #0]
 8006678:	f015 0506 	ands.w	r5, r5, #6
 800667c:	d106      	bne.n	800668c <_printf_common+0x48>
 800667e:	f104 0a19 	add.w	sl, r4, #25
 8006682:	68e3      	ldr	r3, [r4, #12]
 8006684:	6832      	ldr	r2, [r6, #0]
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	42ab      	cmp	r3, r5
 800668a:	dc26      	bgt.n	80066da <_printf_common+0x96>
 800668c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	3b00      	subs	r3, #0
 8006694:	bf18      	it	ne
 8006696:	2301      	movne	r3, #1
 8006698:	0692      	lsls	r2, r2, #26
 800669a:	d42b      	bmi.n	80066f4 <_printf_common+0xb0>
 800669c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066a0:	4641      	mov	r1, r8
 80066a2:	4638      	mov	r0, r7
 80066a4:	47c8      	blx	r9
 80066a6:	3001      	adds	r0, #1
 80066a8:	d01e      	beq.n	80066e8 <_printf_common+0xa4>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	6922      	ldr	r2, [r4, #16]
 80066ae:	f003 0306 	and.w	r3, r3, #6
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	bf02      	ittt	eq
 80066b6:	68e5      	ldreq	r5, [r4, #12]
 80066b8:	6833      	ldreq	r3, [r6, #0]
 80066ba:	1aed      	subeq	r5, r5, r3
 80066bc:	68a3      	ldr	r3, [r4, #8]
 80066be:	bf0c      	ite	eq
 80066c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066c4:	2500      	movne	r5, #0
 80066c6:	4293      	cmp	r3, r2
 80066c8:	bfc4      	itt	gt
 80066ca:	1a9b      	subgt	r3, r3, r2
 80066cc:	18ed      	addgt	r5, r5, r3
 80066ce:	2600      	movs	r6, #0
 80066d0:	341a      	adds	r4, #26
 80066d2:	42b5      	cmp	r5, r6
 80066d4:	d11a      	bne.n	800670c <_printf_common+0xc8>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e008      	b.n	80066ec <_printf_common+0xa8>
 80066da:	2301      	movs	r3, #1
 80066dc:	4652      	mov	r2, sl
 80066de:	4641      	mov	r1, r8
 80066e0:	4638      	mov	r0, r7
 80066e2:	47c8      	blx	r9
 80066e4:	3001      	adds	r0, #1
 80066e6:	d103      	bne.n	80066f0 <_printf_common+0xac>
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f0:	3501      	adds	r5, #1
 80066f2:	e7c6      	b.n	8006682 <_printf_common+0x3e>
 80066f4:	18e1      	adds	r1, r4, r3
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	2030      	movs	r0, #48	@ 0x30
 80066fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066fe:	4422      	add	r2, r4
 8006700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006708:	3302      	adds	r3, #2
 800670a:	e7c7      	b.n	800669c <_printf_common+0x58>
 800670c:	2301      	movs	r3, #1
 800670e:	4622      	mov	r2, r4
 8006710:	4641      	mov	r1, r8
 8006712:	4638      	mov	r0, r7
 8006714:	47c8      	blx	r9
 8006716:	3001      	adds	r0, #1
 8006718:	d0e6      	beq.n	80066e8 <_printf_common+0xa4>
 800671a:	3601      	adds	r6, #1
 800671c:	e7d9      	b.n	80066d2 <_printf_common+0x8e>
	...

08006720 <_printf_i>:
 8006720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	7e0f      	ldrb	r7, [r1, #24]
 8006726:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006728:	2f78      	cmp	r7, #120	@ 0x78
 800672a:	4691      	mov	r9, r2
 800672c:	4680      	mov	r8, r0
 800672e:	460c      	mov	r4, r1
 8006730:	469a      	mov	sl, r3
 8006732:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006736:	d807      	bhi.n	8006748 <_printf_i+0x28>
 8006738:	2f62      	cmp	r7, #98	@ 0x62
 800673a:	d80a      	bhi.n	8006752 <_printf_i+0x32>
 800673c:	2f00      	cmp	r7, #0
 800673e:	f000 80d2 	beq.w	80068e6 <_printf_i+0x1c6>
 8006742:	2f58      	cmp	r7, #88	@ 0x58
 8006744:	f000 80b9 	beq.w	80068ba <_printf_i+0x19a>
 8006748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800674c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006750:	e03a      	b.n	80067c8 <_printf_i+0xa8>
 8006752:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006756:	2b15      	cmp	r3, #21
 8006758:	d8f6      	bhi.n	8006748 <_printf_i+0x28>
 800675a:	a101      	add	r1, pc, #4	@ (adr r1, 8006760 <_printf_i+0x40>)
 800675c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006760:	080067b9 	.word	0x080067b9
 8006764:	080067cd 	.word	0x080067cd
 8006768:	08006749 	.word	0x08006749
 800676c:	08006749 	.word	0x08006749
 8006770:	08006749 	.word	0x08006749
 8006774:	08006749 	.word	0x08006749
 8006778:	080067cd 	.word	0x080067cd
 800677c:	08006749 	.word	0x08006749
 8006780:	08006749 	.word	0x08006749
 8006784:	08006749 	.word	0x08006749
 8006788:	08006749 	.word	0x08006749
 800678c:	080068cd 	.word	0x080068cd
 8006790:	080067f7 	.word	0x080067f7
 8006794:	08006887 	.word	0x08006887
 8006798:	08006749 	.word	0x08006749
 800679c:	08006749 	.word	0x08006749
 80067a0:	080068ef 	.word	0x080068ef
 80067a4:	08006749 	.word	0x08006749
 80067a8:	080067f7 	.word	0x080067f7
 80067ac:	08006749 	.word	0x08006749
 80067b0:	08006749 	.word	0x08006749
 80067b4:	0800688f 	.word	0x0800688f
 80067b8:	6833      	ldr	r3, [r6, #0]
 80067ba:	1d1a      	adds	r2, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6032      	str	r2, [r6, #0]
 80067c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067c8:	2301      	movs	r3, #1
 80067ca:	e09d      	b.n	8006908 <_printf_i+0x1e8>
 80067cc:	6833      	ldr	r3, [r6, #0]
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	1d19      	adds	r1, r3, #4
 80067d2:	6031      	str	r1, [r6, #0]
 80067d4:	0606      	lsls	r6, r0, #24
 80067d6:	d501      	bpl.n	80067dc <_printf_i+0xbc>
 80067d8:	681d      	ldr	r5, [r3, #0]
 80067da:	e003      	b.n	80067e4 <_printf_i+0xc4>
 80067dc:	0645      	lsls	r5, r0, #25
 80067de:	d5fb      	bpl.n	80067d8 <_printf_i+0xb8>
 80067e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067e4:	2d00      	cmp	r5, #0
 80067e6:	da03      	bge.n	80067f0 <_printf_i+0xd0>
 80067e8:	232d      	movs	r3, #45	@ 0x2d
 80067ea:	426d      	negs	r5, r5
 80067ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f0:	4859      	ldr	r0, [pc, #356]	@ (8006958 <_printf_i+0x238>)
 80067f2:	230a      	movs	r3, #10
 80067f4:	e011      	b.n	800681a <_printf_i+0xfa>
 80067f6:	6821      	ldr	r1, [r4, #0]
 80067f8:	6833      	ldr	r3, [r6, #0]
 80067fa:	0608      	lsls	r0, r1, #24
 80067fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006800:	d402      	bmi.n	8006808 <_printf_i+0xe8>
 8006802:	0649      	lsls	r1, r1, #25
 8006804:	bf48      	it	mi
 8006806:	b2ad      	uxthmi	r5, r5
 8006808:	2f6f      	cmp	r7, #111	@ 0x6f
 800680a:	4853      	ldr	r0, [pc, #332]	@ (8006958 <_printf_i+0x238>)
 800680c:	6033      	str	r3, [r6, #0]
 800680e:	bf14      	ite	ne
 8006810:	230a      	movne	r3, #10
 8006812:	2308      	moveq	r3, #8
 8006814:	2100      	movs	r1, #0
 8006816:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800681a:	6866      	ldr	r6, [r4, #4]
 800681c:	60a6      	str	r6, [r4, #8]
 800681e:	2e00      	cmp	r6, #0
 8006820:	bfa2      	ittt	ge
 8006822:	6821      	ldrge	r1, [r4, #0]
 8006824:	f021 0104 	bicge.w	r1, r1, #4
 8006828:	6021      	strge	r1, [r4, #0]
 800682a:	b90d      	cbnz	r5, 8006830 <_printf_i+0x110>
 800682c:	2e00      	cmp	r6, #0
 800682e:	d04b      	beq.n	80068c8 <_printf_i+0x1a8>
 8006830:	4616      	mov	r6, r2
 8006832:	fbb5 f1f3 	udiv	r1, r5, r3
 8006836:	fb03 5711 	mls	r7, r3, r1, r5
 800683a:	5dc7      	ldrb	r7, [r0, r7]
 800683c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006840:	462f      	mov	r7, r5
 8006842:	42bb      	cmp	r3, r7
 8006844:	460d      	mov	r5, r1
 8006846:	d9f4      	bls.n	8006832 <_printf_i+0x112>
 8006848:	2b08      	cmp	r3, #8
 800684a:	d10b      	bne.n	8006864 <_printf_i+0x144>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	07df      	lsls	r7, r3, #31
 8006850:	d508      	bpl.n	8006864 <_printf_i+0x144>
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	6861      	ldr	r1, [r4, #4]
 8006856:	4299      	cmp	r1, r3
 8006858:	bfde      	ittt	le
 800685a:	2330      	movle	r3, #48	@ 0x30
 800685c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006860:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006864:	1b92      	subs	r2, r2, r6
 8006866:	6122      	str	r2, [r4, #16]
 8006868:	f8cd a000 	str.w	sl, [sp]
 800686c:	464b      	mov	r3, r9
 800686e:	aa03      	add	r2, sp, #12
 8006870:	4621      	mov	r1, r4
 8006872:	4640      	mov	r0, r8
 8006874:	f7ff fee6 	bl	8006644 <_printf_common>
 8006878:	3001      	adds	r0, #1
 800687a:	d14a      	bne.n	8006912 <_printf_i+0x1f2>
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	b004      	add	sp, #16
 8006882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f043 0320 	orr.w	r3, r3, #32
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	4833      	ldr	r0, [pc, #204]	@ (800695c <_printf_i+0x23c>)
 8006890:	2778      	movs	r7, #120	@ 0x78
 8006892:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	6831      	ldr	r1, [r6, #0]
 800689a:	061f      	lsls	r7, r3, #24
 800689c:	f851 5b04 	ldr.w	r5, [r1], #4
 80068a0:	d402      	bmi.n	80068a8 <_printf_i+0x188>
 80068a2:	065f      	lsls	r7, r3, #25
 80068a4:	bf48      	it	mi
 80068a6:	b2ad      	uxthmi	r5, r5
 80068a8:	6031      	str	r1, [r6, #0]
 80068aa:	07d9      	lsls	r1, r3, #31
 80068ac:	bf44      	itt	mi
 80068ae:	f043 0320 	orrmi.w	r3, r3, #32
 80068b2:	6023      	strmi	r3, [r4, #0]
 80068b4:	b11d      	cbz	r5, 80068be <_printf_i+0x19e>
 80068b6:	2310      	movs	r3, #16
 80068b8:	e7ac      	b.n	8006814 <_printf_i+0xf4>
 80068ba:	4827      	ldr	r0, [pc, #156]	@ (8006958 <_printf_i+0x238>)
 80068bc:	e7e9      	b.n	8006892 <_printf_i+0x172>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	f023 0320 	bic.w	r3, r3, #32
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	e7f6      	b.n	80068b6 <_printf_i+0x196>
 80068c8:	4616      	mov	r6, r2
 80068ca:	e7bd      	b.n	8006848 <_printf_i+0x128>
 80068cc:	6833      	ldr	r3, [r6, #0]
 80068ce:	6825      	ldr	r5, [r4, #0]
 80068d0:	6961      	ldr	r1, [r4, #20]
 80068d2:	1d18      	adds	r0, r3, #4
 80068d4:	6030      	str	r0, [r6, #0]
 80068d6:	062e      	lsls	r6, r5, #24
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	d501      	bpl.n	80068e0 <_printf_i+0x1c0>
 80068dc:	6019      	str	r1, [r3, #0]
 80068de:	e002      	b.n	80068e6 <_printf_i+0x1c6>
 80068e0:	0668      	lsls	r0, r5, #25
 80068e2:	d5fb      	bpl.n	80068dc <_printf_i+0x1bc>
 80068e4:	8019      	strh	r1, [r3, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	6123      	str	r3, [r4, #16]
 80068ea:	4616      	mov	r6, r2
 80068ec:	e7bc      	b.n	8006868 <_printf_i+0x148>
 80068ee:	6833      	ldr	r3, [r6, #0]
 80068f0:	1d1a      	adds	r2, r3, #4
 80068f2:	6032      	str	r2, [r6, #0]
 80068f4:	681e      	ldr	r6, [r3, #0]
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	2100      	movs	r1, #0
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7f9 fc88 	bl	8000210 <memchr>
 8006900:	b108      	cbz	r0, 8006906 <_printf_i+0x1e6>
 8006902:	1b80      	subs	r0, r0, r6
 8006904:	6060      	str	r0, [r4, #4]
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	2300      	movs	r3, #0
 800690c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006910:	e7aa      	b.n	8006868 <_printf_i+0x148>
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	4632      	mov	r2, r6
 8006916:	4649      	mov	r1, r9
 8006918:	4640      	mov	r0, r8
 800691a:	47d0      	blx	sl
 800691c:	3001      	adds	r0, #1
 800691e:	d0ad      	beq.n	800687c <_printf_i+0x15c>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	079b      	lsls	r3, r3, #30
 8006924:	d413      	bmi.n	800694e <_printf_i+0x22e>
 8006926:	68e0      	ldr	r0, [r4, #12]
 8006928:	9b03      	ldr	r3, [sp, #12]
 800692a:	4298      	cmp	r0, r3
 800692c:	bfb8      	it	lt
 800692e:	4618      	movlt	r0, r3
 8006930:	e7a6      	b.n	8006880 <_printf_i+0x160>
 8006932:	2301      	movs	r3, #1
 8006934:	4632      	mov	r2, r6
 8006936:	4649      	mov	r1, r9
 8006938:	4640      	mov	r0, r8
 800693a:	47d0      	blx	sl
 800693c:	3001      	adds	r0, #1
 800693e:	d09d      	beq.n	800687c <_printf_i+0x15c>
 8006940:	3501      	adds	r5, #1
 8006942:	68e3      	ldr	r3, [r4, #12]
 8006944:	9903      	ldr	r1, [sp, #12]
 8006946:	1a5b      	subs	r3, r3, r1
 8006948:	42ab      	cmp	r3, r5
 800694a:	dcf2      	bgt.n	8006932 <_printf_i+0x212>
 800694c:	e7eb      	b.n	8006926 <_printf_i+0x206>
 800694e:	2500      	movs	r5, #0
 8006950:	f104 0619 	add.w	r6, r4, #25
 8006954:	e7f5      	b.n	8006942 <_printf_i+0x222>
 8006956:	bf00      	nop
 8006958:	08007583 	.word	0x08007583
 800695c:	08007594 	.word	0x08007594

08006960 <_scanf_chars>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	4615      	mov	r5, r2
 8006966:	688a      	ldr	r2, [r1, #8]
 8006968:	4680      	mov	r8, r0
 800696a:	460c      	mov	r4, r1
 800696c:	b932      	cbnz	r2, 800697c <_scanf_chars+0x1c>
 800696e:	698a      	ldr	r2, [r1, #24]
 8006970:	2a00      	cmp	r2, #0
 8006972:	bf14      	ite	ne
 8006974:	f04f 32ff 	movne.w	r2, #4294967295
 8006978:	2201      	moveq	r2, #1
 800697a:	608a      	str	r2, [r1, #8]
 800697c:	6822      	ldr	r2, [r4, #0]
 800697e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006a10 <_scanf_chars+0xb0>
 8006982:	06d1      	lsls	r1, r2, #27
 8006984:	bf5f      	itttt	pl
 8006986:	681a      	ldrpl	r2, [r3, #0]
 8006988:	1d11      	addpl	r1, r2, #4
 800698a:	6019      	strpl	r1, [r3, #0]
 800698c:	6816      	ldrpl	r6, [r2, #0]
 800698e:	2700      	movs	r7, #0
 8006990:	69a0      	ldr	r0, [r4, #24]
 8006992:	b188      	cbz	r0, 80069b8 <_scanf_chars+0x58>
 8006994:	2801      	cmp	r0, #1
 8006996:	d107      	bne.n	80069a8 <_scanf_chars+0x48>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	6963      	ldr	r3, [r4, #20]
 800699e:	5c9b      	ldrb	r3, [r3, r2]
 80069a0:	b953      	cbnz	r3, 80069b8 <_scanf_chars+0x58>
 80069a2:	2f00      	cmp	r7, #0
 80069a4:	d031      	beq.n	8006a0a <_scanf_chars+0xaa>
 80069a6:	e022      	b.n	80069ee <_scanf_chars+0x8e>
 80069a8:	2802      	cmp	r0, #2
 80069aa:	d120      	bne.n	80069ee <_scanf_chars+0x8e>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80069b4:	071b      	lsls	r3, r3, #28
 80069b6:	d41a      	bmi.n	80069ee <_scanf_chars+0x8e>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	06da      	lsls	r2, r3, #27
 80069bc:	bf5e      	ittt	pl
 80069be:	682b      	ldrpl	r3, [r5, #0]
 80069c0:	781b      	ldrbpl	r3, [r3, #0]
 80069c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80069c6:	682a      	ldr	r2, [r5, #0]
 80069c8:	686b      	ldr	r3, [r5, #4]
 80069ca:	3201      	adds	r2, #1
 80069cc:	602a      	str	r2, [r5, #0]
 80069ce:	68a2      	ldr	r2, [r4, #8]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	3a01      	subs	r2, #1
 80069d4:	606b      	str	r3, [r5, #4]
 80069d6:	3701      	adds	r7, #1
 80069d8:	60a2      	str	r2, [r4, #8]
 80069da:	b142      	cbz	r2, 80069ee <_scanf_chars+0x8e>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	dcd7      	bgt.n	8006990 <_scanf_chars+0x30>
 80069e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80069e4:	4629      	mov	r1, r5
 80069e6:	4640      	mov	r0, r8
 80069e8:	4798      	blx	r3
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d0d0      	beq.n	8006990 <_scanf_chars+0x30>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	f013 0310 	ands.w	r3, r3, #16
 80069f4:	d105      	bne.n	8006a02 <_scanf_chars+0xa2>
 80069f6:	68e2      	ldr	r2, [r4, #12]
 80069f8:	3201      	adds	r2, #1
 80069fa:	60e2      	str	r2, [r4, #12]
 80069fc:	69a2      	ldr	r2, [r4, #24]
 80069fe:	b102      	cbz	r2, 8006a02 <_scanf_chars+0xa2>
 8006a00:	7033      	strb	r3, [r6, #0]
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	443b      	add	r3, r7
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	bf00      	nop
 8006a10:	080073c5 	.word	0x080073c5

08006a14 <_scanf_i>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	4698      	mov	r8, r3
 8006a1a:	4b74      	ldr	r3, [pc, #464]	@ (8006bec <_scanf_i+0x1d8>)
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	4682      	mov	sl, r0
 8006a20:	4616      	mov	r6, r2
 8006a22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a26:	b087      	sub	sp, #28
 8006a28:	ab03      	add	r3, sp, #12
 8006a2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006a2e:	4b70      	ldr	r3, [pc, #448]	@ (8006bf0 <_scanf_i+0x1dc>)
 8006a30:	69a1      	ldr	r1, [r4, #24]
 8006a32:	4a70      	ldr	r2, [pc, #448]	@ (8006bf4 <_scanf_i+0x1e0>)
 8006a34:	2903      	cmp	r1, #3
 8006a36:	bf08      	it	eq
 8006a38:	461a      	moveq	r2, r3
 8006a3a:	68a3      	ldr	r3, [r4, #8]
 8006a3c:	9201      	str	r2, [sp, #4]
 8006a3e:	1e5a      	subs	r2, r3, #1
 8006a40:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006a44:	bf88      	it	hi
 8006a46:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006a4a:	4627      	mov	r7, r4
 8006a4c:	bf82      	ittt	hi
 8006a4e:	eb03 0905 	addhi.w	r9, r3, r5
 8006a52:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006a56:	60a3      	strhi	r3, [r4, #8]
 8006a58:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006a5c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006a60:	bf98      	it	ls
 8006a62:	f04f 0900 	movls.w	r9, #0
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	463d      	mov	r5, r7
 8006a6a:	f04f 0b00 	mov.w	fp, #0
 8006a6e:	6831      	ldr	r1, [r6, #0]
 8006a70:	ab03      	add	r3, sp, #12
 8006a72:	7809      	ldrb	r1, [r1, #0]
 8006a74:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	f7f9 fbc9 	bl	8000210 <memchr>
 8006a7e:	b328      	cbz	r0, 8006acc <_scanf_i+0xb8>
 8006a80:	f1bb 0f01 	cmp.w	fp, #1
 8006a84:	d159      	bne.n	8006b3a <_scanf_i+0x126>
 8006a86:	6862      	ldr	r2, [r4, #4]
 8006a88:	b92a      	cbnz	r2, 8006a96 <_scanf_i+0x82>
 8006a8a:	6822      	ldr	r2, [r4, #0]
 8006a8c:	2108      	movs	r1, #8
 8006a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a92:	6061      	str	r1, [r4, #4]
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006a9c:	6022      	str	r2, [r4, #0]
 8006a9e:	68a2      	ldr	r2, [r4, #8]
 8006aa0:	1e51      	subs	r1, r2, #1
 8006aa2:	60a1      	str	r1, [r4, #8]
 8006aa4:	b192      	cbz	r2, 8006acc <_scanf_i+0xb8>
 8006aa6:	6832      	ldr	r2, [r6, #0]
 8006aa8:	1c51      	adds	r1, r2, #1
 8006aaa:	6031      	str	r1, [r6, #0]
 8006aac:	7812      	ldrb	r2, [r2, #0]
 8006aae:	f805 2b01 	strb.w	r2, [r5], #1
 8006ab2:	6872      	ldr	r2, [r6, #4]
 8006ab4:	3a01      	subs	r2, #1
 8006ab6:	2a00      	cmp	r2, #0
 8006ab8:	6072      	str	r2, [r6, #4]
 8006aba:	dc07      	bgt.n	8006acc <_scanf_i+0xb8>
 8006abc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	4790      	blx	r2
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f040 8085 	bne.w	8006bd6 <_scanf_i+0x1c2>
 8006acc:	f10b 0b01 	add.w	fp, fp, #1
 8006ad0:	f1bb 0f03 	cmp.w	fp, #3
 8006ad4:	d1cb      	bne.n	8006a6e <_scanf_i+0x5a>
 8006ad6:	6863      	ldr	r3, [r4, #4]
 8006ad8:	b90b      	cbnz	r3, 8006ade <_scanf_i+0xca>
 8006ada:	230a      	movs	r3, #10
 8006adc:	6063      	str	r3, [r4, #4]
 8006ade:	6863      	ldr	r3, [r4, #4]
 8006ae0:	4945      	ldr	r1, [pc, #276]	@ (8006bf8 <_scanf_i+0x1e4>)
 8006ae2:	6960      	ldr	r0, [r4, #20]
 8006ae4:	1ac9      	subs	r1, r1, r3
 8006ae6:	f000 f9a9 	bl	8006e3c <__sccl>
 8006aea:	f04f 0b00 	mov.w	fp, #0
 8006aee:	68a3      	ldr	r3, [r4, #8]
 8006af0:	6822      	ldr	r2, [r4, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d03d      	beq.n	8006b72 <_scanf_i+0x15e>
 8006af6:	6831      	ldr	r1, [r6, #0]
 8006af8:	6960      	ldr	r0, [r4, #20]
 8006afa:	f891 c000 	ldrb.w	ip, [r1]
 8006afe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d035      	beq.n	8006b72 <_scanf_i+0x15e>
 8006b06:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006b0a:	d124      	bne.n	8006b56 <_scanf_i+0x142>
 8006b0c:	0510      	lsls	r0, r2, #20
 8006b0e:	d522      	bpl.n	8006b56 <_scanf_i+0x142>
 8006b10:	f10b 0b01 	add.w	fp, fp, #1
 8006b14:	f1b9 0f00 	cmp.w	r9, #0
 8006b18:	d003      	beq.n	8006b22 <_scanf_i+0x10e>
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8006b20:	60a3      	str	r3, [r4, #8]
 8006b22:	6873      	ldr	r3, [r6, #4]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	6073      	str	r3, [r6, #4]
 8006b2a:	dd1b      	ble.n	8006b64 <_scanf_i+0x150>
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	60a3      	str	r3, [r4, #8]
 8006b38:	e7d9      	b.n	8006aee <_scanf_i+0xda>
 8006b3a:	f1bb 0f02 	cmp.w	fp, #2
 8006b3e:	d1ae      	bne.n	8006a9e <_scanf_i+0x8a>
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006b46:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006b4a:	d1bf      	bne.n	8006acc <_scanf_i+0xb8>
 8006b4c:	2110      	movs	r1, #16
 8006b4e:	6061      	str	r1, [r4, #4]
 8006b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b54:	e7a2      	b.n	8006a9c <_scanf_i+0x88>
 8006b56:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006b5a:	6022      	str	r2, [r4, #0]
 8006b5c:	780b      	ldrb	r3, [r1, #0]
 8006b5e:	f805 3b01 	strb.w	r3, [r5], #1
 8006b62:	e7de      	b.n	8006b22 <_scanf_i+0x10e>
 8006b64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	4798      	blx	r3
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d0df      	beq.n	8006b32 <_scanf_i+0x11e>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	05d9      	lsls	r1, r3, #23
 8006b76:	d50d      	bpl.n	8006b94 <_scanf_i+0x180>
 8006b78:	42bd      	cmp	r5, r7
 8006b7a:	d909      	bls.n	8006b90 <_scanf_i+0x17c>
 8006b7c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006b80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b84:	4632      	mov	r2, r6
 8006b86:	4650      	mov	r0, sl
 8006b88:	4798      	blx	r3
 8006b8a:	f105 39ff 	add.w	r9, r5, #4294967295
 8006b8e:	464d      	mov	r5, r9
 8006b90:	42bd      	cmp	r5, r7
 8006b92:	d028      	beq.n	8006be6 <_scanf_i+0x1d2>
 8006b94:	6822      	ldr	r2, [r4, #0]
 8006b96:	f012 0210 	ands.w	r2, r2, #16
 8006b9a:	d113      	bne.n	8006bc4 <_scanf_i+0x1b0>
 8006b9c:	702a      	strb	r2, [r5, #0]
 8006b9e:	6863      	ldr	r3, [r4, #4]
 8006ba0:	9e01      	ldr	r6, [sp, #4]
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	47b0      	blx	r6
 8006ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bac:	6821      	ldr	r1, [r4, #0]
 8006bae:	1d1a      	adds	r2, r3, #4
 8006bb0:	f8c8 2000 	str.w	r2, [r8]
 8006bb4:	f011 0f20 	tst.w	r1, #32
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	d00f      	beq.n	8006bdc <_scanf_i+0x1c8>
 8006bbc:	6018      	str	r0, [r3, #0]
 8006bbe:	68e3      	ldr	r3, [r4, #12]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	60e3      	str	r3, [r4, #12]
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	1bed      	subs	r5, r5, r7
 8006bc8:	445d      	add	r5, fp
 8006bca:	442b      	add	r3, r5
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	2000      	movs	r0, #0
 8006bd0:	b007      	add	sp, #28
 8006bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd6:	f04f 0b00 	mov.w	fp, #0
 8006bda:	e7ca      	b.n	8006b72 <_scanf_i+0x15e>
 8006bdc:	07ca      	lsls	r2, r1, #31
 8006bde:	bf4c      	ite	mi
 8006be0:	8018      	strhmi	r0, [r3, #0]
 8006be2:	6018      	strpl	r0, [r3, #0]
 8006be4:	e7eb      	b.n	8006bbe <_scanf_i+0x1aa>
 8006be6:	2001      	movs	r0, #1
 8006be8:	e7f2      	b.n	8006bd0 <_scanf_i+0x1bc>
 8006bea:	bf00      	nop
 8006bec:	080073a0 	.word	0x080073a0
 8006bf0:	08005451 	.word	0x08005451
 8006bf4:	08007121 	.word	0x08007121
 8006bf8:	080075b5 	.word	0x080075b5

08006bfc <__sflush_r>:
 8006bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	0716      	lsls	r6, r2, #28
 8006c06:	4605      	mov	r5, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	d454      	bmi.n	8006cb6 <__sflush_r+0xba>
 8006c0c:	684b      	ldr	r3, [r1, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	dc02      	bgt.n	8006c18 <__sflush_r+0x1c>
 8006c12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dd48      	ble.n	8006caa <__sflush_r+0xae>
 8006c18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	d045      	beq.n	8006caa <__sflush_r+0xae>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c24:	682f      	ldr	r7, [r5, #0]
 8006c26:	6a21      	ldr	r1, [r4, #32]
 8006c28:	602b      	str	r3, [r5, #0]
 8006c2a:	d030      	beq.n	8006c8e <__sflush_r+0x92>
 8006c2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	0759      	lsls	r1, r3, #29
 8006c32:	d505      	bpl.n	8006c40 <__sflush_r+0x44>
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c3a:	b10b      	cbz	r3, 8006c40 <__sflush_r+0x44>
 8006c3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c3e:	1ad2      	subs	r2, r2, r3
 8006c40:	2300      	movs	r3, #0
 8006c42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c44:	6a21      	ldr	r1, [r4, #32]
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b0      	blx	r6
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	d106      	bne.n	8006c5e <__sflush_r+0x62>
 8006c50:	6829      	ldr	r1, [r5, #0]
 8006c52:	291d      	cmp	r1, #29
 8006c54:	d82b      	bhi.n	8006cae <__sflush_r+0xb2>
 8006c56:	4a2a      	ldr	r2, [pc, #168]	@ (8006d00 <__sflush_r+0x104>)
 8006c58:	410a      	asrs	r2, r1
 8006c5a:	07d6      	lsls	r6, r2, #31
 8006c5c:	d427      	bmi.n	8006cae <__sflush_r+0xb2>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	6062      	str	r2, [r4, #4]
 8006c62:	04d9      	lsls	r1, r3, #19
 8006c64:	6922      	ldr	r2, [r4, #16]
 8006c66:	6022      	str	r2, [r4, #0]
 8006c68:	d504      	bpl.n	8006c74 <__sflush_r+0x78>
 8006c6a:	1c42      	adds	r2, r0, #1
 8006c6c:	d101      	bne.n	8006c72 <__sflush_r+0x76>
 8006c6e:	682b      	ldr	r3, [r5, #0]
 8006c70:	b903      	cbnz	r3, 8006c74 <__sflush_r+0x78>
 8006c72:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c76:	602f      	str	r7, [r5, #0]
 8006c78:	b1b9      	cbz	r1, 8006caa <__sflush_r+0xae>
 8006c7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	d002      	beq.n	8006c88 <__sflush_r+0x8c>
 8006c82:	4628      	mov	r0, r5
 8006c84:	f7fe ff78 	bl	8005b78 <_free_r>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c8c:	e00d      	b.n	8006caa <__sflush_r+0xae>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b0      	blx	r6
 8006c94:	4602      	mov	r2, r0
 8006c96:	1c50      	adds	r0, r2, #1
 8006c98:	d1c9      	bne.n	8006c2e <__sflush_r+0x32>
 8006c9a:	682b      	ldr	r3, [r5, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0c6      	beq.n	8006c2e <__sflush_r+0x32>
 8006ca0:	2b1d      	cmp	r3, #29
 8006ca2:	d001      	beq.n	8006ca8 <__sflush_r+0xac>
 8006ca4:	2b16      	cmp	r3, #22
 8006ca6:	d11e      	bne.n	8006ce6 <__sflush_r+0xea>
 8006ca8:	602f      	str	r7, [r5, #0]
 8006caa:	2000      	movs	r0, #0
 8006cac:	e022      	b.n	8006cf4 <__sflush_r+0xf8>
 8006cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cb2:	b21b      	sxth	r3, r3
 8006cb4:	e01b      	b.n	8006cee <__sflush_r+0xf2>
 8006cb6:	690f      	ldr	r7, [r1, #16]
 8006cb8:	2f00      	cmp	r7, #0
 8006cba:	d0f6      	beq.n	8006caa <__sflush_r+0xae>
 8006cbc:	0793      	lsls	r3, r2, #30
 8006cbe:	680e      	ldr	r6, [r1, #0]
 8006cc0:	bf08      	it	eq
 8006cc2:	694b      	ldreq	r3, [r1, #20]
 8006cc4:	600f      	str	r7, [r1, #0]
 8006cc6:	bf18      	it	ne
 8006cc8:	2300      	movne	r3, #0
 8006cca:	eba6 0807 	sub.w	r8, r6, r7
 8006cce:	608b      	str	r3, [r1, #8]
 8006cd0:	f1b8 0f00 	cmp.w	r8, #0
 8006cd4:	dde9      	ble.n	8006caa <__sflush_r+0xae>
 8006cd6:	6a21      	ldr	r1, [r4, #32]
 8006cd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006cda:	4643      	mov	r3, r8
 8006cdc:	463a      	mov	r2, r7
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b0      	blx	r6
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	dc08      	bgt.n	8006cf8 <__sflush_r+0xfc>
 8006ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cee:	81a3      	strh	r3, [r4, #12]
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf8:	4407      	add	r7, r0
 8006cfa:	eba8 0800 	sub.w	r8, r8, r0
 8006cfe:	e7e7      	b.n	8006cd0 <__sflush_r+0xd4>
 8006d00:	dfbffffe 	.word	0xdfbffffe

08006d04 <_fflush_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	690b      	ldr	r3, [r1, #16]
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	b913      	cbnz	r3, 8006d14 <_fflush_r+0x10>
 8006d0e:	2500      	movs	r5, #0
 8006d10:	4628      	mov	r0, r5
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	b118      	cbz	r0, 8006d1e <_fflush_r+0x1a>
 8006d16:	6a03      	ldr	r3, [r0, #32]
 8006d18:	b90b      	cbnz	r3, 8006d1e <_fflush_r+0x1a>
 8006d1a:	f7fe fc31 	bl	8005580 <__sinit>
 8006d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f3      	beq.n	8006d0e <_fflush_r+0xa>
 8006d26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d28:	07d0      	lsls	r0, r2, #31
 8006d2a:	d404      	bmi.n	8006d36 <_fflush_r+0x32>
 8006d2c:	0599      	lsls	r1, r3, #22
 8006d2e:	d402      	bmi.n	8006d36 <_fflush_r+0x32>
 8006d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d32:	f7fe fef8 	bl	8005b26 <__retarget_lock_acquire_recursive>
 8006d36:	4628      	mov	r0, r5
 8006d38:	4621      	mov	r1, r4
 8006d3a:	f7ff ff5f 	bl	8006bfc <__sflush_r>
 8006d3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d40:	07da      	lsls	r2, r3, #31
 8006d42:	4605      	mov	r5, r0
 8006d44:	d4e4      	bmi.n	8006d10 <_fflush_r+0xc>
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	059b      	lsls	r3, r3, #22
 8006d4a:	d4e1      	bmi.n	8006d10 <_fflush_r+0xc>
 8006d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d4e:	f7fe feeb 	bl	8005b28 <__retarget_lock_release_recursive>
 8006d52:	e7dd      	b.n	8006d10 <_fflush_r+0xc>

08006d54 <fiprintf>:
 8006d54:	b40e      	push	{r1, r2, r3}
 8006d56:	b503      	push	{r0, r1, lr}
 8006d58:	4601      	mov	r1, r0
 8006d5a:	ab03      	add	r3, sp, #12
 8006d5c:	4805      	ldr	r0, [pc, #20]	@ (8006d74 <fiprintf+0x20>)
 8006d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d62:	6800      	ldr	r0, [r0, #0]
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	f7ff fb55 	bl	8006414 <_vfiprintf_r>
 8006d6a:	b002      	add	sp, #8
 8006d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d70:	b003      	add	sp, #12
 8006d72:	4770      	bx	lr
 8006d74:	2000006c 	.word	0x2000006c

08006d78 <__swhatbuf_r>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d80:	2900      	cmp	r1, #0
 8006d82:	b096      	sub	sp, #88	@ 0x58
 8006d84:	4615      	mov	r5, r2
 8006d86:	461e      	mov	r6, r3
 8006d88:	da0d      	bge.n	8006da6 <__swhatbuf_r+0x2e>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d90:	f04f 0100 	mov.w	r1, #0
 8006d94:	bf14      	ite	ne
 8006d96:	2340      	movne	r3, #64	@ 0x40
 8006d98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	6031      	str	r1, [r6, #0]
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	b016      	add	sp, #88	@ 0x58
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
 8006da6:	466a      	mov	r2, sp
 8006da8:	f000 f8d6 	bl	8006f58 <_fstat_r>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	dbec      	blt.n	8006d8a <__swhatbuf_r+0x12>
 8006db0:	9901      	ldr	r1, [sp, #4]
 8006db2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006db6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006dba:	4259      	negs	r1, r3
 8006dbc:	4159      	adcs	r1, r3
 8006dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dc2:	e7eb      	b.n	8006d9c <__swhatbuf_r+0x24>

08006dc4 <__smakebuf_r>:
 8006dc4:	898b      	ldrh	r3, [r1, #12]
 8006dc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dc8:	079d      	lsls	r5, r3, #30
 8006dca:	4606      	mov	r6, r0
 8006dcc:	460c      	mov	r4, r1
 8006dce:	d507      	bpl.n	8006de0 <__smakebuf_r+0x1c>
 8006dd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	2301      	movs	r3, #1
 8006dda:	6163      	str	r3, [r4, #20]
 8006ddc:	b003      	add	sp, #12
 8006dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de0:	ab01      	add	r3, sp, #4
 8006de2:	466a      	mov	r2, sp
 8006de4:	f7ff ffc8 	bl	8006d78 <__swhatbuf_r>
 8006de8:	9f00      	ldr	r7, [sp, #0]
 8006dea:	4605      	mov	r5, r0
 8006dec:	4639      	mov	r1, r7
 8006dee:	4630      	mov	r0, r6
 8006df0:	f7fe ff36 	bl	8005c60 <_malloc_r>
 8006df4:	b948      	cbnz	r0, 8006e0a <__smakebuf_r+0x46>
 8006df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfa:	059a      	lsls	r2, r3, #22
 8006dfc:	d4ee      	bmi.n	8006ddc <__smakebuf_r+0x18>
 8006dfe:	f023 0303 	bic.w	r3, r3, #3
 8006e02:	f043 0302 	orr.w	r3, r3, #2
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	e7e2      	b.n	8006dd0 <__smakebuf_r+0xc>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	6020      	str	r0, [r4, #0]
 8006e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	9b01      	ldr	r3, [sp, #4]
 8006e16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e1a:	b15b      	cbz	r3, 8006e34 <__smakebuf_r+0x70>
 8006e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e20:	4630      	mov	r0, r6
 8006e22:	f000 f8ab 	bl	8006f7c <_isatty_r>
 8006e26:	b128      	cbz	r0, 8006e34 <__smakebuf_r+0x70>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	81a3      	strh	r3, [r4, #12]
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	431d      	orrs	r5, r3
 8006e38:	81a5      	strh	r5, [r4, #12]
 8006e3a:	e7cf      	b.n	8006ddc <__smakebuf_r+0x18>

08006e3c <__sccl>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	780b      	ldrb	r3, [r1, #0]
 8006e40:	4604      	mov	r4, r0
 8006e42:	2b5e      	cmp	r3, #94	@ 0x5e
 8006e44:	bf0b      	itete	eq
 8006e46:	784b      	ldrbeq	r3, [r1, #1]
 8006e48:	1c4a      	addne	r2, r1, #1
 8006e4a:	1c8a      	addeq	r2, r1, #2
 8006e4c:	2100      	movne	r1, #0
 8006e4e:	bf08      	it	eq
 8006e50:	2101      	moveq	r1, #1
 8006e52:	3801      	subs	r0, #1
 8006e54:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006e58:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006e5c:	42a8      	cmp	r0, r5
 8006e5e:	d1fb      	bne.n	8006e58 <__sccl+0x1c>
 8006e60:	b90b      	cbnz	r3, 8006e66 <__sccl+0x2a>
 8006e62:	1e50      	subs	r0, r2, #1
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	f081 0101 	eor.w	r1, r1, #1
 8006e6a:	54e1      	strb	r1, [r4, r3]
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4602      	mov	r2, r0
 8006e70:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e74:	2d2d      	cmp	r5, #45	@ 0x2d
 8006e76:	d005      	beq.n	8006e84 <__sccl+0x48>
 8006e78:	2d5d      	cmp	r5, #93	@ 0x5d
 8006e7a:	d016      	beq.n	8006eaa <__sccl+0x6e>
 8006e7c:	2d00      	cmp	r5, #0
 8006e7e:	d0f1      	beq.n	8006e64 <__sccl+0x28>
 8006e80:	462b      	mov	r3, r5
 8006e82:	e7f2      	b.n	8006e6a <__sccl+0x2e>
 8006e84:	7846      	ldrb	r6, [r0, #1]
 8006e86:	2e5d      	cmp	r6, #93	@ 0x5d
 8006e88:	d0fa      	beq.n	8006e80 <__sccl+0x44>
 8006e8a:	42b3      	cmp	r3, r6
 8006e8c:	dcf8      	bgt.n	8006e80 <__sccl+0x44>
 8006e8e:	3002      	adds	r0, #2
 8006e90:	461a      	mov	r2, r3
 8006e92:	3201      	adds	r2, #1
 8006e94:	4296      	cmp	r6, r2
 8006e96:	54a1      	strb	r1, [r4, r2]
 8006e98:	dcfb      	bgt.n	8006e92 <__sccl+0x56>
 8006e9a:	1af2      	subs	r2, r6, r3
 8006e9c:	3a01      	subs	r2, #1
 8006e9e:	1c5d      	adds	r5, r3, #1
 8006ea0:	42b3      	cmp	r3, r6
 8006ea2:	bfa8      	it	ge
 8006ea4:	2200      	movge	r2, #0
 8006ea6:	18ab      	adds	r3, r5, r2
 8006ea8:	e7e1      	b.n	8006e6e <__sccl+0x32>
 8006eaa:	4610      	mov	r0, r2
 8006eac:	e7da      	b.n	8006e64 <__sccl+0x28>

08006eae <__submore>:
 8006eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006eb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006eba:	4299      	cmp	r1, r3
 8006ebc:	d11d      	bne.n	8006efa <__submore+0x4c>
 8006ebe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ec2:	f7fe fecd 	bl	8005c60 <_malloc_r>
 8006ec6:	b918      	cbnz	r0, 8006ed0 <__submore+0x22>
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ed4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006ed6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006eda:	6360      	str	r0, [r4, #52]	@ 0x34
 8006edc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006ee0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006ee4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006ee8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006eec:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006ef0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006ef4:	6020      	str	r0, [r4, #0]
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	e7e8      	b.n	8006ecc <__submore+0x1e>
 8006efa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006efc:	0077      	lsls	r7, r6, #1
 8006efe:	463a      	mov	r2, r7
 8006f00:	f000 f871 	bl	8006fe6 <_realloc_r>
 8006f04:	4605      	mov	r5, r0
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d0de      	beq.n	8006ec8 <__submore+0x1a>
 8006f0a:	eb00 0806 	add.w	r8, r0, r6
 8006f0e:	4601      	mov	r1, r0
 8006f10:	4632      	mov	r2, r6
 8006f12:	4640      	mov	r0, r8
 8006f14:	f000 f852 	bl	8006fbc <memcpy>
 8006f18:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006f1c:	f8c4 8000 	str.w	r8, [r4]
 8006f20:	e7e9      	b.n	8006ef6 <__submore+0x48>

08006f22 <memmove>:
 8006f22:	4288      	cmp	r0, r1
 8006f24:	b510      	push	{r4, lr}
 8006f26:	eb01 0402 	add.w	r4, r1, r2
 8006f2a:	d902      	bls.n	8006f32 <memmove+0x10>
 8006f2c:	4284      	cmp	r4, r0
 8006f2e:	4623      	mov	r3, r4
 8006f30:	d807      	bhi.n	8006f42 <memmove+0x20>
 8006f32:	1e43      	subs	r3, r0, #1
 8006f34:	42a1      	cmp	r1, r4
 8006f36:	d008      	beq.n	8006f4a <memmove+0x28>
 8006f38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f40:	e7f8      	b.n	8006f34 <memmove+0x12>
 8006f42:	4402      	add	r2, r0
 8006f44:	4601      	mov	r1, r0
 8006f46:	428a      	cmp	r2, r1
 8006f48:	d100      	bne.n	8006f4c <memmove+0x2a>
 8006f4a:	bd10      	pop	{r4, pc}
 8006f4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f54:	e7f7      	b.n	8006f46 <memmove+0x24>
	...

08006f58 <_fstat_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d07      	ldr	r5, [pc, #28]	@ (8006f78 <_fstat_r+0x20>)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	4611      	mov	r1, r2
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	f7fa ffbf 	bl	8001ee8 <_fstat>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	d102      	bne.n	8006f74 <_fstat_r+0x1c>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	b103      	cbz	r3, 8006f74 <_fstat_r+0x1c>
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	bd38      	pop	{r3, r4, r5, pc}
 8006f76:	bf00      	nop
 8006f78:	200003e0 	.word	0x200003e0

08006f7c <_isatty_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4d06      	ldr	r5, [pc, #24]	@ (8006f98 <_isatty_r+0x1c>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	f7fa ffbe 	bl	8001f08 <_isatty>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_isatty_r+0x1a>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_isatty_r+0x1a>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	200003e0 	.word	0x200003e0

08006f9c <_sbrk_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d06      	ldr	r5, [pc, #24]	@ (8006fb8 <_sbrk_r+0x1c>)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	f7fa ffc6 	bl	8001f38 <_sbrk>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_sbrk_r+0x1a>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_sbrk_r+0x1a>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	200003e0 	.word	0x200003e0

08006fbc <memcpy>:
 8006fbc:	440a      	add	r2, r1
 8006fbe:	4291      	cmp	r1, r2
 8006fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fc4:	d100      	bne.n	8006fc8 <memcpy+0xc>
 8006fc6:	4770      	bx	lr
 8006fc8:	b510      	push	{r4, lr}
 8006fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fd2:	4291      	cmp	r1, r2
 8006fd4:	d1f9      	bne.n	8006fca <memcpy+0xe>
 8006fd6:	bd10      	pop	{r4, pc}

08006fd8 <abort>:
 8006fd8:	b508      	push	{r3, lr}
 8006fda:	2006      	movs	r0, #6
 8006fdc:	f000 f8ca 	bl	8007174 <raise>
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	f7fa ff31 	bl	8001e48 <_exit>

08006fe6 <_realloc_r>:
 8006fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fea:	4680      	mov	r8, r0
 8006fec:	4615      	mov	r5, r2
 8006fee:	460c      	mov	r4, r1
 8006ff0:	b921      	cbnz	r1, 8006ffc <_realloc_r+0x16>
 8006ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	f7fe be32 	b.w	8005c60 <_malloc_r>
 8006ffc:	b92a      	cbnz	r2, 800700a <_realloc_r+0x24>
 8006ffe:	f7fe fdbb 	bl	8005b78 <_free_r>
 8007002:	2400      	movs	r4, #0
 8007004:	4620      	mov	r0, r4
 8007006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700a:	f000 f8cf 	bl	80071ac <_malloc_usable_size_r>
 800700e:	4285      	cmp	r5, r0
 8007010:	4606      	mov	r6, r0
 8007012:	d802      	bhi.n	800701a <_realloc_r+0x34>
 8007014:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007018:	d8f4      	bhi.n	8007004 <_realloc_r+0x1e>
 800701a:	4629      	mov	r1, r5
 800701c:	4640      	mov	r0, r8
 800701e:	f7fe fe1f 	bl	8005c60 <_malloc_r>
 8007022:	4607      	mov	r7, r0
 8007024:	2800      	cmp	r0, #0
 8007026:	d0ec      	beq.n	8007002 <_realloc_r+0x1c>
 8007028:	42b5      	cmp	r5, r6
 800702a:	462a      	mov	r2, r5
 800702c:	4621      	mov	r1, r4
 800702e:	bf28      	it	cs
 8007030:	4632      	movcs	r2, r6
 8007032:	f7ff ffc3 	bl	8006fbc <memcpy>
 8007036:	4621      	mov	r1, r4
 8007038:	4640      	mov	r0, r8
 800703a:	f7fe fd9d 	bl	8005b78 <_free_r>
 800703e:	463c      	mov	r4, r7
 8007040:	e7e0      	b.n	8007004 <_realloc_r+0x1e>
	...

08007044 <_strtoul_l.constprop.0>:
 8007044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007048:	4e34      	ldr	r6, [pc, #208]	@ (800711c <_strtoul_l.constprop.0+0xd8>)
 800704a:	4686      	mov	lr, r0
 800704c:	460d      	mov	r5, r1
 800704e:	4628      	mov	r0, r5
 8007050:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007054:	5d37      	ldrb	r7, [r6, r4]
 8007056:	f017 0708 	ands.w	r7, r7, #8
 800705a:	d1f8      	bne.n	800704e <_strtoul_l.constprop.0+0xa>
 800705c:	2c2d      	cmp	r4, #45	@ 0x2d
 800705e:	d12f      	bne.n	80070c0 <_strtoul_l.constprop.0+0x7c>
 8007060:	782c      	ldrb	r4, [r5, #0]
 8007062:	2701      	movs	r7, #1
 8007064:	1c85      	adds	r5, r0, #2
 8007066:	f033 0010 	bics.w	r0, r3, #16
 800706a:	d109      	bne.n	8007080 <_strtoul_l.constprop.0+0x3c>
 800706c:	2c30      	cmp	r4, #48	@ 0x30
 800706e:	d12c      	bne.n	80070ca <_strtoul_l.constprop.0+0x86>
 8007070:	7828      	ldrb	r0, [r5, #0]
 8007072:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007076:	2858      	cmp	r0, #88	@ 0x58
 8007078:	d127      	bne.n	80070ca <_strtoul_l.constprop.0+0x86>
 800707a:	786c      	ldrb	r4, [r5, #1]
 800707c:	2310      	movs	r3, #16
 800707e:	3502      	adds	r5, #2
 8007080:	f04f 38ff 	mov.w	r8, #4294967295
 8007084:	2600      	movs	r6, #0
 8007086:	fbb8 f8f3 	udiv	r8, r8, r3
 800708a:	fb03 f908 	mul.w	r9, r3, r8
 800708e:	ea6f 0909 	mvn.w	r9, r9
 8007092:	4630      	mov	r0, r6
 8007094:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007098:	f1bc 0f09 	cmp.w	ip, #9
 800709c:	d81c      	bhi.n	80070d8 <_strtoul_l.constprop.0+0x94>
 800709e:	4664      	mov	r4, ip
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	dd2a      	ble.n	80070fa <_strtoul_l.constprop.0+0xb6>
 80070a4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80070a8:	d007      	beq.n	80070ba <_strtoul_l.constprop.0+0x76>
 80070aa:	4580      	cmp	r8, r0
 80070ac:	d322      	bcc.n	80070f4 <_strtoul_l.constprop.0+0xb0>
 80070ae:	d101      	bne.n	80070b4 <_strtoul_l.constprop.0+0x70>
 80070b0:	45a1      	cmp	r9, r4
 80070b2:	db1f      	blt.n	80070f4 <_strtoul_l.constprop.0+0xb0>
 80070b4:	fb00 4003 	mla	r0, r0, r3, r4
 80070b8:	2601      	movs	r6, #1
 80070ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070be:	e7e9      	b.n	8007094 <_strtoul_l.constprop.0+0x50>
 80070c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80070c2:	bf04      	itt	eq
 80070c4:	782c      	ldrbeq	r4, [r5, #0]
 80070c6:	1c85      	addeq	r5, r0, #2
 80070c8:	e7cd      	b.n	8007066 <_strtoul_l.constprop.0+0x22>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1d8      	bne.n	8007080 <_strtoul_l.constprop.0+0x3c>
 80070ce:	2c30      	cmp	r4, #48	@ 0x30
 80070d0:	bf0c      	ite	eq
 80070d2:	2308      	moveq	r3, #8
 80070d4:	230a      	movne	r3, #10
 80070d6:	e7d3      	b.n	8007080 <_strtoul_l.constprop.0+0x3c>
 80070d8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80070dc:	f1bc 0f19 	cmp.w	ip, #25
 80070e0:	d801      	bhi.n	80070e6 <_strtoul_l.constprop.0+0xa2>
 80070e2:	3c37      	subs	r4, #55	@ 0x37
 80070e4:	e7dc      	b.n	80070a0 <_strtoul_l.constprop.0+0x5c>
 80070e6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80070ea:	f1bc 0f19 	cmp.w	ip, #25
 80070ee:	d804      	bhi.n	80070fa <_strtoul_l.constprop.0+0xb6>
 80070f0:	3c57      	subs	r4, #87	@ 0x57
 80070f2:	e7d5      	b.n	80070a0 <_strtoul_l.constprop.0+0x5c>
 80070f4:	f04f 36ff 	mov.w	r6, #4294967295
 80070f8:	e7df      	b.n	80070ba <_strtoul_l.constprop.0+0x76>
 80070fa:	1c73      	adds	r3, r6, #1
 80070fc:	d106      	bne.n	800710c <_strtoul_l.constprop.0+0xc8>
 80070fe:	2322      	movs	r3, #34	@ 0x22
 8007100:	f8ce 3000 	str.w	r3, [lr]
 8007104:	4630      	mov	r0, r6
 8007106:	b932      	cbnz	r2, 8007116 <_strtoul_l.constprop.0+0xd2>
 8007108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800710c:	b107      	cbz	r7, 8007110 <_strtoul_l.constprop.0+0xcc>
 800710e:	4240      	negs	r0, r0
 8007110:	2a00      	cmp	r2, #0
 8007112:	d0f9      	beq.n	8007108 <_strtoul_l.constprop.0+0xc4>
 8007114:	b106      	cbz	r6, 8007118 <_strtoul_l.constprop.0+0xd4>
 8007116:	1e69      	subs	r1, r5, #1
 8007118:	6011      	str	r1, [r2, #0]
 800711a:	e7f5      	b.n	8007108 <_strtoul_l.constprop.0+0xc4>
 800711c:	080073c5 	.word	0x080073c5

08007120 <_strtoul_r>:
 8007120:	f7ff bf90 	b.w	8007044 <_strtoul_l.constprop.0>

08007124 <_raise_r>:
 8007124:	291f      	cmp	r1, #31
 8007126:	b538      	push	{r3, r4, r5, lr}
 8007128:	4605      	mov	r5, r0
 800712a:	460c      	mov	r4, r1
 800712c:	d904      	bls.n	8007138 <_raise_r+0x14>
 800712e:	2316      	movs	r3, #22
 8007130:	6003      	str	r3, [r0, #0]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800713a:	b112      	cbz	r2, 8007142 <_raise_r+0x1e>
 800713c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007140:	b94b      	cbnz	r3, 8007156 <_raise_r+0x32>
 8007142:	4628      	mov	r0, r5
 8007144:	f000 f830 	bl	80071a8 <_getpid_r>
 8007148:	4622      	mov	r2, r4
 800714a:	4601      	mov	r1, r0
 800714c:	4628      	mov	r0, r5
 800714e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007152:	f000 b817 	b.w	8007184 <_kill_r>
 8007156:	2b01      	cmp	r3, #1
 8007158:	d00a      	beq.n	8007170 <_raise_r+0x4c>
 800715a:	1c59      	adds	r1, r3, #1
 800715c:	d103      	bne.n	8007166 <_raise_r+0x42>
 800715e:	2316      	movs	r3, #22
 8007160:	6003      	str	r3, [r0, #0]
 8007162:	2001      	movs	r0, #1
 8007164:	e7e7      	b.n	8007136 <_raise_r+0x12>
 8007166:	2100      	movs	r1, #0
 8007168:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800716c:	4620      	mov	r0, r4
 800716e:	4798      	blx	r3
 8007170:	2000      	movs	r0, #0
 8007172:	e7e0      	b.n	8007136 <_raise_r+0x12>

08007174 <raise>:
 8007174:	4b02      	ldr	r3, [pc, #8]	@ (8007180 <raise+0xc>)
 8007176:	4601      	mov	r1, r0
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f7ff bfd3 	b.w	8007124 <_raise_r>
 800717e:	bf00      	nop
 8007180:	2000006c 	.word	0x2000006c

08007184 <_kill_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4d07      	ldr	r5, [pc, #28]	@ (80071a4 <_kill_r+0x20>)
 8007188:	2300      	movs	r3, #0
 800718a:	4604      	mov	r4, r0
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	602b      	str	r3, [r5, #0]
 8007192:	f7fa fe49 	bl	8001e28 <_kill>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d102      	bne.n	80071a0 <_kill_r+0x1c>
 800719a:	682b      	ldr	r3, [r5, #0]
 800719c:	b103      	cbz	r3, 80071a0 <_kill_r+0x1c>
 800719e:	6023      	str	r3, [r4, #0]
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	bf00      	nop
 80071a4:	200003e0 	.word	0x200003e0

080071a8 <_getpid_r>:
 80071a8:	f7fa be36 	b.w	8001e18 <_getpid>

080071ac <_malloc_usable_size_r>:
 80071ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b0:	1f18      	subs	r0, r3, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	bfbc      	itt	lt
 80071b6:	580b      	ldrlt	r3, [r1, r0]
 80071b8:	18c0      	addlt	r0, r0, r3
 80071ba:	4770      	bx	lr

080071bc <_init>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	bf00      	nop
 80071c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c2:	bc08      	pop	{r3}
 80071c4:	469e      	mov	lr, r3
 80071c6:	4770      	bx	lr

080071c8 <_fini>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	bf00      	nop
 80071cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ce:	bc08      	pop	{r3}
 80071d0:	469e      	mov	lr, r3
 80071d2:	4770      	bx	lr
