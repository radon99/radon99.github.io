
DigitalFan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  00001a1c  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  00800222  00800222  00001bd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000356b  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000164a  00000000  00000000  000055a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dea  00000000  00000000  00006bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000810  00000000  00000000  000089d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cc5  00000000  00000000  000091e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001334  00000000  00000000  00009ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c0       	rjmp	.+246    	; 0x11c <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e1       	ldi	r30, 0x1C	; 28
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 32       	cpi	r26, 0x22	; 34
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a2 e2       	ldi	r26, 0x22	; 34
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 3c       	cpi	r26, 0xC3	; 195
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	27 d7       	rcall	.+3662   	; 0xf12 <main>
      c4:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_16>:
ï»¿#include "apMain.h"

ISR(TIMER0_OVF_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	FND_ISR_Process();
      f0:	67 d6       	rcall	.+3278   	; 0xdc0 <FND_ISR_Process>
	TCNT0 = 130;
      f2:	82 e8       	ldi	r24, 0x82	; 130
      f4:	82 bf       	out	0x32, r24	; 50
}
      f6:	ff 91       	pop	r31
      f8:	ef 91       	pop	r30
      fa:	bf 91       	pop	r27
      fc:	af 91       	pop	r26
      fe:	9f 91       	pop	r25
     100:	8f 91       	pop	r24
     102:	7f 91       	pop	r23
     104:	6f 91       	pop	r22
     106:	5f 91       	pop	r21
     108:	4f 91       	pop	r20
     10a:	3f 91       	pop	r19
     10c:	2f 91       	pop	r18
     10e:	0f 90       	pop	r0
     110:	0b be       	out	0x3b, r0	; 59
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <__vector_9>:

ISR(TIMER2_COMP_vect)
{
     11c:	1f 92       	push	r1
     11e:	0f 92       	push	r0
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	0f 92       	push	r0
     124:	11 24       	eor	r1, r1
     126:	0b b6       	in	r0, 0x3b	; 59
     128:	0f 92       	push	r0
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	ef 93       	push	r30
     140:	ff 93       	push	r31
	Service_fanDecMillisec();
     142:	5b d3       	rcall	.+1718   	; 0x7fa <Service_fanDecMillisec>
	Service_fanAutoConfigure();
     144:	93 d3       	rcall	.+1830   	; 0x86c <Service_fanAutoConfigure>
	Service_MusicConfigure();
     146:	0a d4       	rcall	.+2068   	; 0x95c <Service_MusicConfigure>
     148:	ff 91       	pop	r31
}
     14a:	ef 91       	pop	r30
     14c:	bf 91       	pop	r27
     14e:	af 91       	pop	r26
     150:	9f 91       	pop	r25
     152:	8f 91       	pop	r24
     154:	7f 91       	pop	r23
     156:	6f 91       	pop	r22
     158:	5f 91       	pop	r21
     15a:	4f 91       	pop	r20
     15c:	3f 91       	pop	r19
     15e:	2f 91       	pop	r18
     160:	0f 90       	pop	r0
     162:	0b be       	out	0x3b, r0	; 59
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	0f 90       	pop	r0
     16a:	1f 90       	pop	r1
     16c:	18 95       	reti

0000016e <__vector_18>:
     16e:	1f 92       	push	r1

ISR(USART0_RX_vect)
{
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	0b b6       	in	r0, 0x3b	; 59
     17a:	0f 92       	push	r0
     17c:	2f 93       	push	r18
     17e:	3f 93       	push	r19
     180:	4f 93       	push	r20
     182:	5f 93       	push	r21
     184:	6f 93       	push	r22
     186:	7f 93       	push	r23
     188:	8f 93       	push	r24
     18a:	9f 93       	push	r25
     18c:	af 93       	push	r26
     18e:	bf 93       	push	r27
     190:	ef 93       	push	r30
     192:	ff 93       	push	r31
	UART0_ISR_Process();
     194:	39 d7       	rcall	.+3698   	; 0x1008 <UART0_ISR_Process>
}
     196:	ff 91       	pop	r31
     198:	ef 91       	pop	r30
     19a:	bf 91       	pop	r27
     19c:	af 91       	pop	r26
     19e:	9f 91       	pop	r25
     1a0:	8f 91       	pop	r24
     1a2:	7f 91       	pop	r23
     1a4:	6f 91       	pop	r22
     1a6:	5f 91       	pop	r21
     1a8:	4f 91       	pop	r20
     1aa:	3f 91       	pop	r19
     1ac:	2f 91       	pop	r18
     1ae:	0f 90       	pop	r0
     1b0:	0b be       	out	0x3b, r0	; 59
     1b2:	0f 90       	pop	r0
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	0f 90       	pop	r0
     1b8:	1f 90       	pop	r1
     1ba:	18 95       	reti

000001bc <apMain_init>:

void apMain_init()
{
	//AP Initialize
	Listener_init();
     1bc:	12 d0       	rcall	.+36     	; 0x1e2 <Listener_init>
	Service_fanInit();
     1be:	4f d2       	rcall	.+1182   	; 0x65e <Service_fanInit>
	Presenter_init();
     1c0:	2f d1       	rcall	.+606    	; 0x420 <Presenter_init>
	
	//Timer Initialize
	TIM0_init();
     1c2:	f5 d6       	rcall	.+3562   	; 0xfae <TIM0_init>
	TIM2_init();
     1c4:	fd d6       	rcall	.+3578   	; 0xfc0 <TIM2_init>
	sei();
     1c6:	78 94       	sei
	
	//Model Default Set
	Model_setfanWindSpeed(OFF);
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	27 d1       	rcall	.+590    	; 0x41a <Model_setfanWindSpeed>
	Model_setfanTimerState(TIME_OFF);
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	19 d1       	rcall	.+562    	; 0x402 <Model_setfanTimerState>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
	Model_setfanAutoManualState(MANUAL);
     1d2:	11 d1       	rcall	.+546    	; 0x3f6 <Model_setfanAutoManualState>
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	1b c1       	rjmp	.+566    	; 0x40e <Model_setfanTimeFlag>
	Model_setfanTimeFlag(1);
     1d8:	08 95       	ret

000001da <apMain_execute>:
     1da:	2f d0       	rcall	.+94     	; 0x23a <UART0_command>
     1dc:	05 d1       	rcall	.+522    	; 0x3e8 <Listener_eventCheck>
     1de:	67 c4       	rjmp	.+2254   	; 0xaae <Service_fanRun>

void apMain_execute()
{
	UART0_command();
	Listener_eventCheck();
	Service_fanRun();
     1e0:	08 95       	ret

000001e2 <Listener_init>:
     1e2:	0f 93       	push	r16
button_t btnStop, btnSpeed, btnMode, btnTimer;

void Listener_init()
{	
	//UART_init
	UART0_init();
     1e4:	fd d6       	rcall	.+3578   	; 0xfe0 <UART0_init>
	//Button_init
	Button_init(&btnStop, &BUTTON1_DDR, &BUTTON1_PIN, &BUTTON1_PORT, BUTTON1_PINNUM);
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	2b e3       	ldi	r18, 0x3B	; 59
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	49 e3       	ldi	r20, 0x39	; 57
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	6a e3       	ldi	r22, 0x3A	; 58
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	8b e3       	ldi	r24, 0x3B	; 59
     1f6:	92 e0       	ldi	r25, 0x02	; 2
     1f8:	60 d4       	rcall	.+2240   	; 0xaba <Button_init>
	Button_init(&btnSpeed, &BUTTON2_DDR, &BUTTON2_PIN, &BUTTON2_PORT, BUTTON2_PINNUM);
     1fa:	01 e0       	ldi	r16, 0x01	; 1
     1fc:	2b e3       	ldi	r18, 0x3B	; 59
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	49 e3       	ldi	r20, 0x39	; 57
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	6a e3       	ldi	r22, 0x3A	; 58
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	83 e3       	ldi	r24, 0x33	; 51
     20a:	92 e0       	ldi	r25, 0x02	; 2
     20c:	56 d4       	rcall	.+2220   	; 0xaba <Button_init>
	Button_init(&btnMode, &BUTTON3_DDR, &BUTTON3_PIN, &BUTTON3_PORT, BUTTON3_PINNUM);
     20e:	02 e0       	ldi	r16, 0x02	; 2
     210:	2b e3       	ldi	r18, 0x3B	; 59
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	49 e3       	ldi	r20, 0x39	; 57
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	6a e3       	ldi	r22, 0x3A	; 58
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	83 e4       	ldi	r24, 0x43	; 67
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	4c d4       	rcall	.+2200   	; 0xaba <Button_init>
	Button_init(&btnTimer, &BUTTON4_DDR, &BUTTON4_PIN, &BUTTON4_PORT, BUTTON4_PINNUM);
     222:	03 e0       	ldi	r16, 0x03	; 3
     224:	2b e3       	ldi	r18, 0x3B	; 59
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	49 e3       	ldi	r20, 0x39	; 57
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	6a e3       	ldi	r22, 0x3A	; 58
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	8b e2       	ldi	r24, 0x2B	; 43
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	42 d4       	rcall	.+2180   	; 0xaba <Button_init>
}
     236:	0f 91       	pop	r16
     238:	08 95       	ret

0000023a <UART0_command>:

void UART0_command()
{
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
	uint8_t fanAutoManualState;
	fanAutoManualState = Model_getfanAutoManualState();
     240:	d7 d0       	rcall	.+430    	; 0x3f0 <Model_getfanAutoManualState>
     242:	18 2f       	mov	r17, r24
	
	uint8_t fanWindSpeed;
	fanWindSpeed = Model_getfanWindSpeed();
     244:	e7 d0       	rcall	.+462    	; 0x414 <Model_getfanWindSpeed>
	
	uint8_t fanTimerState;
	fanTimerState = Model_getfanTimerState();
     246:	da d0       	rcall	.+436    	; 0x3fc <Model_getfanTimerState>
     248:	02 d7       	rcall	.+3588   	; 0x104e <UART0_getRxFlag>
	
	if(UART0_getRxFlag())
     24a:	88 23       	and	r24, r24
     24c:	09 f4       	brne	.+2      	; 0x250 <UART0_command+0x16>
     24e:	61 c0       	rjmp	.+194    	; 0x312 <UART0_command+0xd8>
	{
		UART0_clearRxFlag();
     250:	fb d6       	rcall	.+3574   	; 0x1048 <UART0_clearRxFlag>
     252:	00 d7       	rcall	.+3584   	; 0x1054 <UART0_readRxBuff>
		uint8_t* rxString = UART0_readRxBuff();
     254:	ec 01       	movw	r28, r24
     256:	11 11       	cpse	r17, r1
     258:	26 c0       	rjmp	.+76     	; 0x2a6 <UART0_command+0x6c>
		
		// íëì¡°ì  UART
		if(fanAutoManualState == MANUAL)
     25a:	60 e5       	ldi	r22, 0x50	; 80
     25c:	71 e0       	ldi	r23, 0x01	; 1
		{
			if(!strcmp((char*)rxString,"fan_off\n"))
     25e:	0e 94 18 0a 	call	0x1430	; 0x1430 <strcmp>
     262:	89 2b       	or	r24, r25
     264:	19 f4       	brne	.+6      	; 0x26c <UART0_command+0x32>
     266:	80 e0       	ldi	r24, 0x00	; 0
			{
				fanWindSpeed = OFF;
				Model_setfanWindSpeed(fanWindSpeed);
     268:	d8 d0       	rcall	.+432    	; 0x41a <Model_setfanWindSpeed>
     26a:	1d c0       	rjmp	.+58     	; 0x2a6 <UART0_command+0x6c>
     26c:	69 e5       	ldi	r22, 0x59	; 89
     26e:	71 e0       	ldi	r23, 0x01	; 1
			}
			else if(!strcmp((char*)rxString,"fan_low\n"))
     270:	ce 01       	movw	r24, r28
     272:	0e 94 18 0a 	call	0x1430	; 0x1430 <strcmp>
     276:	89 2b       	or	r24, r25
     278:	19 f4       	brne	.+6      	; 0x280 <UART0_command+0x46>
     27a:	81 e0       	ldi	r24, 0x01	; 1
			{
				fanWindSpeed = LOW;
				Model_setfanWindSpeed(fanWindSpeed);
     27c:	ce d0       	rcall	.+412    	; 0x41a <Model_setfanWindSpeed>
     27e:	13 c0       	rjmp	.+38     	; 0x2a6 <UART0_command+0x6c>
     280:	62 e6       	ldi	r22, 0x62	; 98
     282:	71 e0       	ldi	r23, 0x01	; 1
			}
			else if(!strcmp((char*)rxString,"fan_medium\n"))
     284:	ce 01       	movw	r24, r28
     286:	0e 94 18 0a 	call	0x1430	; 0x1430 <strcmp>
     28a:	89 2b       	or	r24, r25
     28c:	19 f4       	brne	.+6      	; 0x294 <UART0_command+0x5a>
     28e:	82 e0       	ldi	r24, 0x02	; 2
			{
				fanWindSpeed = MEDIUM;
				Model_setfanWindSpeed(fanWindSpeed);
     290:	c4 d0       	rcall	.+392    	; 0x41a <Model_setfanWindSpeed>
     292:	09 c0       	rjmp	.+18     	; 0x2a6 <UART0_command+0x6c>
     294:	6e e6       	ldi	r22, 0x6E	; 110
			}
			else if(!strcmp((char*)rxString,"fan_high\n"))
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	ce 01       	movw	r24, r28
     29a:	0e 94 18 0a 	call	0x1430	; 0x1430 <strcmp>
     29e:	89 2b       	or	r24, r25
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <UART0_command+0x6c>
     2a2:	83 e0       	ldi	r24, 0x03	; 3
			{
				fanWindSpeed = HIGH;
				Model_setfanWindSpeed(fanWindSpeed);
     2a4:	ba d0       	rcall	.+372    	; 0x41a <Model_setfanWindSpeed>
     2a6:	68 e7       	ldi	r22, 0x78	; 120
			}
		}
		
		// íì´ë¨¸ UART
		if(!strcmp((char*)rxString,"time_off\n"))
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	ce 01       	movw	r24, r28
     2ac:	0e 94 18 0a 	call	0x1430	; 0x1430 <strcmp>
     2b0:	89 2b       	or	r24, r25
     2b2:	31 f4       	brne	.+12     	; 0x2c0 <UART0_command+0x86>
		{
			fanTimerState = TIME_OFF;
			Model_setfanTimerState(fanTimerState);
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	a5 d0       	rcall	.+330    	; 0x402 <Model_setfanTimerState>
     2b8:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <fanTimeFlag>
			fanTimeFlag = 0;
			Model_setfanTimeFlag(fanTimeFlag);
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	a7 d0       	rcall	.+334    	; 0x40e <Model_setfanTimeFlag>
     2c0:	62 e8       	ldi	r22, 0x82	; 130
		}		
		if(!strcmp((char*)rxString,"time3\n"))
     2c2:	71 e0       	ldi	r23, 0x01	; 1
     2c4:	ce 01       	movw	r24, r28
     2c6:	0e 94 18 0a 	call	0x1430	; 0x1430 <strcmp>
     2ca:	89 2b       	or	r24, r25
     2cc:	39 f4       	brne	.+14     	; 0x2dc <UART0_command+0xa2>
		{
			fanTimerState = TIME3;
			Model_setfanTimerState(fanTimerState);
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	98 d0       	rcall	.+304    	; 0x402 <Model_setfanTimerState>
     2d2:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <fanTimeFlag>
			fanTimeFlag = 0;
			Model_setfanTimeFlag(fanTimeFlag);
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	9a d0       	rcall	.+308    	; 0x40e <Model_setfanTimeFlag>
     2da:	1b c0       	rjmp	.+54     	; 0x312 <UART0_command+0xd8>
		}
		else if(!strcmp((char*)rxString,"time5\n"))
     2dc:	69 e8       	ldi	r22, 0x89	; 137
     2de:	71 e0       	ldi	r23, 0x01	; 1
     2e0:	ce 01       	movw	r24, r28
     2e2:	0e 94 18 0a 	call	0x1430	; 0x1430 <strcmp>
     2e6:	89 2b       	or	r24, r25
     2e8:	39 f4       	brne	.+14     	; 0x2f8 <UART0_command+0xbe>
		{
			fanTimerState = TIME5;
			Model_setfanTimerState(fanTimerState);
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	8a d0       	rcall	.+276    	; 0x402 <Model_setfanTimerState>
			fanTimeFlag = 0;
     2ee:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <fanTimeFlag>
			Model_setfanTimeFlag(fanTimeFlag);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	8c d0       	rcall	.+280    	; 0x40e <Model_setfanTimeFlag>
     2f6:	0d c0       	rjmp	.+26     	; 0x312 <UART0_command+0xd8>
		}
		else if(!strcmp((char*)rxString,"time7\n"))
     2f8:	60 e9       	ldi	r22, 0x90	; 144
     2fa:	71 e0       	ldi	r23, 0x01	; 1
     2fc:	ce 01       	movw	r24, r28
     2fe:	0e 94 18 0a 	call	0x1430	; 0x1430 <strcmp>
     302:	89 2b       	or	r24, r25
     304:	31 f4       	brne	.+12     	; 0x312 <UART0_command+0xd8>
		{
			fanTimerState = TIME7;
			Model_setfanTimerState(fanTimerState);
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	7c d0       	rcall	.+248    	; 0x402 <Model_setfanTimerState>
     30a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <fanTimeFlag>
			fanTimeFlag = 0;
     30e:	80 e0       	ldi	r24, 0x00	; 0
			Model_setfanTimeFlag(fanTimeFlag);
     310:	7e d0       	rcall	.+252    	; 0x40e <Model_setfanTimeFlag>
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
		}
	}
}
     316:	1f 91       	pop	r17
     318:	08 95       	ret

0000031a <Listener_manualEvent>:
     31a:	cf 93       	push	r28
     31c:	7b d0       	rcall	.+246    	; 0x414 <Model_getfanWindSpeed>
}

void Listener_manualEvent()											
{
	uint8_t fanWindSpeed;
	fanWindSpeed = Model_getfanWindSpeed();						
     31e:	c8 2f       	mov	r28, r24
		
	if((Button_GetState(&btnSpeed) == ACT_RELEASED))				
     320:	83 e3       	ldi	r24, 0x33	; 51
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	e3 d3       	rcall	.+1990   	; 0xaec <Button_GetState>
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	61 f4       	brne	.+24     	; 0x342 <Listener_manualEvent+0x28>
	{
		fanWindSpeed = (fanWindSpeed + 1) % 4;
     32a:	8c 2f       	mov	r24, r28
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	83 70       	andi	r24, 0x03	; 3
     332:	90 78       	andi	r25, 0x80	; 128
     334:	99 23       	and	r25, r25
     336:	24 f4       	brge	.+8      	; 0x340 <Listener_manualEvent+0x26>
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	8c 6f       	ori	r24, 0xFC	; 252
     33c:	9f 6f       	ori	r25, 0xFF	; 255
		Model_setfanWindSpeed(fanWindSpeed);
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	6c d0       	rcall	.+216    	; 0x41a <Model_setfanWindSpeed>
	}
}
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <Listener_modeEvent>:

void Listener_modeEvent()
{
	uint8_t fanAutoManualState;
	fanAutoManualState = Model_getfanAutoManualState();
     346:	54 d0       	rcall	.+168    	; 0x3f0 <Model_getfanAutoManualState>
	
	switch(fanAutoManualState)
     348:	88 23       	and	r24, r24
     34a:	19 f0       	breq	.+6      	; 0x352 <Listener_modeEvent+0xc>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	49 f0       	breq	.+18     	; 0x362 <Listener_modeEvent+0x1c>
	{
		case MANUAL :
		Listener_manualEvent();
     350:	08 95       	ret
     352:	e3 df       	rcall	.-58     	; 0x31a <Listener_manualEvent>
		if((Button_GetState(&btnMode) == ACT_RELEASED))
     354:	83 e4       	ldi	r24, 0x43	; 67
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	c9 d3       	rcall	.+1938   	; 0xaec <Button_GetState>
     35a:	81 30       	cpi	r24, 0x01	; 1
		{
			fanAutoManualState = AUTO;
			Model_setfanAutoManualState(fanAutoManualState);
     35c:	49 f4       	brne	.+18     	; 0x370 <Listener_modeEvent+0x2a>
     35e:	4b c0       	rjmp	.+150    	; 0x3f6 <Model_setfanAutoManualState>
		}
		break;
		case AUTO :
		if((Button_GetState(&btnMode) == ACT_RELEASED))
     360:	08 95       	ret
     362:	83 e4       	ldi	r24, 0x43	; 67
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	c2 d3       	rcall	.+1924   	; 0xaec <Button_GetState>
     368:	81 30       	cpi	r24, 0x01	; 1
		{
			fanAutoManualState = MANUAL;
			Model_setfanAutoManualState(fanAutoManualState);
     36a:	11 f4       	brne	.+4      	; 0x370 <Listener_modeEvent+0x2a>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	43 c0       	rjmp	.+134    	; 0x3f6 <Model_setfanAutoManualState>
     370:	08 95       	ret

00000372 <Listener_timerEvent>:
		break;
	}
}

void Listener_timerEvent()
{
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
	uint8_t fanWindSpeed;
	fanWindSpeed = Model_getfanWindSpeed();
     376:	4e d0       	rcall	.+156    	; 0x414 <Model_getfanWindSpeed>
     378:	c8 2f       	mov	r28, r24
		
	uint8_t fanTimerState;
	fanTimerState = Model_getfanTimerState();
     37a:	40 d0       	rcall	.+128    	; 0x3fc <Model_getfanTimerState>
     37c:	d8 2f       	mov	r29, r24
	fanTimeFlag = Model_getfanTimeFlag();
     37e:	44 d0       	rcall	.+136    	; 0x408 <Model_getfanTimeFlag>
     380:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <fanTimeFlag>
	
	uint8_t fanAutoManualState;
	fanAutoManualState = Model_getfanAutoManualState();
     384:	35 d0       	rcall	.+106    	; 0x3f0 <Model_getfanAutoManualState>
     386:	21 e0       	ldi	r18, 0x01	; 1
	
	if((fanWindSpeed != OFF) | (fanAutoManualState == AUTO))			// ì¤í ë ë°ëì´ ì¼ì ¸ììëë§ íì´ë¨¸ ì¤ì  ê°ë¥
     388:	c1 11       	cpse	r28, r1
     38a:	01 c0       	rjmp	.+2      	; 0x38e <Listener_timerEvent+0x1c>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	09 f0       	breq	.+2      	; 0x396 <Listener_timerEvent+0x24>
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	92 2b       	or	r25, r18
     398:	a9 f0       	breq	.+42     	; 0x3c4 <Listener_timerEvent+0x52>
	{
		if((Button_GetState(&btnTimer) == ACT_RELEASED))				// íì´ë¨¸ ë²í¼ì´ ëë¦¬ë©´ ë¤ì íì´ë¨¸ ììë¡ ëë¦¼
     39a:	8b e2       	ldi	r24, 0x2B	; 43
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	a6 d3       	rcall	.+1868   	; 0xaec <Button_GetState>
     3a0:	81 30       	cpi	r24, 0x01	; 1
     3a2:	81 f4       	brne	.+32     	; 0x3c4 <Listener_timerEvent+0x52>
     3a4:	8d 2f       	mov	r24, r29
		{
			fanTimerState = (fanTimerState + 1) % 4;
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	83 70       	andi	r24, 0x03	; 3
     3ac:	90 78       	andi	r25, 0x80	; 128
     3ae:	99 23       	and	r25, r25
     3b0:	24 f4       	brge	.+8      	; 0x3ba <Listener_timerEvent+0x48>
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	8c 6f       	ori	r24, 0xFC	; 252
     3b6:	9f 6f       	ori	r25, 0xFF	; 255
     3b8:	01 96       	adiw	r24, 0x01	; 1
			Model_setfanTimerState(fanTimerState);
     3ba:	23 d0       	rcall	.+70     	; 0x402 <Model_setfanTimerState>
     3bc:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <fanTimeFlag>
			fanTimeFlag = 0;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
			Model_setfanTimeFlag(fanTimeFlag);								// íì´ë¨¸ ìê° ì¤ì  ìì§ ìí¨.
     3c2:	25 d0       	rcall	.+74     	; 0x40e <Model_setfanTimeFlag>
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
		}
	}
}
     3c8:	08 95       	ret

000003ca <Listener_stopEvent>:
     3ca:	12 d0       	rcall	.+36     	; 0x3f0 <Model_getfanAutoManualState>
     3cc:	17 d0       	rcall	.+46     	; 0x3fc <Model_getfanTimerState>
	
	uint8_t fanTimerState;
	fanTimerState = Model_getfanTimerState();						
	
	uint8_t fanWindSpeed;
	fanWindSpeed = Model_getfanWindSpeed();
     3ce:	22 d0       	rcall	.+68     	; 0x414 <Model_getfanWindSpeed>
	
	if((Button_GetState(&btnStop) == ACT_RELEASED))				// ë¬´ì¨ ì¡°ê±´ì´ë  í­ì ëê²
     3d0:	8b e3       	ldi	r24, 0x3B	; 59
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	8b d3       	rcall	.+1814   	; 0xaec <Button_GetState>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	31 f4       	brne	.+12     	; 0x3e6 <Listener_stopEvent+0x1c>
	{
		//MANUALë¡ ì í
		fanAutoManualState = MANUAL;
		Model_setfanAutoManualState(fanAutoManualState);
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	0c d0       	rcall	.+24     	; 0x3f6 <Model_setfanAutoManualState>
		//fan wind speed off
		fanWindSpeed = OFF;
		Model_setfanWindSpeed(fanWindSpeed);					// ë°ëì¸ê¸° OFF
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	1c d0       	rcall	.+56     	; 0x41a <Model_setfanWindSpeed>
     3e2:	80 e0       	ldi	r24, 0x00	; 0
		//íì´ë¨¸ë OFF
		fanTimerState = TIME_OFF;								// íì´ë¨¸ë ëê¸°
		Model_setfanTimerState(fanTimerState);
     3e4:	0e c0       	rjmp	.+28     	; 0x402 <Model_setfanTimerState>
     3e6:	08 95       	ret

000003e8 <Listener_eventCheck>:
     3e8:	f0 df       	rcall	.-32     	; 0x3ca <Listener_stopEvent>
     3ea:	ad df       	rcall	.-166    	; 0x346 <Listener_modeEvent>

void Listener_eventCheck()	
{	
	Listener_stopEvent();	
	Listener_modeEvent();
	Listener_timerEvent();	
     3ec:	c2 cf       	rjmp	.-124    	; 0x372 <Listener_timerEvent>
     3ee:	08 95       	ret

000003f0 <Model_getfanAutoManualState>:
     3f0:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <fanAutoManualState>
uint8_t fanAutoManualState;

uint8_t Model_getfanAutoManualState()
{
	return fanAutoManualState;
}
     3f4:	08 95       	ret

000003f6 <Model_setfanAutoManualState>:

void Model_setfanAutoManualState(uint8_t state)
{
	fanAutoManualState = state;
     3f6:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <fanAutoManualState>
     3fa:	08 95       	ret

000003fc <Model_getfanTimerState>:
     3fc:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <fanTimerState>
     400:	08 95       	ret

00000402 <Model_setfanTimerState>:
     402:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <fanTimerState>
     406:	08 95       	ret

00000408 <Model_getfanTimeFlag>:
     408:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <fanTimeFlag>
     40c:	08 95       	ret

0000040e <Model_setfanTimeFlag>:
     40e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <fanTimeFlag>
     412:	08 95       	ret

00000414 <Model_getfanWindSpeed>:
     414:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <fanWindSpeed>
     418:	08 95       	ret

0000041a <Model_setfanWindSpeed>:
     41a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <fanWindSpeed>
     41e:	08 95       	ret

00000420 <Presenter_init>:
ï»¿#include "Presenter.h"
// ì¶ë ¥ ì ë¬¸ê°

void Presenter_init()
{
	FND_init();
     420:	8e d3       	rcall	.+1820   	; 0xb3e <FND_init>
	LCD_init();
     422:	2b c5       	rjmp	.+2646   	; 0xe7a <LCD_init>
     424:	08 95       	ret

00000426 <Presenter_dispFanData>:
     426:	df 92       	push	r13
}

void Presenter_dispFanData(uint8_t min, uint8_t sec)
{
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	6e 97       	sbiw	r28, 0x1e	; 30
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	e8 2e       	mov	r14, r24
     446:	16 2f       	mov	r17, r22
	uint8_t fanAutoManualState;
	fanAutoManualState = Model_getfanAutoManualState();
     448:	d3 df       	rcall	.-90     	; 0x3f0 <Model_getfanAutoManualState>
     44a:	d8 2e       	mov	r13, r24
	
	uint8_t fanWindSpeed;
	fanWindSpeed = Model_getfanWindSpeed();
     44c:	e3 df       	rcall	.-58     	; 0x414 <Model_getfanWindSpeed>
     44e:	f8 2e       	mov	r15, r24
	
	uint8_t fanTimerState;
	fanTimerState = Model_getfanTimerState();
     450:	d5 df       	rcall	.-86     	; 0x3fc <Model_getfanTimerState>
     452:	08 2f       	mov	r16, r24
     454:	88 23       	and	r24, r24
	
	uint16_t timerData;
	
	//FND DISPLAY
	if(fanTimerState != TIME_OFF)
     456:	49 f0       	breq	.+18     	; 0x46a <Presenter_dispFanData+0x44>
     458:	81 2f       	mov	r24, r17
	{	
		timerData = min*100 + sec;
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	24 e6       	ldi	r18, 0x64	; 100
		FND_setFndData(timerData);
     45e:	e2 9e       	mul	r14, r18
     460:	80 0d       	add	r24, r0
     462:	91 1d       	adc	r25, r1
     464:	11 24       	eor	r1, r1
     466:	a7 d4       	rcall	.+2382   	; 0xdb6 <FND_setFndData>
     468:	03 c0       	rjmp	.+6      	; 0x470 <Presenter_dispFanData+0x4a>
	}
	else
	{
		timerData = 0;
		FND_setFndData(timerData);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	a3 d4       	rcall	.+2374   	; 0xdb6 <FND_setFndData>
     470:	01 11       	cpse	r16, r1

	//LCD DISPLAY
	static uint8_t prevSec = 0xff;
	static uint8_t i, j;
	char buff[30];
	if(fanTimerState == TIME_OFF)
     472:	13 c0       	rjmp	.+38     	; 0x49a <Presenter_dispFanData+0x74>
     474:	81 e1       	ldi	r24, 0x11	; 17
	{
		sprintf(buff, "  Digital Fan!  ");
     476:	e7 e9       	ldi	r30, 0x97	; 151
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	de 01       	movw	r26, r28
     47c:	11 96       	adiw	r26, 0x01	; 1
     47e:	01 90       	ld	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	8a 95       	dec	r24
     484:	e1 f7       	brne	.-8      	; 0x47e <Presenter_dispFanData+0x58>
     486:	ae 01       	movw	r20, r28
		LCD_writeStringXY(0, 0, buff);
     488:	4f 5f       	subi	r20, 0xFF	; 255
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	37 d5       	rcall	.+2670   	; 0xf00 <LCD_writeStringXY>
     492:	82 e0       	ldi	r24, 0x02	; 2
		i = 2;
     494:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <i.2027>
     498:	56 c0       	rjmp	.+172    	; 0x546 <Presenter_dispFanData+0x120>
     49a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <prevSec.2026>
	}
	else if(sec != prevSec)
     49e:	18 17       	cp	r17, r24
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <Presenter_dispFanData+0x7e>
     4a2:	51 c0       	rjmp	.+162    	; 0x546 <Presenter_dispFanData+0x120>
     4a4:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <prevSec.2026>
	{
		prevSec = sec;
     4a8:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <i.2027>
		if((i == 0)|(i == 4))
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	91 11       	cpse	r25, r1
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	94 30       	cpi	r25, 0x04	; 4
     4b6:	09 f0       	breq	.+2      	; 0x4ba <Presenter_dispFanData+0x94>
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	82 2b       	or	r24, r18
     4bc:	a9 f0       	breq	.+42     	; 0x4e8 <Presenter_dispFanData+0xc2>
     4be:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <__data_end>
		{
			j ^= 1;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	89 27       	eor	r24, r25
     4c6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
     4ca:	81 e1       	ldi	r24, 0x11	; 17
			sprintf(buff, "                ");
     4cc:	e8 ea       	ldi	r30, 0xA8	; 168
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	de 01       	movw	r26, r28
     4d2:	11 96       	adiw	r26, 0x01	; 1
     4d4:	01 90       	ld	r0, Z+
     4d6:	0d 92       	st	X+, r0
     4d8:	8a 95       	dec	r24
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <Presenter_dispFanData+0xae>
			LCD_writeStringXY(0, 0, buff);
     4dc:	ae 01       	movw	r20, r28
     4de:	4f 5f       	subi	r20, 0xFF	; 255
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0c d5       	rcall	.+2584   	; 0xf00 <LCD_writeStringXY>
     4e8:	8d e0       	ldi	r24, 0x0D	; 13
		}
		sprintf(buff, "Digital Fan!");
     4ea:	e9 eb       	ldi	r30, 0xB9	; 185
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	de 01       	movw	r26, r28
     4f0:	11 96       	adiw	r26, 0x01	; 1
     4f2:	01 90       	ld	r0, Z+
     4f4:	0d 92       	st	X+, r0
     4f6:	8a 95       	dec	r24
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <Presenter_dispFanData+0xcc>
		LCD_writeStringXY(0, i, buff);
     4fa:	ae 01       	movw	r20, r28
     4fc:	4f 5f       	subi	r20, 0xFF	; 255
     4fe:	5f 4f       	sbci	r21, 0xFF	; 255
     500:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <i.2027>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	fc d4       	rcall	.+2552   	; 0xf00 <LCD_writeStringXY>
     508:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
		if(j)
     50c:	88 23       	and	r24, r24
     50e:	71 f0       	breq	.+28     	; 0x52c <Presenter_dispFanData+0x106>
		{
			LCD_gotoXY(0, i - 1);
     510:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <i.2027>
     514:	61 50       	subi	r22, 0x01	; 1
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	e9 d4       	rcall	.+2514   	; 0xeec <LCD_gotoXY>
     51a:	87 eb       	ldi	r24, 0xB7	; 183
			LCD_writeString(" ");
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	d1 d4       	rcall	.+2466   	; 0xec2 <LCD_writeString>
     520:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <i.2027>
			i++;
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <i.2027>
     52a:	0d c0       	rjmp	.+26     	; 0x546 <Presenter_dispFanData+0x120>
		}
		else
		{
			LCD_gotoXY(0, i + 12);
     52c:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <i.2027>
     530:	64 5f       	subi	r22, 0xF4	; 244
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	db d4       	rcall	.+2486   	; 0xeec <LCD_gotoXY>
     536:	87 eb       	ldi	r24, 0xB7	; 183
			LCD_writeString(" ");
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	c3 d4       	rcall	.+2438   	; 0xec2 <LCD_writeString>
     53c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <i.2027>
			i--;
     540:	81 50       	subi	r24, 0x01	; 1
     542:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <i.2027>
     546:	d1 10       	cpse	r13, r1
     548:	65 c0       	rjmp	.+202    	; 0x614 <Presenter_dispFanData+0x1ee>
		}				
	}
	if(fanAutoManualState == MANUAL)
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	f8 16       	cp	r15, r24
	{
		switch(fanWindSpeed)
     54e:	d1 f0       	breq	.+52     	; 0x584 <Presenter_dispFanData+0x15e>
     550:	f8 16       	cp	r15, r24
     552:	40 f0       	brcs	.+16     	; 0x564 <Presenter_dispFanData+0x13e>
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	f9 16       	cp	r15, r25
     558:	69 f1       	breq	.+90     	; 0x5b4 <Presenter_dispFanData+0x18e>
     55a:	23 e0       	ldi	r18, 0x03	; 3
     55c:	f2 16       	cp	r15, r18
     55e:	09 f4       	brne	.+2      	; 0x562 <Presenter_dispFanData+0x13c>
     560:	41 c0       	rjmp	.+130    	; 0x5e4 <Presenter_dispFanData+0x1be>
     562:	6f c0       	rjmp	.+222    	; 0x642 <Presenter_dispFanData+0x21c>
     564:	8f e0       	ldi	r24, 0x0F	; 15
     566:	e6 ec       	ldi	r30, 0xC6	; 198
		{
			case OFF :
			sprintf(buff, "  STOP   00:00");
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	de 01       	movw	r26, r28
     56c:	11 96       	adiw	r26, 0x01	; 1
     56e:	01 90       	ld	r0, Z+
     570:	0d 92       	st	X+, r0
     572:	8a 95       	dec	r24
     574:	e1 f7       	brne	.-8      	; 0x56e <Presenter_dispFanData+0x148>
     576:	ae 01       	movw	r20, r28
			LCD_writeStringXY(1, 0, buff);
     578:	4f 5f       	subi	r20, 0xFF	; 255
     57a:	5f 4f       	sbci	r21, 0xFF	; 255
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	bf d4       	rcall	.+2430   	; 0xf00 <LCD_writeStringXY>
     582:	5f c0       	rjmp	.+190    	; 0x642 <Presenter_dispFanData+0x21c>
     584:	1f 92       	push	r1
			break;
     586:	1f 93       	push	r17
			case LOW :
			sprintf(buff, "  LOW    %02d:%02d", min, sec);
     588:	1f 92       	push	r1
     58a:	ef 92       	push	r14
     58c:	85 ed       	ldi	r24, 0xD5	; 213
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	8e 01       	movw	r16, r28
     596:	0f 5f       	subi	r16, 0xFF	; 255
     598:	1f 4f       	sbci	r17, 0xFF	; 255
     59a:	1f 93       	push	r17
     59c:	0f 93       	push	r16
     59e:	51 d7       	rcall	.+3746   	; 0x1442 <sprintf>
     5a0:	a8 01       	movw	r20, r16
			LCD_writeStringXY(1, 0, buff);
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	ac d4       	rcall	.+2392   	; 0xf00 <LCD_writeStringXY>
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
			break;
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	47 c0       	rjmp	.+142    	; 0x642 <Presenter_dispFanData+0x21c>
     5b4:	1f 92       	push	r1
			case MEDIUM :
			sprintf(buff, "  MEDIUM %02d:%02d", min, sec);
     5b6:	1f 93       	push	r17
     5b8:	1f 92       	push	r1
     5ba:	ef 92       	push	r14
     5bc:	88 ee       	ldi	r24, 0xE8	; 232
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	8e 01       	movw	r16, r28
     5c6:	0f 5f       	subi	r16, 0xFF	; 255
     5c8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ca:	1f 93       	push	r17
     5cc:	0f 93       	push	r16
     5ce:	39 d7       	rcall	.+3698   	; 0x1442 <sprintf>
     5d0:	a8 01       	movw	r20, r16
			LCD_writeStringXY(1, 0, buff);
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	94 d4       	rcall	.+2344   	; 0xf00 <LCD_writeStringXY>
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
			break;
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	2f c0       	rjmp	.+94     	; 0x642 <Presenter_dispFanData+0x21c>
     5e4:	1f 92       	push	r1
			case HIGH :
			sprintf(buff, "  HIGH   %02d:%02d", min, sec);
     5e6:	1f 93       	push	r17
     5e8:	1f 92       	push	r1
     5ea:	ef 92       	push	r14
     5ec:	8b ef       	ldi	r24, 0xFB	; 251
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	8e 01       	movw	r16, r28
     5f6:	0f 5f       	subi	r16, 0xFF	; 255
     5f8:	1f 4f       	sbci	r17, 0xFF	; 255
     5fa:	1f 93       	push	r17
     5fc:	0f 93       	push	r16
     5fe:	21 d7       	rcall	.+3650   	; 0x1442 <sprintf>
     600:	a8 01       	movw	r20, r16
			LCD_writeStringXY(1, 0, buff);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	7c d4       	rcall	.+2296   	; 0xf00 <LCD_writeStringXY>
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
			break;
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	17 c0       	rjmp	.+46     	; 0x642 <Presenter_dispFanData+0x21c>
		}
	}
	else
	{
		sprintf(buff, "  AUTO   %02d:%02d", min, sec);
     614:	1f 92       	push	r1
     616:	1f 93       	push	r17
     618:	1f 92       	push	r1
     61a:	ef 92       	push	r14
     61c:	8e e0       	ldi	r24, 0x0E	; 14
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	9f 93       	push	r25
     622:	8f 93       	push	r24
     624:	8e 01       	movw	r16, r28
     626:	0f 5f       	subi	r16, 0xFF	; 255
     628:	1f 4f       	sbci	r17, 0xFF	; 255
     62a:	1f 93       	push	r17
     62c:	0f 93       	push	r16
     62e:	09 d7       	rcall	.+3602   	; 0x1442 <sprintf>
     630:	a8 01       	movw	r20, r16
		LCD_writeStringXY(1, 0, buff);
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	64 d4       	rcall	.+2248   	; 0xf00 <LCD_writeStringXY>
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	6e 96       	adiw	r28, 0x1e	; 30
     644:	0f b6       	in	r0, 0x3f	; 63
	}
}
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	08 95       	ret

0000065e <Service_fanInit>:
uint16_t random_time;

void Service_fanInit()
{
	//Time Initialize
	fan_millisec = 0;
     65e:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <fan_millisec+0x1>
     662:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <fan_millisec>
	fan_sec = 0;
     666:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <fan_sec>
	fan_min = 0;
     66a:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <fan_min>
	counter = 0;
     66e:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <counter+0x1>
     672:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <counter>
	random_time = 0;
     676:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <random_time+0x1>
     67a:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <random_time>
	
	//Fan Motor
	//PWM Initialize
	TCCR3B |= (0<<CS32) | (1<<CS31) | (1<<CS30); // PreScaler 1/64	// FAST PWM mode 14
     67e:	ea e8       	ldi	r30, 0x8A	; 138
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	83 60       	ori	r24, 0x03	; 3
     686:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM33) | (1<<WGM32);
     688:	80 81       	ld	r24, Z
     68a:	88 61       	ori	r24, 0x18	; 24
     68c:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM31) | (0<<WGM30);	
     68e:	eb e8       	ldi	r30, 0x8B	; 139
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	82 60       	ori	r24, 0x02	; 2
     696:	80 83       	st	Z, r24
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0); // non-inverting mode	
     698:	80 81       	ld	r24, Z
     69a:	80 68       	ori	r24, 0x80	; 128
     69c:	80 83       	st	Z, r24
	DDRE |= (1<<3);	
     69e:	82 b1       	in	r24, 0x02	; 2
     6a0:	88 60       	ori	r24, 0x08	; 8
     6a2:	82 b9       	out	0x02, r24	; 2
	
	//Buzzer
	//PWM Initialize
	TCCR1B |= (0 << CS12) | (1 << CS11) | (1 << CS10); // PreScaler 1/64
     6a4:	8e b5       	in	r24, 0x2e	; 46
     6a6:	83 60       	ori	r24, 0x03	; 3
     6a8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
     6aa:	8e b5       	in	r24, 0x2e	; 46
     6ac:	88 61       	ori	r24, 0x18	; 24
     6ae:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1 << WGM11) | (0 << WGM10);
     6b0:	8f b5       	in	r24, 0x2f	; 47
     6b2:	82 60       	ori	r24, 0x02	; 2
     6b4:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1A1) | (0 << COM1A0); // non-inverting mode
     6b6:	8f b5       	in	r24, 0x2f	; 47
     6b8:	80 68       	ori	r24, 0x80	; 128
     6ba:	8f bd       	out	0x2f, r24	; 47
	DDRB |= (1<<5);	
     6bc:	87 b3       	in	r24, 0x17	; 23
     6be:	80 62       	ori	r24, 0x20	; 32
     6c0:	87 bb       	out	0x17, r24	; 23
     6c2:	08 95       	ret

000006c4 <Service_fanLow>:
}

void Service_fanLow()	
{
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0);
     6c4:	eb e8       	ldi	r30, 0x8B	; 139
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	80 68       	ori	r24, 0x80	; 128
     6cc:	80 83       	st	Z, r24
	FAN_ICR = (250000 / 20000) - 1;	// 20khz frequency , Top value
     6ce:	e0 e8       	ldi	r30, 0x80	; 128
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	8b e0       	ldi	r24, 0x0B	; 11
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	91 83       	std	Z+1, r25	; 0x01
     6d8:	80 83       	st	Z, r24
	FAN_OCR = FAN_ICR / 1.4;		// Duty Cycle 71%
     6da:	60 81       	ld	r22, Z
     6dc:	71 81       	ldd	r23, Z+1	; 0x01
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	4f d5       	rcall	.+2718   	; 0x1182 <__floatunsisf>
     6e4:	23 e3       	ldi	r18, 0x33	; 51
     6e6:	33 e3       	ldi	r19, 0x33	; 51
     6e8:	43 eb       	ldi	r20, 0xB3	; 179
     6ea:	5f e3       	ldi	r21, 0x3F	; 63
     6ec:	b6 d4       	rcall	.+2412   	; 0x105a <__divsf3>
     6ee:	1d d5       	rcall	.+2618   	; 0x112a <__fixunssfsi>
     6f0:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     6f4:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCNT3 = 0;
     6f8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     6fc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     700:	08 95       	ret

00000702 <Service_fanMedium>:
}

void Service_fanMedium()	
{
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0);
     702:	eb e8       	ldi	r30, 0x8B	; 139
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	80 68       	ori	r24, 0x80	; 128
     70a:	80 83       	st	Z, r24
	FAN_ICR = (250000 / 20000) - 1;	// 20khz frequency , Top value
     70c:	e0 e8       	ldi	r30, 0x80	; 128
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	8b e0       	ldi	r24, 0x0B	; 11
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	91 83       	std	Z+1, r25	; 0x01
     716:	80 83       	st	Z, r24
	FAN_OCR = FAN_ICR / 1.15;		// Duty Cycle 86%
     718:	60 81       	ld	r22, Z
     71a:	71 81       	ldd	r23, Z+1	; 0x01
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	30 d5       	rcall	.+2656   	; 0x1182 <__floatunsisf>
     722:	23 e3       	ldi	r18, 0x33	; 51
     724:	33 e3       	ldi	r19, 0x33	; 51
     726:	43 e9       	ldi	r20, 0x93	; 147
     728:	5f e3       	ldi	r21, 0x3F	; 63
     72a:	97 d4       	rcall	.+2350   	; 0x105a <__divsf3>
     72c:	fe d4       	rcall	.+2556   	; 0x112a <__fixunssfsi>
     72e:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     732:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCNT3 = 0;
     736:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     73a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     73e:	08 95       	ret

00000740 <Service_fanHigh>:
}

void Service_fanHigh()	
{
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0);
     740:	eb e8       	ldi	r30, 0x8B	; 139
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	80 68       	ori	r24, 0x80	; 128
     748:	80 83       	st	Z, r24
	FAN_ICR = (250000 / 20000) - 1;	// 20khz frequency , Top value
     74a:	e0 e8       	ldi	r30, 0x80	; 128
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	8b e0       	ldi	r24, 0x0B	; 11
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	91 83       	std	Z+1, r25	; 0x01
     754:	80 83       	st	Z, r24
	FAN_OCR = FAN_ICR / 1;			// Duty Cycle 100%
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     75e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCNT3 = 0;
     762:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     766:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     76a:	08 95       	ret

0000076c <Service_fanOff>:
}

void Service_fanOff()
{
	TCCR3A &= ~((1<<COM3A1) | (1<<COM3A0));
     76c:	eb e8       	ldi	r30, 0x8B	; 139
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	8f 73       	andi	r24, 0x3F	; 63
     774:	80 83       	st	Z, r24
	TCNT3 = 0;
     776:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     77a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     77e:	08 95       	ret

00000780 <Service_fanAutoSpeed>:
}

void Service_fanAutoSpeed()
{
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0);
     78c:	eb e8       	ldi	r30, 0x8B	; 139
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	80 68       	ori	r24, 0x80	; 128
     794:	80 83       	st	Z, r24
	FAN_ICR = (250000 / 20000) - 1;							// 20khz frequency , Top value
     796:	e0 e8       	ldi	r30, 0x80	; 128
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	8b e0       	ldi	r24, 0x0B	; 11
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	91 83       	std	Z+1, r25	; 0x01
     7a0:	80 83       	st	Z, r24
	FAN_OCR = FAN_ICR / ((double)((rand() % 6) + 10) / 10);			// Duty Cycle 66 ~ 100%
     7a2:	c0 81       	ld	r28, Z
     7a4:	d1 81       	ldd	r29, Z+1	; 0x01
     7a6:	36 d6       	rcall	.+3180   	; 0x1414 <rand>
     7a8:	66 e0       	ldi	r22, 0x06	; 6
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	78 d5       	rcall	.+2800   	; 0x129e <__divmodhi4>
     7ae:	bc 01       	movw	r22, r24
     7b0:	66 5f       	subi	r22, 0xF6	; 246
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	07 2e       	mov	r0, r23
     7b6:	00 0c       	add	r0, r0
     7b8:	88 0b       	sbc	r24, r24
     7ba:	99 0b       	sbc	r25, r25
     7bc:	e4 d4       	rcall	.+2504   	; 0x1186 <__floatsisf>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e2       	ldi	r20, 0x20	; 32
     7c4:	51 e4       	ldi	r21, 0x41	; 65
     7c6:	49 d4       	rcall	.+2194   	; 0x105a <__divsf3>
     7c8:	6b 01       	movw	r12, r22
     7ca:	7c 01       	movw	r14, r24
     7cc:	be 01       	movw	r22, r28
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	d7 d4       	rcall	.+2478   	; 0x1182 <__floatunsisf>
     7d4:	a7 01       	movw	r20, r14
     7d6:	96 01       	movw	r18, r12
     7d8:	40 d4       	rcall	.+2176   	; 0x105a <__divsf3>
     7da:	a7 d4       	rcall	.+2382   	; 0x112a <__fixunssfsi>
     7dc:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     7e0:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCNT3 = 0;
     7e4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7e8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	ff 90       	pop	r15
     7f2:	ef 90       	pop	r14
     7f4:	df 90       	pop	r13
     7f6:	cf 90       	pop	r12
     7f8:	08 95       	ret

000007fa <Service_fanDecMillisec>:

/////Interrupt Service/////
void Service_fanDecMillisec()							
{
	uint8_t fanTimerState;
	fanTimerState = Model_getfanTimerState();
     7fa:	00 de       	rcall	.-1024   	; 0x3fc <Model_getfanTimerState>
	
	if(fan_millisec || fan_sec || fan_min)
     7fc:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <fan_millisec>
     800:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <fan_millisec+0x1>
     804:	21 15       	cp	r18, r1
     806:	31 05       	cpc	r19, r1
     808:	41 f4       	brne	.+16     	; 0x81a <Service_fanDecMillisec+0x20>
     80a:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <fan_sec>
     80e:	91 11       	cpse	r25, r1
     810:	04 c0       	rjmp	.+8      	; 0x81a <Service_fanDecMillisec+0x20>
     812:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <fan_min>
     816:	99 23       	and	r25, r25
     818:	41 f1       	breq	.+80     	; 0x86a <Service_fanDecMillisec+0x70>
	{
		if(fanTimerState != TIME_OFF)
     81a:	88 23       	and	r24, r24
     81c:	31 f1       	breq	.+76     	; 0x86a <Service_fanDecMillisec+0x70>
		{
			if (fan_millisec > 0) {
     81e:	21 15       	cp	r18, r1
     820:	31 05       	cpc	r19, r1
     822:	39 f0       	breq	.+14     	; 0x832 <Service_fanDecMillisec+0x38>
				fan_millisec--;
     824:	21 50       	subi	r18, 0x01	; 1
     826:	31 09       	sbc	r19, r1
     828:	30 93 54 02 	sts	0x0254, r19	; 0x800254 <fan_millisec+0x1>
     82c:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <fan_millisec>
     830:	08 95       	ret
				} else {
				fan_millisec = 999;
     832:	87 ee       	ldi	r24, 0xE7	; 231
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <fan_millisec+0x1>
     83a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <fan_millisec>
				if (fan_sec > 0) {
     83e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <fan_sec>
     842:	88 23       	and	r24, r24
     844:	21 f0       	breq	.+8      	; 0x84e <Service_fanDecMillisec+0x54>
					fan_sec--;
     846:	81 50       	subi	r24, 0x01	; 1
     848:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <fan_sec>
     84c:	08 95       	ret
					} else {
					fan_sec = 59;
     84e:	8b e3       	ldi	r24, 0x3B	; 59
     850:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <fan_sec>
					if (fan_min > 0) {
     854:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <fan_min>
     858:	88 23       	and	r24, r24
     85a:	21 f0       	breq	.+8      	; 0x864 <Service_fanDecMillisec+0x6a>
						fan_min--;
     85c:	81 50       	subi	r24, 0x01	; 1
     85e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <fan_min>
     862:	08 95       	ret
						} else {
						fan_min = 59;
     864:	8b e3       	ldi	r24, 0x3B	; 59
     866:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <fan_min>
     86a:	08 95       	ret

0000086c <Service_fanAutoConfigure>:
}
}

void Service_fanAutoConfigure()
{
	counter++;
     86c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <counter>
     870:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <counter+0x1>
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <counter+0x1>
     87a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <counter>
		if (counter >= 2000) {
     87e:	80 3d       	cpi	r24, 0xD0	; 208
     880:	97 40       	sbci	r25, 0x07	; 7
     882:	40 f0       	brcs	.+16     	; 0x894 <Service_fanAutoConfigure+0x28>
			uint8_t fanAutoManualState;
			fanAutoManualState = Model_getfanAutoManualState();
     884:	b5 dd       	rcall	.-1174   	; 0x3f0 <Model_getfanAutoManualState>
			
			if(fanAutoManualState == AUTO)
     886:	81 30       	cpi	r24, 0x01	; 1
			{
				Service_fanAutoSpeed();
     888:	09 f4       	brne	.+2      	; 0x88c <Service_fanAutoConfigure+0x20>
     88a:	7a df       	rcall	.-268    	; 0x780 <Service_fanAutoSpeed>
			}								
			counter = 0;
     88c:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <counter+0x1>
     890:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <counter>
     894:	08 95       	ret

00000896 <Buzzer_makeHertz>:
	}	
}

void Buzzer_makeHertz(uint16_t hertz)	// 20 20Khz ê°ì²­ì£¼íì
{
	BUZZER_ICR =  (250000 / hertz) - 1;	// 1khz frequency , Top value
     896:	9c 01       	movw	r18, r24
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	60 e9       	ldi	r22, 0x90	; 144
     89e:	70 ed       	ldi	r23, 0xD0	; 208
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0f d5       	rcall	.+2590   	; 0x12c4 <__divmodsi4>
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	31 09       	sbc	r19, r1
     8aa:	37 bd       	out	0x27, r19	; 39
     8ac:	26 bd       	out	0x26, r18	; 38
	BUZZER_OCR = BUZZER_ICR / 2;		// Duty Cycle 50%
     8ae:	86 b5       	in	r24, 0x26	; 38
     8b0:	97 b5       	in	r25, 0x27	; 39
     8b2:	96 95       	lsr	r25
     8b4:	87 95       	ror	r24
     8b6:	9b bd       	out	0x2b, r25	; 43
     8b8:	8a bd       	out	0x2a, r24	; 42
     8ba:	08 95       	ret

000008bc <playTone>:
	playTone(frequency, fanWindSpeed);
	
}

void playTone(uint16_t* frequency, uint8_t speed)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
	if(speed != OFF)
     8c2:	66 23       	and	r22, r22
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <playTone+0xc>
     8c6:	44 c0       	rjmp	.+136    	; 0x950 <playTone+0x94>
	{
		TCCR1A |= (1 << COM1A1) | (0 << COM1A0);
     8c8:	8f b5       	in	r24, 0x2f	; 47
     8ca:	80 68       	ori	r24, 0x80	; 128
     8cc:	8f bd       	out	0x2f, r24	; 47
		counter2++;
     8ce:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <counter2>
     8d2:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <counter2+0x1>
     8d6:	31 96       	adiw	r30, 0x01	; 1
     8d8:	f0 93 57 02 	sts	0x0257, r31	; 0x800257 <counter2+0x1>
     8dc:	e0 93 56 02 	sts	0x0256, r30	; 0x800256 <counter2>
		if (counter2 >= (1000 / speed)) {
     8e0:	26 2f       	mov	r18, r22
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	88 ee       	ldi	r24, 0xE8	; 232
     8e6:	93 e0       	ldi	r25, 0x03	; 3
     8e8:	b9 01       	movw	r22, r18
     8ea:	d9 d4       	rcall	.+2482   	; 0x129e <__divmodhi4>
     8ec:	e6 17       	cp	r30, r22
     8ee:	f7 07       	cpc	r31, r23
     8f0:	20 f1       	brcs	.+72     	; 0x93a <playTone+0x7e>
			TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0));
     8f2:	8f b5       	in	r24, 0x2f	; 47
     8f4:	8f 73       	andi	r24, 0x3F	; 63
     8f6:	8f bd       	out	0x2f, r24	; 47
			i++;
     8f8:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <i>
     8fc:	8f 5f       	subi	r24, 0xFF	; 255
			i %= 25;
     8fe:	99 e2       	ldi	r25, 0x29	; 41
     900:	89 9f       	mul	r24, r25
     902:	91 2d       	mov	r25, r1
     904:	11 24       	eor	r1, r1
     906:	96 95       	lsr	r25
     908:	96 95       	lsr	r25
     90a:	49 e1       	ldi	r20, 0x19	; 25
     90c:	94 9f       	mul	r25, r20
     90e:	80 19       	sub	r24, r0
     910:	11 24       	eor	r1, r1
     912:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <i>
			if (counter2 >= (1300 / speed))
     916:	84 e1       	ldi	r24, 0x14	; 20
     918:	95 e0       	ldi	r25, 0x05	; 5
     91a:	b9 01       	movw	r22, r18
     91c:	c0 d4       	rcall	.+2432   	; 0x129e <__divmodhi4>
     91e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <counter2>
     922:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <counter2+0x1>
     926:	86 17       	cp	r24, r22
     928:	97 07       	cpc	r25, r23
     92a:	a8 f0       	brcs	.+42     	; 0x956 <playTone+0x9a>
			{
				counter2 = 0;
     92c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <counter2+0x1>
     930:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <counter2>
				TCNT1 = 0;
     934:	1d bc       	out	0x2d, r1	; 45
     936:	1c bc       	out	0x2c, r1	; 44
     938:	0e c0       	rjmp	.+28     	; 0x956 <playTone+0x9a>
			}
		}
		else
		{
			Buzzer_makeHertz(frequency[i]);
     93a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <i>
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	c8 0f       	add	r28, r24
     946:	d9 1f       	adc	r29, r25
     948:	88 81       	ld	r24, Y
     94a:	99 81       	ldd	r25, Y+1	; 0x01
     94c:	a4 df       	rcall	.-184    	; 0x896 <Buzzer_makeHertz>
     94e:	03 c0       	rjmp	.+6      	; 0x956 <playTone+0x9a>
		}
		
	}
	else
	{
		TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0));
     950:	8f b5       	in	r24, 0x2f	; 47
     952:	8f 73       	andi	r24, 0x3F	; 63
     954:	8f bd       	out	0x2f, r24	; 47
	}	
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <Service_MusicConfigure>:
			counter = 0;
		}
}

void Service_MusicConfigure()
{
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	e2 97       	sbiw	r28, 0x32	; 50
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
	uint8_t fanWindSpeed;
	fanWindSpeed = Model_getfanWindSpeed();
     970:	51 dd       	rcall	.-1374   	; 0x414 <Model_getfanWindSpeed>
	
	uint16_t frequency[] = { 
     972:	92 e3       	ldi	r25, 0x32	; 50
     974:	e3 e1       	ldi	r30, 0x13	; 19
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	de 01       	movw	r26, r28
     97a:	11 96       	adiw	r26, 0x01	; 1
     97c:	01 90       	ld	r0, Z+
     97e:	0d 92       	st	X+, r0
     980:	9a 95       	dec	r25
     982:	e1 f7       	brne	.-8      	; 0x97c <Service_MusicConfigure+0x20>
		 NOTE_G4, NOTE_G4, NOTE_A4, NOTE_G4, NOTE_C5, NOTE_B4,
		 NOTE_G4, NOTE_G4, NOTE_A4, NOTE_G4, NOTE_D5, NOTE_C5,
		 NOTE_G4, NOTE_G4, NOTE_G5, NOTE_E5, NOTE_C5, NOTE_B4, NOTE_A4,
		 NOTE_F5, NOTE_F5, NOTE_E5, NOTE_C5, NOTE_D5, NOTE_C5 };
	
	playTone(frequency, fanWindSpeed);
     984:	68 2f       	mov	r22, r24
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	98 df       	rcall	.-208    	; 0x8bc <playTone>
	
}
     98c:	e2 96       	adiw	r28, 0x32	; 50
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <Service_fanTimerConfigure>:
	Service_fanAutoConfigure();
	Service_fanDisplay();
}

void Service_fanTimerConfigure()
{
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
	uint8_t fanAutoManualState;
	fanAutoManualState = Model_getfanAutoManualState();
     9a4:	25 dd       	rcall	.-1462   	; 0x3f0 <Model_getfanAutoManualState>
     9a6:	18 2f       	mov	r17, r24
	
	uint8_t fanTimerState;
	fanTimerState = Model_getfanTimerState();
     9a8:	29 dd       	rcall	.-1454   	; 0x3fc <Model_getfanTimerState>
     9aa:	c8 2f       	mov	r28, r24
	
	uint8_t fanTimeFlag;
	fanTimeFlag = Model_getfanTimeFlag();
     9ac:	2d dd       	rcall	.-1446   	; 0x408 <Model_getfanTimeFlag>
     9ae:	d8 2f       	mov	r29, r24
	
	uint8_t fanWindSpeed;
	fanWindSpeed = Model_getfanWindSpeed();	
     9b0:	31 dd       	rcall	.-1438   	; 0x414 <Model_getfanWindSpeed>
     9b2:	91 e0       	ldi	r25, 0x01	; 1
			
	if((fanWindSpeed == OFF) & (fanAutoManualState == MANUAL))		// stop ë²í¼ ëë¥´ë©´ ìê° ì´ê¸°í
     9b4:	81 11       	cpse	r24, r1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	11 11       	cpse	r17, r1
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	89 23       	and	r24, r25
     9c0:	41 f0       	breq	.+16     	; 0x9d2 <Service_fanTimerConfigure+0x34>
     9c2:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <fan_min>
	{
		fan_min = 0;
     9c6:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <fan_sec>
		fan_sec = 0;
     9ca:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <fan_millisec+0x1>
		fan_millisec = 0;
     9ce:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <fan_millisec>
     9d2:	d1 11       	cpse	r29, r1
	}
	
	if(!fanTimeFlag)												// íì´ë¨¸ ë²í¼ ëë¦´ëë§ë¤ ìë¡ ì¤ì ëê².
     9d4:	30 c0       	rjmp	.+96     	; 0xa36 <Service_fanTimerConfigure+0x98>
     9d6:	c1 30       	cpi	r28, 0x01	; 1
	{
		switch(fanTimerState)
     9d8:	79 f0       	breq	.+30     	; 0x9f8 <Service_fanTimerConfigure+0x5a>
     9da:	28 f0       	brcs	.+10     	; 0x9e6 <Service_fanTimerConfigure+0x48>
     9dc:	c2 30       	cpi	r28, 0x02	; 2
     9de:	b1 f0       	breq	.+44     	; 0xa0c <Service_fanTimerConfigure+0x6e>
     9e0:	c3 30       	cpi	r28, 0x03	; 3
     9e2:	f1 f0       	breq	.+60     	; 0xa20 <Service_fanTimerConfigure+0x82>
     9e4:	26 c0       	rjmp	.+76     	; 0xa32 <Service_fanTimerConfigure+0x94>
     9e6:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <fan_min>
		{
			case TIME_OFF :
			fan_min = 0;
     9ea:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <fan_sec>
			fan_sec = 0;
     9ee:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <fan_millisec+0x1>
			fan_millisec = 0;
     9f2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <fan_millisec>
     9f6:	1d c0       	rjmp	.+58     	; 0xa32 <Service_fanTimerConfigure+0x94>
			break;
     9f8:	83 e0       	ldi	r24, 0x03	; 3
			case TIME3 :
			fan_min = 3;
     9fa:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <fan_min>
     9fe:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <fan_sec>
			fan_sec = 0;
     a02:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <fan_millisec+0x1>
			fan_millisec = 0;
     a06:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <fan_millisec>
     a0a:	13 c0       	rjmp	.+38     	; 0xa32 <Service_fanTimerConfigure+0x94>
			break;
     a0c:	85 e0       	ldi	r24, 0x05	; 5
			case TIME5 :
			fan_min = 5;
     a0e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <fan_min>
     a12:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <fan_sec>
			fan_sec = 0;
     a16:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <fan_millisec+0x1>
			fan_millisec = 0;
     a1a:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <fan_millisec>
     a1e:	09 c0       	rjmp	.+18     	; 0xa32 <Service_fanTimerConfigure+0x94>
			break;
     a20:	87 e0       	ldi	r24, 0x07	; 7
			case TIME7 :
			fan_min = 7;
     a22:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <fan_min>
     a26:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <fan_sec>
			fan_sec = 0;
     a2a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <fan_millisec+0x1>
			fan_millisec = 0;
     a2e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <fan_millisec>
			break;
		}
		fanTimeFlag = 1;
		Model_setfanTimeFlag(fanTimeFlag);
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	ec dc       	rcall	.-1576   	; 0x40e <Model_setfanTimeFlag>
     a36:	df 91       	pop	r29
	}

}
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	08 95       	ret

00000a3e <Service_fanTimeOver>:
     a3e:	cf 93       	push	r28

void Service_fanTimeOver()
{
	uint8_t fanAutoManualState;
	fanAutoManualState = Model_getfanAutoManualState();
     a40:	d7 dc       	rcall	.-1618   	; 0x3f0 <Model_getfanAutoManualState>
	
	uint8_t fanTimerState;
	fanTimerState = Model_getfanTimerState();
     a42:	dc dc       	rcall	.-1608   	; 0x3fc <Model_getfanTimerState>
     a44:	c8 2f       	mov	r28, r24
	
	uint8_t fanWindSpeed;
	fanWindSpeed = Model_getfanWindSpeed();	
     a46:	e6 dc       	rcall	.-1588   	; 0x414 <Model_getfanWindSpeed>
     a48:	cc 23       	and	r28, r28
	
	if(fanTimerState != TIME_OFF)									// íì´ë¨¸ ì¼ì ¸ììë
     a4a:	91 f0       	breq	.+36     	; 0xa70 <Service_fanTimeOver+0x32>
     a4c:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <fan_sec>
	{
		if(!(fan_millisec | fan_sec | fan_min))						// ë¤ 0ì¼ë
     a50:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <fan_millisec>
     a54:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <fan_millisec+0x1>
     a58:	82 2b       	or	r24, r18
     a5a:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <fan_min>
     a5e:	82 2b       	or	r24, r18
     a60:	89 2b       	or	r24, r25
     a62:	31 f4       	brne	.+12     	; 0xa70 <Service_fanTimeOver+0x32>
		{
			//MANUALë¡ ì í
			fanAutoManualState = MANUAL;
			Model_setfanAutoManualState(fanAutoManualState);
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	c7 dc       	rcall	.-1650   	; 0x3f6 <Model_setfanAutoManualState>
			//fan wind speed off
			fanWindSpeed = OFF;
			Model_setfanWindSpeed(fanWindSpeed);					// ë°ëì¸ê¸° OFF
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	d7 dc       	rcall	.-1618   	; 0x41a <Model_setfanWindSpeed>
     a6c:	80 e0       	ldi	r24, 0x00	; 0
			//íì´ë¨¸ë OFF
			fanTimerState = TIME_OFF;								// íì´ë¨¸ë ëê¸°
			Model_setfanTimerState(fanTimerState);
     a6e:	c9 dc       	rcall	.-1646   	; 0x402 <Model_setfanTimerState>
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <Service_fanManualConfigure>:
		}
	}
}
     a74:	cf 93       	push	r28
     a76:	bc dc       	rcall	.-1672   	; 0x3f0 <Model_getfanAutoManualState>

void Service_fanManualConfigure()
{
	uint8_t fanAutoManualState;
	fanAutoManualState = Model_getfanAutoManualState();
     a78:	c8 2f       	mov	r28, r24
	
	uint8_t fanWindSpeed;
	fanWindSpeed = Model_getfanWindSpeed();
     a7a:	cc dc       	rcall	.-1640   	; 0x414 <Model_getfanWindSpeed>
     a7c:	c1 11       	cpse	r28, r1
	
	if(fanAutoManualState == MANUAL)// ìëëª¨ëì¼ë
     a7e:	0f c0       	rjmp	.+30     	; 0xa9e <Service_fanManualConfigure+0x2a>
     a80:	81 30       	cpi	r24, 0x01	; 1
	{
		switch(fanWindSpeed)
     a82:	41 f0       	breq	.+16     	; 0xa94 <Service_fanManualConfigure+0x20>
     a84:	28 f0       	brcs	.+10     	; 0xa90 <Service_fanManualConfigure+0x1c>
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	39 f0       	breq	.+14     	; 0xa98 <Service_fanManualConfigure+0x24>
     a8a:	83 30       	cpi	r24, 0x03	; 3
     a8c:	39 f0       	breq	.+14     	; 0xa9c <Service_fanManualConfigure+0x28>
     a8e:	07 c0       	rjmp	.+14     	; 0xa9e <Service_fanManualConfigure+0x2a>
		{
			case OFF :
				Service_fanOff();
     a90:	6d de       	rcall	.-806    	; 0x76c <Service_fanOff>
			break;
			case LOW :
				Service_fanLow();
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <Service_fanManualConfigure+0x2a>
			break;
     a94:	17 de       	rcall	.-978    	; 0x6c4 <Service_fanLow>
			case MEDIUM :
				Service_fanMedium();
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <Service_fanManualConfigure+0x2a>
     a98:	34 de       	rcall	.-920    	; 0x702 <Service_fanMedium>
			break;
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <Service_fanManualConfigure+0x2a>
			case HIGH :
				Service_fanHigh();
     a9c:	51 de       	rcall	.-862    	; 0x740 <Service_fanHigh>
     a9e:	cf 91       	pop	r28
			break;
		}
	}
}
     aa0:	08 95       	ret

00000aa2 <Service_fanDisplay>:
     aa2:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <fan_sec>

void Service_fanDisplay()
{
	Presenter_dispFanData(fan_min, fan_sec);
     aa6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <fan_min>
     aaa:	bd cc       	rjmp	.-1670   	; 0x426 <Presenter_dispFanData>
     aac:	08 95       	ret

00000aae <Service_fanRun>:
}
////////////////////////////

void Service_fanRun()
{
	Service_fanTimerConfigure();
     aae:	77 df       	rcall	.-274    	; 0x99e <Service_fanTimerConfigure>
	Service_fanTimeOver();
     ab0:	c6 df       	rcall	.-116    	; 0xa3e <Service_fanTimeOver>
	Service_fanManualConfigure();
     ab2:	e0 df       	rcall	.-64     	; 0xa74 <Service_fanManualConfigure>
	Service_fanAutoConfigure();
     ab4:	db de       	rcall	.-586    	; 0x86c <Service_fanAutoConfigure>
     ab6:	f5 cf       	rjmp	.-22     	; 0xaa2 <Service_fanDisplay>
	Service_fanDisplay();
     ab8:	08 95       	ret

00000aba <Button_init>:
     aba:	0f 93       	push	r16
     abc:	cf 93       	push	r28
ï»¿// GPIO connected BUTTON DRIVER VER.

#include "Button.h"		// í´ë¹ íì¼ ê¸°ì¤ì¼ë¡ íì¼ ì°¾ëë¤. íì¼ì´ ë°ë¡ ìì ìì´ì ê²½ë¡ì¤ì í  íììì.

void Button_init(button_t *btn, volatile uint8_t* ddr, volatile uint8_t* pin, volatile uint8_t* port, uint8_t pinNum)
{
     abe:	df 93       	push	r29
     ac0:	ec 01       	movw	r28, r24
     ac2:	cb 01       	movw	r24, r22
	btn->DDR = ddr;	// -> : í¬ì¸í° êµ¬ì¡°ì²´ ë³ì ë´ì ë©¤ë² ë³ì ì ê·¼
     ac4:	79 83       	std	Y+1, r23	; 0x01
     ac6:	68 83       	st	Y, r22
	btn->PIN = pin;
     ac8:	5b 83       	std	Y+3, r21	; 0x03
     aca:	4a 83       	std	Y+2, r20	; 0x02
	btn->PORT = port;
     acc:	3d 83       	std	Y+5, r19	; 0x05
     ace:	2c 83       	std	Y+4, r18	; 0x04
	btn->pinNum = pinNum;
     ad0:	0e 83       	std	Y+6, r16	; 0x06
	btn->prevState = 1;
     ad2:	21 e0       	ldi	r18, 0x01	; 1
     ad4:	2f 83       	std	Y+7, r18	; 0x07
	// í¹ì  ë¹í¸ 0ì¼ë¡ ì¤ì íì¬ ìë ¥ëª¨ë
	Gpio_initPin(btn->DDR, INPUT, btn->pinNum);
     ad6:	40 2f       	mov	r20, r16
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	27 d2       	rcall	.+1102   	; 0xf2a <Gpio_initPin>
	Gpio_initPort(btn->PORT, btn->pinNum);
     adc:	6e 81       	ldd	r22, Y+6	; 0x06
     ade:	8c 81       	ldd	r24, Y+4	; 0x04
     ae0:	9d 81       	ldd	r25, Y+5	; 0x05
     ae2:	1a d2       	rcall	.+1076   	; 0xf18 <Gpio_initPort>
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	0f 91       	pop	r16
     aea:	08 95       	ret

00000aec <Button_GetState>:
uint8_t Button_GetState(button_t* btn)
{
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	ec 01       	movw	r28, r24
	uint8_t curState = Gpio_readPin(btn->PIN, btn->pinNum);
     af2:	6e 81       	ldd	r22, Y+6	; 0x06
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	9b 81       	ldd	r25, Y+3	; 0x03
     af8:	50 d2       	rcall	.+1184   	; 0xf9a <Gpio_readPin>
	
	if((curState == 0) && (btn->prevState == 1))
     afa:	81 11       	cpse	r24, r1
     afc:	0c c0       	rjmp	.+24     	; 0xb16 <Button_GetState+0x2a>
     afe:	9f 81       	ldd	r25, Y+7	; 0x07
     b00:	91 30       	cpi	r25, 0x01	; 1
     b02:	49 f4       	brne	.+18     	; 0xb16 <Button_GetState+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b04:	8f e3       	ldi	r24, 0x3F	; 63
     b06:	9c e9       	ldi	r25, 0x9C	; 156
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <Button_GetState+0x1c>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <Button_GetState+0x22>
     b0e:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevState = PUSHED;
     b10:	1f 82       	std	Y+7, r1	; 0x07
		return ACT_PUSHED;
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	11 c0       	rjmp	.+34     	; 0xb38 <Button_GetState+0x4c>
	}
	else if ((curState != 0) && (btn->prevState == 0))
     b16:	88 23       	and	r24, r24
     b18:	61 f0       	breq	.+24     	; 0xb32 <Button_GetState+0x46>
     b1a:	8f 81       	ldd	r24, Y+7	; 0x07
     b1c:	81 11       	cpse	r24, r1
     b1e:	0b c0       	rjmp	.+22     	; 0xb36 <Button_GetState+0x4a>
     b20:	8f e3       	ldi	r24, 0x3F	; 63
     b22:	9c e9       	ldi	r25, 0x9C	; 156
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <Button_GetState+0x38>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <Button_GetState+0x3e>
     b2a:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevState = RELEASED;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	8f 83       	std	Y+7, r24	; 0x07
		return ACT_RELEASED;
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <Button_GetState+0x4c>
	}
	return ACT_NONE;
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <Button_GetState+0x4c>
     b36:	82 e0       	ldi	r24, 0x02	; 2
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <FND_init>:
	fndColonFlag = 1;
}

void FND_colonOff()
{
	fndColonFlag = 0;
     b3e:	82 b1       	in	r24, 0x02	; 2
     b40:	80 6f       	ori	r24, 0xF0	; 240
     b42:	82 b9       	out	0x02, r24	; 2
     b44:	8f ef       	ldi	r24, 0xFF	; 255
     b46:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     b4a:	08 95       	ret

00000b4c <FND_dispNum>:
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	2b 97       	sbiw	r28, 0x0b	; 11
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	8c 01       	movw	r16, r24
     b66:	8b e0       	ldi	r24, 0x0B	; 11
     b68:	e5 e4       	ldi	r30, 0x45	; 69
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	de 01       	movw	r26, r28
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	01 90       	ld	r0, Z+
     b72:	0d 92       	st	X+, r0
     b74:	8a 95       	dec	r24
     b76:	e1 f7       	brne	.-8      	; 0xb70 <FND_dispNum+0x24>
     b78:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <fndDigitState.1770>
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	65 e0       	ldi	r22, 0x05	; 5
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	8c d3       	rcall	.+1816   	; 0x129e <__divmodhi4>
     b86:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <fndDigitState.1770>
     b8a:	83 b1       	in	r24, 0x03	; 3
     b8c:	80 6f       	ori	r24, 0xF0	; 240
     b8e:	83 b9       	out	0x03, r24	; 3
     b90:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <fndDigitState.1770>
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	09 f4       	brne	.+2      	; 0xb9a <FND_dispNum+0x4e>
     b98:	86 c0       	rjmp	.+268    	; 0xca6 <FND_dispNum+0x15a>
     b9a:	30 f4       	brcc	.+12     	; 0xba8 <FND_dispNum+0x5c>
     b9c:	88 23       	and	r24, r24
     b9e:	59 f0       	breq	.+22     	; 0xbb6 <FND_dispNum+0x6a>
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <FND_dispNum+0x5a>
     ba4:	47 c0       	rjmp	.+142    	; 0xc34 <FND_dispNum+0xe8>
     ba6:	fc c0       	rjmp	.+504    	; 0xda0 <FND_dispNum+0x254>
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	09 f4       	brne	.+2      	; 0xbae <FND_dispNum+0x62>
     bac:	b3 c0       	rjmp	.+358    	; 0xd14 <FND_dispNum+0x1c8>
     bae:	84 30       	cpi	r24, 0x04	; 4
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <FND_dispNum+0x68>
     bb2:	de c0       	rjmp	.+444    	; 0xd70 <FND_dispNum+0x224>
     bb4:	f5 c0       	rjmp	.+490    	; 0xda0 <FND_dispNum+0x254>
     bb6:	98 01       	movw	r18, r16
     bb8:	36 95       	lsr	r19
     bba:	27 95       	ror	r18
     bbc:	36 95       	lsr	r19
     bbe:	27 95       	ror	r18
     bc0:	36 95       	lsr	r19
     bc2:	27 95       	ror	r18
     bc4:	a5 ec       	ldi	r26, 0xC5	; 197
     bc6:	b0 e2       	ldi	r27, 0x20	; 32
     bc8:	99 d3       	rcall	.+1842   	; 0x12fc <__umulhisi3>
     bca:	ac 01       	movw	r20, r24
     bcc:	52 95       	swap	r21
     bce:	42 95       	swap	r20
     bd0:	4f 70       	andi	r20, 0x0F	; 15
     bd2:	45 27       	eor	r20, r21
     bd4:	5f 70       	andi	r21, 0x0F	; 15
     bd6:	45 27       	eor	r20, r21
     bd8:	9a 01       	movw	r18, r20
     bda:	ad ec       	ldi	r26, 0xCD	; 205
     bdc:	bc ec       	ldi	r27, 0xCC	; 204
     bde:	8e d3       	rcall	.+1820   	; 0x12fc <__umulhisi3>
     be0:	96 95       	lsr	r25
     be2:	87 95       	ror	r24
     be4:	96 95       	lsr	r25
     be6:	87 95       	ror	r24
     be8:	96 95       	lsr	r25
     bea:	87 95       	ror	r24
     bec:	9c 01       	movw	r18, r24
     bee:	22 0f       	add	r18, r18
     bf0:	33 1f       	adc	r19, r19
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	82 0f       	add	r24, r18
     c00:	93 1f       	adc	r25, r19
     c02:	9a 01       	movw	r18, r20
     c04:	28 1b       	sub	r18, r24
     c06:	39 0b       	sbc	r19, r25
     c08:	e1 e0       	ldi	r30, 0x01	; 1
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	ec 0f       	add	r30, r28
     c0e:	fd 1f       	adc	r31, r29
     c10:	e2 0f       	add	r30, r18
     c12:	f3 1f       	adc	r31, r19
     c14:	60 81       	ld	r22, Z
     c16:	82 e6       	ldi	r24, 0x62	; 98
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a2 d1       	rcall	.+836    	; 0xf60 <Gpio_writePort>
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	64 e0       	ldi	r22, 0x04	; 4
     c20:	83 e2       	ldi	r24, 0x23	; 35
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a0 d1       	rcall	.+832    	; 0xf66 <Gpio_writePin>
     c26:	8f e9       	ldi	r24, 0x9F	; 159
     c28:	9f e0       	ldi	r25, 0x0F	; 15
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <FND_dispNum+0xde>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <FND_dispNum+0xe4>
     c30:	00 00       	nop
     c32:	b6 c0       	rjmp	.+364    	; 0xda0 <FND_dispNum+0x254>
     c34:	98 01       	movw	r18, r16
     c36:	36 95       	lsr	r19
     c38:	27 95       	ror	r18
     c3a:	36 95       	lsr	r19
     c3c:	27 95       	ror	r18
     c3e:	ab e7       	ldi	r26, 0x7B	; 123
     c40:	b4 e1       	ldi	r27, 0x14	; 20
     c42:	5c d3       	rcall	.+1720   	; 0x12fc <__umulhisi3>
     c44:	ac 01       	movw	r20, r24
     c46:	56 95       	lsr	r21
     c48:	47 95       	ror	r20
     c4a:	9a 01       	movw	r18, r20
     c4c:	ad ec       	ldi	r26, 0xCD	; 205
     c4e:	bc ec       	ldi	r27, 0xCC	; 204
     c50:	55 d3       	rcall	.+1706   	; 0x12fc <__umulhisi3>
     c52:	96 95       	lsr	r25
     c54:	87 95       	ror	r24
     c56:	96 95       	lsr	r25
     c58:	87 95       	ror	r24
     c5a:	96 95       	lsr	r25
     c5c:	87 95       	ror	r24
     c5e:	9c 01       	movw	r18, r24
     c60:	22 0f       	add	r18, r18
     c62:	33 1f       	adc	r19, r19
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	82 0f       	add	r24, r18
     c72:	93 1f       	adc	r25, r19
     c74:	9a 01       	movw	r18, r20
     c76:	28 1b       	sub	r18, r24
     c78:	39 0b       	sbc	r19, r25
     c7a:	e1 e0       	ldi	r30, 0x01	; 1
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	ec 0f       	add	r30, r28
     c80:	fd 1f       	adc	r31, r29
     c82:	e2 0f       	add	r30, r18
     c84:	f3 1f       	adc	r31, r19
     c86:	60 81       	ld	r22, Z
     c88:	82 e6       	ldi	r24, 0x62	; 98
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	69 d1       	rcall	.+722    	; 0xf60 <Gpio_writePort>
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	65 e0       	ldi	r22, 0x05	; 5
     c92:	83 e2       	ldi	r24, 0x23	; 35
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	67 d1       	rcall	.+718    	; 0xf66 <Gpio_writePin>
     c98:	8f e9       	ldi	r24, 0x9F	; 159
     c9a:	9f e0       	ldi	r25, 0x0F	; 15
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <FND_dispNum+0x150>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <FND_dispNum+0x156>
     ca2:	00 00       	nop
     ca4:	7d c0       	rjmp	.+250    	; 0xda0 <FND_dispNum+0x254>
     ca6:	98 01       	movw	r18, r16
     ca8:	ad ec       	ldi	r26, 0xCD	; 205
     caa:	bc ec       	ldi	r27, 0xCC	; 204
     cac:	27 d3       	rcall	.+1614   	; 0x12fc <__umulhisi3>
     cae:	ac 01       	movw	r20, r24
     cb0:	56 95       	lsr	r21
     cb2:	47 95       	ror	r20
     cb4:	56 95       	lsr	r21
     cb6:	47 95       	ror	r20
     cb8:	56 95       	lsr	r21
     cba:	47 95       	ror	r20
     cbc:	9a 01       	movw	r18, r20
     cbe:	1e d3       	rcall	.+1596   	; 0x12fc <__umulhisi3>
     cc0:	96 95       	lsr	r25
     cc2:	87 95       	ror	r24
     cc4:	96 95       	lsr	r25
     cc6:	87 95       	ror	r24
     cc8:	96 95       	lsr	r25
     cca:	87 95       	ror	r24
     ccc:	9c 01       	movw	r18, r24
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	9a 01       	movw	r18, r20
     ce4:	28 1b       	sub	r18, r24
     ce6:	39 0b       	sbc	r19, r25
     ce8:	e1 e0       	ldi	r30, 0x01	; 1
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	ec 0f       	add	r30, r28
     cee:	fd 1f       	adc	r31, r29
     cf0:	e2 0f       	add	r30, r18
     cf2:	f3 1f       	adc	r31, r19
     cf4:	60 81       	ld	r22, Z
     cf6:	82 e6       	ldi	r24, 0x62	; 98
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	32 d1       	rcall	.+612    	; 0xf60 <Gpio_writePort>
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	66 e0       	ldi	r22, 0x06	; 6
     d00:	83 e2       	ldi	r24, 0x23	; 35
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	30 d1       	rcall	.+608    	; 0xf66 <Gpio_writePin>
     d06:	8f e9       	ldi	r24, 0x9F	; 159
     d08:	9f e0       	ldi	r25, 0x0F	; 15
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <FND_dispNum+0x1be>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <FND_dispNum+0x1c4>
     d10:	00 00       	nop
     d12:	46 c0       	rjmp	.+140    	; 0xda0 <FND_dispNum+0x254>
     d14:	98 01       	movw	r18, r16
     d16:	ad ec       	ldi	r26, 0xCD	; 205
     d18:	bc ec       	ldi	r27, 0xCC	; 204
     d1a:	f0 d2       	rcall	.+1504   	; 0x12fc <__umulhisi3>
     d1c:	96 95       	lsr	r25
     d1e:	87 95       	ror	r24
     d20:	96 95       	lsr	r25
     d22:	87 95       	ror	r24
     d24:	96 95       	lsr	r25
     d26:	87 95       	ror	r24
     d28:	9c 01       	movw	r18, r24
     d2a:	22 0f       	add	r18, r18
     d2c:	33 1f       	adc	r19, r19
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	82 0f       	add	r24, r18
     d3c:	93 1f       	adc	r25, r19
     d3e:	98 01       	movw	r18, r16
     d40:	28 1b       	sub	r18, r24
     d42:	39 0b       	sbc	r19, r25
     d44:	e1 e0       	ldi	r30, 0x01	; 1
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	ec 0f       	add	r30, r28
     d4a:	fd 1f       	adc	r31, r29
     d4c:	e2 0f       	add	r30, r18
     d4e:	f3 1f       	adc	r31, r19
     d50:	60 81       	ld	r22, Z
     d52:	82 e6       	ldi	r24, 0x62	; 98
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	04 d1       	rcall	.+520    	; 0xf60 <Gpio_writePort>
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	67 e0       	ldi	r22, 0x07	; 7
     d5c:	83 e2       	ldi	r24, 0x23	; 35
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 d1       	rcall	.+516    	; 0xf66 <Gpio_writePin>
     d62:	8f e9       	ldi	r24, 0x9F	; 159
     d64:	9f e0       	ldi	r25, 0x0F	; 15
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <FND_dispNum+0x21a>
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <FND_dispNum+0x220>
     d6c:	00 00       	nop
     d6e:	18 c0       	rjmp	.+48     	; 0xda0 <FND_dispNum+0x254>
     d70:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <fndColonFlag>
     d74:	88 23       	and	r24, r24
     d76:	29 f0       	breq	.+10     	; 0xd82 <FND_dispNum+0x236>
     d78:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7a:	82 e6       	ldi	r24, 0x62	; 98
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	f0 d0       	rcall	.+480    	; 0xf60 <Gpio_writePort>
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <FND_dispNum+0x23e>
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	82 e6       	ldi	r24, 0x62	; 98
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	eb d0       	rcall	.+470    	; 0xf60 <Gpio_writePort>
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	65 e0       	ldi	r22, 0x05	; 5
     d8e:	83 e2       	ldi	r24, 0x23	; 35
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	e9 d0       	rcall	.+466    	; 0xf66 <Gpio_writePin>
     d94:	8f e9       	ldi	r24, 0x9F	; 159
     d96:	9f e0       	ldi	r25, 0x0F	; 15
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <FND_dispNum+0x24c>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <FND_dispNum+0x252>
     d9e:	00 00       	nop
     da0:	2b 96       	adiw	r28, 0x0b	; 11
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	08 95       	ret

00000db6 <FND_setFndData>:
}

void FND_setFndData(uint16_t data)
{
	fndData = data;
     db6:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <fndData+0x1>
     dba:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <fndData>
     dbe:	08 95       	ret

00000dc0 <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	FND_dispNum(fndData);
     dc0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <fndData>
     dc4:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <fndData+0x1>
     dc8:	c1 ce       	rjmp	.-638    	; 0xb4c <FND_dispNum>
     dca:	08 95       	ret

00000dcc <Gpio_init>:
#define LCD_DISPLAY_ON			0x0C

void Gpio_init()
{
	// LCD_CONTROL_DDR |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_EN) ;
	Gpio_initPin(&LCD_CONTROL_DDR, OUTPUT, LCD_RS);
     dcc:	44 e0       	ldi	r20, 0x04	; 4
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	87 e3       	ldi	r24, 0x37	; 55
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	aa d0       	rcall	.+340    	; 0xf2a <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR, OUTPUT, LCD_RW);
     dd6:	46 e0       	ldi	r20, 0x06	; 6
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	87 e3       	ldi	r24, 0x37	; 55
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a5 d0       	rcall	.+330    	; 0xf2a <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR, OUTPUT, LCD_EN);
     de0:	47 e0       	ldi	r20, 0x07	; 7
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	87 e3       	ldi	r24, 0x37	; 55
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a0 d0       	rcall	.+320    	; 0xf2a <Gpio_initPin>
	
	// LCD_DATA_DDR = 0xff;
	Gpio_initPort(&LCD_DATA_DDR, OUTPUT);
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	84 e3       	ldi	r24, 0x34	; 52
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	93 c0       	rjmp	.+294    	; 0xf18 <Gpio_initPort>
     df2:	08 95       	ret

00000df4 <LCD_cmdMode>:

void LCD_cmdMode()
{
	// RS pin : bit 0 set
	// LCD_CONTROL_PORT &= ~(1<<LCD_RS);
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_RS, GPIO_PIN_RESET);
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	64 e0       	ldi	r22, 0x04	; 4
     df8:	88 e3       	ldi	r24, 0x38	; 56
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	b4 c0       	rjmp	.+360    	; 0xf66 <Gpio_writePin>
     dfe:	08 95       	ret

00000e00 <LCD_charMode>:

void LCD_charMode()
{
	// RS pin : bit 1 set
	// LCD_CONTROL_PORT |= (1<<LCD_RS);
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_RS, GPIO_PIN_SET);
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	64 e0       	ldi	r22, 0x04	; 4
     e04:	88 e3       	ldi	r24, 0x38	; 56
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	ae c0       	rjmp	.+348    	; 0xf66 <Gpio_writePin>
     e0a:	08 95       	ret

00000e0c <LCD_writeMode>:

void LCD_writeMode()
{
	// RW pin : bit 0 set
	// LCD_CONTROL_PORT &= ~(1<<LCD_WR);
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_RW, GPIO_PIN_RESET);
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	66 e0       	ldi	r22, 0x06	; 6
     e10:	88 e3       	ldi	r24, 0x38	; 56
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	a8 c0       	rjmp	.+336    	; 0xf66 <Gpio_writePin>
     e16:	08 95       	ret

00000e18 <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	// E pin : bit 1 set
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_EN, GPIO_PIN_SET);
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	67 e0       	ldi	r22, 0x07	; 7
     e1c:	88 e3       	ldi	r24, 0x38	; 56
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a2 d0       	rcall	.+324    	; 0xf66 <Gpio_writePin>
     e22:	8f e9       	ldi	r24, 0x9F	; 159
     e24:	9f e0       	ldi	r25, 0x0F	; 15
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <LCD_enableHigh+0xe>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <LCD_enableHigh+0x14>
     e2c:	00 00       	nop
     e2e:	08 95       	ret

00000e30 <LCD_enableLow>:
}

void LCD_enableLow()
{
	// E pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT, LCD_EN, GPIO_PIN_RESET);
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	67 e0       	ldi	r22, 0x07	; 7
     e34:	88 e3       	ldi	r24, 0x38	; 56
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	96 d0       	rcall	.+300    	; 0xf66 <Gpio_writePin>
     e3a:	8f e9       	ldi	r24, 0x9F	; 159
     e3c:	9f e0       	ldi	r25, 0x0F	; 15
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <LCD_enableLow+0xe>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <LCD_enableLow+0x14>
     e44:	00 00       	nop
     e46:	08 95       	ret

00000e48 <LCD_writeByte>:
}

void LCD_writeByte(uint8_t data)
{
	// D0~D7 pin : data
	Gpio_writePort(&LCD_DATA_PORT, data);
     e48:	68 2f       	mov	r22, r24
     e4a:	85 e3       	ldi	r24, 0x35	; 53
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	88 c0       	rjmp	.+272    	; 0xf60 <Gpio_writePort>
     e50:	08 95       	ret

00000e52 <LCD_writeCmdData>:
}

// MCU -> LCD ëªë ¹ì´ë¥¼ ë³´ë¼ ê²½ì° (write mode)
void LCD_writeCmdData(uint8_t data)		// 8bit data interface
{
     e52:	cf 93       	push	r28
     e54:	c8 2f       	mov	r28, r24
	LCD_cmdMode();
     e56:	ce df       	rcall	.-100    	; 0xdf4 <LCD_cmdMode>
	LCD_writeMode();
     e58:	d9 df       	rcall	.-78     	; 0xe0c <LCD_writeMode>
	LCD_enableHigh();
     e5a:	de df       	rcall	.-68     	; 0xe18 <LCD_enableHigh>
	LCD_writeByte(data);
     e5c:	8c 2f       	mov	r24, r28
     e5e:	f4 df       	rcall	.-24     	; 0xe48 <LCD_writeByte>
     e60:	e7 df       	rcall	.-50     	; 0xe30 <LCD_enableLow>
	LCD_enableLow();
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <LCD_writeCharData>:
}
     e66:	cf 93       	push	r28
     e68:	c8 2f       	mov	r28, r24

// MCU -> LCD Dataë¥¼ ë³´ë¼ ê²½ì° (write mode)
void LCD_writeCharData(uint8_t data)
{
	LCD_charMode();
     e6a:	ca df       	rcall	.-108    	; 0xe00 <LCD_charMode>
	LCD_writeMode();
     e6c:	cf df       	rcall	.-98     	; 0xe0c <LCD_writeMode>
	LCD_enableHigh();
     e6e:	d4 df       	rcall	.-88     	; 0xe18 <LCD_enableHigh>
	LCD_writeByte(data);
     e70:	8c 2f       	mov	r24, r28
     e72:	ea df       	rcall	.-44     	; 0xe48 <LCD_writeByte>
     e74:	dd df       	rcall	.-70     	; 0xe30 <LCD_enableLow>
	LCD_enableLow();
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <LCD_init>:
}
     e7a:	a8 df       	rcall	.-176    	; 0xdcc <Gpio_init>
     e7c:	8f e5       	ldi	r24, 0x5F	; 95
     e7e:	9a ee       	ldi	r25, 0xEA	; 234
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <LCD_init+0x6>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <LCD_init+0xc>
     e86:	00 00       	nop
void LCD_init()
{
	Gpio_init();								// DDR INITIAL
	
	_delay_ms(15);								// 15ms wait
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET); 	// LCD_8bit_FUNCTION_SET	0x38
     e88:	88 e3       	ldi	r24, 0x38	; 56
     e8a:	e3 df       	rcall	.-58     	; 0xe52 <LCD_writeCmdData>
     e8c:	8f e1       	ldi	r24, 0x1F	; 31
     e8e:	9e e4       	ldi	r25, 0x4E	; 78
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <LCD_init+0x16>
     e94:	00 c0       	rjmp	.+0      	; 0xe96 <LCD_init+0x1c>
	_delay_ms(5);								// 5ms wait
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET); 	// LCD_8bit_FUNCTION_SET	0x38
     e96:	00 00       	nop
     e98:	88 e3       	ldi	r24, 0x38	; 56
     e9a:	db df       	rcall	.-74     	; 0xe52 <LCD_writeCmdData>
     e9c:	8f e9       	ldi	r24, 0x9F	; 159
     e9e:	9f e0       	ldi	r25, 0x0F	; 15
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <LCD_init+0x26>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <LCD_init+0x2c>
	_delay_ms(1);								// 1ms wait(100us)
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET); 	// LCD_8bit_FUNCTION_SET	0x38
     ea6:	00 00       	nop
     ea8:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET); 	// LCD_8bit_FUNCTION_SET	0x38
     eaa:	d3 df       	rcall	.-90     	; 0xe52 <LCD_writeCmdData>
     eac:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_DISPLAY_OFF); 			// LCD_DISPLAY_OFF			0x08
     eae:	d1 df       	rcall	.-94     	; 0xe52 <LCD_writeCmdData>
     eb0:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(LCD_DISPLAY_CLEAR); 		// LCD_DISPLAY_CLEAR		0x01
     eb2:	cf df       	rcall	.-98     	; 0xe52 <LCD_writeCmdData>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	cd df       	rcall	.-102    	; 0xe52 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_ENTRY_MODE_SET); 		// LCD_ENTRY_MODE_SET		0x06
     eb8:	86 e0       	ldi	r24, 0x06	; 6
     eba:	cb df       	rcall	.-106    	; 0xe52 <LCD_writeCmdData>
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
	
	LCD_writeCmdData(LCD_DISPLAY_ON); 			// LCD_DISPLAY_ON			0x0C
     ebe:	c9 cf       	rjmp	.-110    	; 0xe52 <LCD_writeCmdData>
     ec0:	08 95       	ret

00000ec2 <LCD_writeString>:
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
}

void LCD_writeString(char *str)		// ë¬¸ìì´(ë°°ì´)ì ì£¼ì
{
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	8c 01       	movw	r16, r24
	for(int i = 0; str[i]; i++)
     ecc:	c0 e0       	ldi	r28, 0x00	; 0
     ece:	d0 e0       	ldi	r29, 0x00	; 0
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <LCD_writeString+0x14>
	{
		LCD_writeCharData(str[i]);
     ed2:	c9 df       	rcall	.-110    	; 0xe66 <LCD_writeCharData>
	LCD_writeCmdData(LCD_DISPLAY_ON); 			// LCD_DISPLAY_ON			0x0C
}

void LCD_writeString(char *str)		// ë¬¸ìì´(ë°°ì´)ì ì£¼ì
{
	for(int i = 0; str[i]; i++)
     ed4:	21 96       	adiw	r28, 0x01	; 1
     ed6:	f8 01       	movw	r30, r16
     ed8:	ec 0f       	add	r30, r28
     eda:	fd 1f       	adc	r31, r29
     edc:	80 81       	ld	r24, Z
     ede:	81 11       	cpse	r24, r1
     ee0:	f8 cf       	rjmp	.-16     	; 0xed2 <LCD_writeString+0x10>
	{
		LCD_writeCharData(str[i]);
	}
}
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	08 95       	ret

00000eec <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col %= 16; row %= 2;
     eec:	6f 70       	andi	r22, 0x0F	; 15
     eee:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 * row) + col;
     ef0:	90 e4       	ldi	r25, 0x40	; 64
     ef2:	89 9f       	mul	r24, r25
     ef4:	60 0d       	add	r22, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdregisterAddress;
	LCD_writeCmdData(command);
     efa:	80 58       	subi	r24, 0x80	; 128
     efc:	aa cf       	rjmp	.-172    	; 0xe52 <LCD_writeCmdData>
     efe:	08 95       	ret

00000f00 <LCD_writeStringXY>:
}

void LCD_writeStringXY(uint8_t row, uint8_t col, char* str)
{
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	ea 01       	movw	r28, r20
	LCD_gotoXY(row, col);
     f06:	f2 df       	rcall	.-28     	; 0xeec <LCD_gotoXY>
	LCD_writeString(str);
     f08:	ce 01       	movw	r24, r28
     f0a:	db df       	rcall	.-74     	; 0xec2 <LCD_writeString>
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <main>:
#include <util/delay.h>
#include "AP/apMain.h"

int main(void)
{
	apMain_init();
     f12:	54 d9       	rcall	.-3416   	; 0x1bc <apMain_init>
	
    while (1) 
    {
		apMain_execute();
     f14:	62 d9       	rcall	.-3388   	; 0x1da <apMain_execute>
     f16:	fe cf       	rjmp	.-4      	; 0xf14 <main+0x2>

00000f18 <Gpio_initPort>:
     f18:	61 11       	cpse	r22, r1
uint8_t Gpio_readPort(volatile uint8_t* PIN)
{
	// Pin
	return *PIN;
	
}
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <Gpio_initPort+0xc>
     f1c:	2f ef       	ldi	r18, 0xFF	; 255
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
     f22:	08 95       	ret
     f24:	fc 01       	movw	r30, r24
     f26:	10 82       	st	Z, r1
     f28:	08 95       	ret

00000f2a <Gpio_initPin>:
     f2a:	61 11       	cpse	r22, r1
     f2c:	0c c0       	rjmp	.+24     	; 0xf46 <Gpio_initPin+0x1c>
     f2e:	fc 01       	movw	r30, r24
     f30:	50 81       	ld	r21, Z
     f32:	21 e0       	ldi	r18, 0x01	; 1
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <Gpio_initPin+0x12>
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	4a 95       	dec	r20
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <Gpio_initPin+0xe>
     f40:	25 2b       	or	r18, r21
     f42:	20 83       	st	Z, r18
     f44:	08 95       	ret
     f46:	fc 01       	movw	r30, r24
     f48:	50 81       	ld	r21, Z
     f4a:	21 e0       	ldi	r18, 0x01	; 1
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <Gpio_initPin+0x2a>
     f50:	22 0f       	add	r18, r18
     f52:	33 1f       	adc	r19, r19
     f54:	4a 95       	dec	r20
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <Gpio_initPin+0x26>
     f58:	20 95       	com	r18
     f5a:	25 23       	and	r18, r21
     f5c:	20 83       	st	Z, r18
     f5e:	08 95       	ret

00000f60 <Gpio_writePort>:
     f60:	fc 01       	movw	r30, r24
     f62:	60 83       	st	Z, r22
     f64:	08 95       	ret

00000f66 <Gpio_writePin>:
     f66:	fc 01       	movw	r30, r24
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	59 f4       	brne	.+22     	; 0xf82 <Gpio_writePin+0x1c>
     f6c:	20 81       	ld	r18, Z
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <Gpio_writePin+0x12>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	6a 95       	dec	r22
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <Gpio_writePin+0xe>
     f7c:	82 2b       	or	r24, r18
     f7e:	80 83       	st	Z, r24
     f80:	08 95       	ret
     f82:	90 81       	ld	r25, Z
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <Gpio_writePin+0x28>
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	6a 95       	dec	r22
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <Gpio_writePin+0x24>
     f92:	20 95       	com	r18
     f94:	29 23       	and	r18, r25
     f96:	20 83       	st	Z, r18
     f98:	08 95       	ret

00000f9a <Gpio_readPin>:
uint8_t Gpio_readPin(volatile uint8_t* PIN, uint8_t pinNum)
{
	// Pin
	// PINA & (1<<0);
	
	return ((*PIN & (1<<pinNum)) != 0);
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <Gpio_readPin+0xc>
     fa2:	95 95       	asr	r25
     fa4:	87 95       	ror	r24
     fa6:	6a 95       	dec	r22
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <Gpio_readPin+0x8>
	// pushed return 0, released return 1
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	08 95       	ret

00000fae <TIM0_init>:
ï»¿#include "TIM.h"

void TIM0_init(){	// 1ms overflow interrupt, FND display
	// /128 1m interrupt
	TCCR0 |= ((1<<CS02) | (0<<CS01) | (1<<CS00));	// /128 PreScaler
     fae:	83 b7       	in	r24, 0x33	; 51
     fb0:	85 60       	ori	r24, 0x05	; 5
     fb2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);							// TIMSK Timer/Counter0 overflow interrupt enable 
     fb4:	87 b7       	in	r24, 0x37	; 55
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	87 bf       	out	0x37, r24	; 55
	// TIMSK íì´ë¨¸/ì¹´ì´í°ì ì¸í°ë½í¸ë¥¼ ì ì´íë ë ì§ì¤í°
	TCNT0 = 130;
     fba:	82 e8       	ldi	r24, 0x82	; 130
     fbc:	82 bf       	out	0x32, r24	; 50
     fbe:	08 95       	ret

00000fc0 <TIM2_init>:
}

void TIM2_init(){	// 1ms OUTPUT COMPARE interrupt(CTC MODE) , TIME calculate
	TCCR2 |= ((0<<CS22) | (1<<CS21) | (1<<CS20));	// /64 PreScaler
     fc0:	85 b5       	in	r24, 0x25	; 37
     fc2:	83 60       	ori	r24, 0x03	; 3
     fc4:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2);							// TIMSK Timer/Counter2 OUTPUT COMPARE interrupt enable
     fc6:	87 b7       	in	r24, 0x37	; 55
     fc8:	80 68       	ori	r24, 0x80	; 128
     fca:	87 bf       	out	0x37, r24	; 55
	
	TCCR2 |= ((1<<WGM21) | (1<<WGM20));				// CTC MODE
     fcc:	85 b5       	in	r24, 0x25	; 37
     fce:	88 64       	ori	r24, 0x48	; 72
     fd0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 250 - 1;									// 0 ~ 249 250ì¬ì´í´, 0ë¶í° ì¹´ì´í¸, 1ì¹´ì´í¸ë§ë¤ 4us, 4us * 250 = 1ms, 1msë§ë¤ ì¸í°ë½í¸ ë°ì
     fd2:	89 ef       	ldi	r24, 0xF9	; 249
     fd4:	83 bd       	out	0x23, r24	; 35
     fd6:	08 95       	ret

00000fd8 <UART0_Transmit>:
     fd8:	5d 9b       	sbis	0x0b, 5	; 11
     fda:	fe cf       	rjmp	.-4      	; 0xfd8 <UART0_Transmit>
     fdc:	8c b9       	out	0x0c, r24	; 12
     fde:	08 95       	ret

00000fe0 <UART0_init>:
     fe0:	8a b1       	in	r24, 0x0a	; 10
     fe2:	88 61       	ori	r24, 0x18	; 24
     fe4:	8a b9       	out	0x0a, r24	; 10
     fe6:	8b b1       	in	r24, 0x0b	; 11
     fe8:	82 60       	ori	r24, 0x02	; 2
     fea:	8b b9       	out	0x0b, r24	; 11
     fec:	8a b1       	in	r24, 0x0a	; 10
     fee:	80 68       	ori	r24, 0x80	; 128
     ff0:	8a b9       	out	0x0a, r24	; 10
     ff2:	8f ec       	ldi	r24, 0xCF	; 207
     ff4:	89 b9       	out	0x09, r24	; 9
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	81 bb       	out	0x11, r24	; 17
     ffa:	85 e0       	ldi	r24, 0x05	; 5
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <__iob+0x3>
    1002:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <__iob+0x2>
    1006:	08 95       	ret

00001008 <UART0_ISR_Process>:
    1008:	9c b1       	in	r25, 0x0c	; 12
    100a:	9a 30       	cpi	r25, 0x0A	; 10
    100c:	91 f4       	brne	.+36     	; 0x1032 <UART0_ISR_Process+0x2a>
    100e:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <uart0RxTail.1951>
    1012:	ae 2f       	mov	r26, r30
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	a8 5a       	subi	r26, 0xA8	; 168
    1018:	bd 4f       	sbci	r27, 0xFD	; 253
    101a:	9c 93       	st	X, r25
    101c:	ef 5f       	subi	r30, 0xFF	; 255
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	e8 5a       	subi	r30, 0xA8	; 168
    1022:	fd 4f       	sbci	r31, 0xFD	; 253
    1024:	10 82       	st	Z, r1
    1026:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <uart0RxTail.1951>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <uart0RxFlag>
    1030:	08 95       	ret
    1032:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <uart0RxTail.1951>
    1036:	e8 2f       	mov	r30, r24
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	e8 5a       	subi	r30, 0xA8	; 168
    103c:	fd 4f       	sbci	r31, 0xFD	; 253
    103e:	90 83       	st	Z, r25
    1040:	8f 5f       	subi	r24, 0xFF	; 255
    1042:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <uart0RxTail.1951>
    1046:	08 95       	ret

00001048 <UART0_clearRxFlag>:
    1048:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <uart0RxFlag>
    104c:	08 95       	ret

0000104e <UART0_getRxFlag>:
    104e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <uart0RxFlag>
    1052:	08 95       	ret

00001054 <UART0_readRxBuff>:
    1054:	88 e5       	ldi	r24, 0x58	; 88
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	08 95       	ret

0000105a <__divsf3>:
    105a:	0c d0       	rcall	.+24     	; 0x1074 <__divsf3x>
    105c:	e6 c0       	rjmp	.+460    	; 0x122a <__fp_round>
    105e:	de d0       	rcall	.+444    	; 0x121c <__fp_pscB>
    1060:	40 f0       	brcs	.+16     	; 0x1072 <__divsf3+0x18>
    1062:	d5 d0       	rcall	.+426    	; 0x120e <__fp_pscA>
    1064:	30 f0       	brcs	.+12     	; 0x1072 <__divsf3+0x18>
    1066:	21 f4       	brne	.+8      	; 0x1070 <__divsf3+0x16>
    1068:	5f 3f       	cpi	r21, 0xFF	; 255
    106a:	19 f0       	breq	.+6      	; 0x1072 <__divsf3+0x18>
    106c:	c7 c0       	rjmp	.+398    	; 0x11fc <__fp_inf>
    106e:	51 11       	cpse	r21, r1
    1070:	10 c1       	rjmp	.+544    	; 0x1292 <__fp_szero>
    1072:	ca c0       	rjmp	.+404    	; 0x1208 <__fp_nan>

00001074 <__divsf3x>:
    1074:	eb d0       	rcall	.+470    	; 0x124c <__fp_split3>
    1076:	98 f3       	brcs	.-26     	; 0x105e <__divsf3+0x4>

00001078 <__divsf3_pse>:
    1078:	99 23       	and	r25, r25
    107a:	c9 f3       	breq	.-14     	; 0x106e <__divsf3+0x14>
    107c:	55 23       	and	r21, r21
    107e:	b1 f3       	breq	.-20     	; 0x106c <__divsf3+0x12>
    1080:	95 1b       	sub	r25, r21
    1082:	55 0b       	sbc	r21, r21
    1084:	bb 27       	eor	r27, r27
    1086:	aa 27       	eor	r26, r26
    1088:	62 17       	cp	r22, r18
    108a:	73 07       	cpc	r23, r19
    108c:	84 07       	cpc	r24, r20
    108e:	38 f0       	brcs	.+14     	; 0x109e <__divsf3_pse+0x26>
    1090:	9f 5f       	subi	r25, 0xFF	; 255
    1092:	5f 4f       	sbci	r21, 0xFF	; 255
    1094:	22 0f       	add	r18, r18
    1096:	33 1f       	adc	r19, r19
    1098:	44 1f       	adc	r20, r20
    109a:	aa 1f       	adc	r26, r26
    109c:	a9 f3       	breq	.-22     	; 0x1088 <__divsf3_pse+0x10>
    109e:	33 d0       	rcall	.+102    	; 0x1106 <__stack+0x7>
    10a0:	0e 2e       	mov	r0, r30
    10a2:	3a f0       	brmi	.+14     	; 0x10b2 <__divsf3_pse+0x3a>
    10a4:	e0 e8       	ldi	r30, 0x80	; 128
    10a6:	30 d0       	rcall	.+96     	; 0x1108 <__stack+0x9>
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	50 40       	sbci	r21, 0x00	; 0
    10ac:	e6 95       	lsr	r30
    10ae:	00 1c       	adc	r0, r0
    10b0:	ca f7       	brpl	.-14     	; 0x10a4 <__divsf3_pse+0x2c>
    10b2:	29 d0       	rcall	.+82     	; 0x1106 <__stack+0x7>
    10b4:	fe 2f       	mov	r31, r30
    10b6:	27 d0       	rcall	.+78     	; 0x1106 <__stack+0x7>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	bb 1f       	adc	r27, r27
    10c0:	26 17       	cp	r18, r22
    10c2:	37 07       	cpc	r19, r23
    10c4:	48 07       	cpc	r20, r24
    10c6:	ab 07       	cpc	r26, r27
    10c8:	b0 e8       	ldi	r27, 0x80	; 128
    10ca:	09 f0       	breq	.+2      	; 0x10ce <__divsf3_pse+0x56>
    10cc:	bb 0b       	sbc	r27, r27
    10ce:	80 2d       	mov	r24, r0
    10d0:	bf 01       	movw	r22, r30
    10d2:	ff 27       	eor	r31, r31
    10d4:	93 58       	subi	r25, 0x83	; 131
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	2a f0       	brmi	.+10     	; 0x10e4 <__divsf3_pse+0x6c>
    10da:	9e 3f       	cpi	r25, 0xFE	; 254
    10dc:	51 05       	cpc	r21, r1
    10de:	68 f0       	brcs	.+26     	; 0x10fa <__divsf3_pse+0x82>
    10e0:	8d c0       	rjmp	.+282    	; 0x11fc <__fp_inf>
    10e2:	d7 c0       	rjmp	.+430    	; 0x1292 <__fp_szero>
    10e4:	5f 3f       	cpi	r21, 0xFF	; 255
    10e6:	ec f3       	brlt	.-6      	; 0x10e2 <__divsf3_pse+0x6a>
    10e8:	98 3e       	cpi	r25, 0xE8	; 232
    10ea:	dc f3       	brlt	.-10     	; 0x10e2 <__divsf3_pse+0x6a>
    10ec:	86 95       	lsr	r24
    10ee:	77 95       	ror	r23
    10f0:	67 95       	ror	r22
    10f2:	b7 95       	ror	r27
    10f4:	f7 95       	ror	r31
    10f6:	9f 5f       	subi	r25, 0xFF	; 255
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__divsf3_pse+0x74>
    10fa:	88 0f       	add	r24, r24
    10fc:	91 1d       	adc	r25, r1
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	97 f9       	bld	r25, 7
    1104:	08 95       	ret
    1106:	e1 e0       	ldi	r30, 0x01	; 1
    1108:	66 0f       	add	r22, r22
    110a:	77 1f       	adc	r23, r23
    110c:	88 1f       	adc	r24, r24
    110e:	bb 1f       	adc	r27, r27
    1110:	62 17       	cp	r22, r18
    1112:	73 07       	cpc	r23, r19
    1114:	84 07       	cpc	r24, r20
    1116:	ba 07       	cpc	r27, r26
    1118:	20 f0       	brcs	.+8      	; 0x1122 <__stack+0x23>
    111a:	62 1b       	sub	r22, r18
    111c:	73 0b       	sbc	r23, r19
    111e:	84 0b       	sbc	r24, r20
    1120:	ba 0b       	sbc	r27, r26
    1122:	ee 1f       	adc	r30, r30
    1124:	88 f7       	brcc	.-30     	; 0x1108 <__stack+0x9>
    1126:	e0 95       	com	r30
    1128:	08 95       	ret

0000112a <__fixunssfsi>:
    112a:	98 d0       	rcall	.+304    	; 0x125c <__fp_splitA>
    112c:	88 f0       	brcs	.+34     	; 0x1150 <__fixunssfsi+0x26>
    112e:	9f 57       	subi	r25, 0x7F	; 127
    1130:	90 f0       	brcs	.+36     	; 0x1156 <__fixunssfsi+0x2c>
    1132:	b9 2f       	mov	r27, r25
    1134:	99 27       	eor	r25, r25
    1136:	b7 51       	subi	r27, 0x17	; 23
    1138:	a0 f0       	brcs	.+40     	; 0x1162 <__fixunssfsi+0x38>
    113a:	d1 f0       	breq	.+52     	; 0x1170 <__fixunssfsi+0x46>
    113c:	66 0f       	add	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	88 1f       	adc	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	1a f0       	brmi	.+6      	; 0x114c <__fixunssfsi+0x22>
    1146:	ba 95       	dec	r27
    1148:	c9 f7       	brne	.-14     	; 0x113c <__fixunssfsi+0x12>
    114a:	12 c0       	rjmp	.+36     	; 0x1170 <__fixunssfsi+0x46>
    114c:	b1 30       	cpi	r27, 0x01	; 1
    114e:	81 f0       	breq	.+32     	; 0x1170 <__fixunssfsi+0x46>
    1150:	9f d0       	rcall	.+318    	; 0x1290 <__fp_zero>
    1152:	b1 e0       	ldi	r27, 0x01	; 1
    1154:	08 95       	ret
    1156:	9c c0       	rjmp	.+312    	; 0x1290 <__fp_zero>
    1158:	67 2f       	mov	r22, r23
    115a:	78 2f       	mov	r23, r24
    115c:	88 27       	eor	r24, r24
    115e:	b8 5f       	subi	r27, 0xF8	; 248
    1160:	39 f0       	breq	.+14     	; 0x1170 <__fixunssfsi+0x46>
    1162:	b9 3f       	cpi	r27, 0xF9	; 249
    1164:	cc f3       	brlt	.-14     	; 0x1158 <__fixunssfsi+0x2e>
    1166:	86 95       	lsr	r24
    1168:	77 95       	ror	r23
    116a:	67 95       	ror	r22
    116c:	b3 95       	inc	r27
    116e:	d9 f7       	brne	.-10     	; 0x1166 <__fixunssfsi+0x3c>
    1170:	3e f4       	brtc	.+14     	; 0x1180 <__fixunssfsi+0x56>
    1172:	90 95       	com	r25
    1174:	80 95       	com	r24
    1176:	70 95       	com	r23
    1178:	61 95       	neg	r22
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	08 95       	ret

00001182 <__floatunsisf>:
    1182:	e8 94       	clt
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <__floatsisf+0x12>

00001186 <__floatsisf>:
    1186:	97 fb       	bst	r25, 7
    1188:	3e f4       	brtc	.+14     	; 0x1198 <__floatsisf+0x12>
    118a:	90 95       	com	r25
    118c:	80 95       	com	r24
    118e:	70 95       	com	r23
    1190:	61 95       	neg	r22
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	8f 4f       	sbci	r24, 0xFF	; 255
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	99 23       	and	r25, r25
    119a:	a9 f0       	breq	.+42     	; 0x11c6 <__floatsisf+0x40>
    119c:	f9 2f       	mov	r31, r25
    119e:	96 e9       	ldi	r25, 0x96	; 150
    11a0:	bb 27       	eor	r27, r27
    11a2:	93 95       	inc	r25
    11a4:	f6 95       	lsr	r31
    11a6:	87 95       	ror	r24
    11a8:	77 95       	ror	r23
    11aa:	67 95       	ror	r22
    11ac:	b7 95       	ror	r27
    11ae:	f1 11       	cpse	r31, r1
    11b0:	f8 cf       	rjmp	.-16     	; 0x11a2 <__floatsisf+0x1c>
    11b2:	fa f4       	brpl	.+62     	; 0x11f2 <__floatsisf+0x6c>
    11b4:	bb 0f       	add	r27, r27
    11b6:	11 f4       	brne	.+4      	; 0x11bc <__floatsisf+0x36>
    11b8:	60 ff       	sbrs	r22, 0
    11ba:	1b c0       	rjmp	.+54     	; 0x11f2 <__floatsisf+0x6c>
    11bc:	6f 5f       	subi	r22, 0xFF	; 255
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	8f 4f       	sbci	r24, 0xFF	; 255
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	16 c0       	rjmp	.+44     	; 0x11f2 <__floatsisf+0x6c>
    11c6:	88 23       	and	r24, r24
    11c8:	11 f0       	breq	.+4      	; 0x11ce <__floatsisf+0x48>
    11ca:	96 e9       	ldi	r25, 0x96	; 150
    11cc:	11 c0       	rjmp	.+34     	; 0x11f0 <__floatsisf+0x6a>
    11ce:	77 23       	and	r23, r23
    11d0:	21 f0       	breq	.+8      	; 0x11da <__floatsisf+0x54>
    11d2:	9e e8       	ldi	r25, 0x8E	; 142
    11d4:	87 2f       	mov	r24, r23
    11d6:	76 2f       	mov	r23, r22
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <__floatsisf+0x5e>
    11da:	66 23       	and	r22, r22
    11dc:	71 f0       	breq	.+28     	; 0x11fa <__floatsisf+0x74>
    11de:	96 e8       	ldi	r25, 0x86	; 134
    11e0:	86 2f       	mov	r24, r22
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	2a f0       	brmi	.+10     	; 0x11f2 <__floatsisf+0x6c>
    11e8:	9a 95       	dec	r25
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	da f7       	brpl	.-10     	; 0x11e8 <__floatsisf+0x62>
    11f2:	88 0f       	add	r24, r24
    11f4:	96 95       	lsr	r25
    11f6:	87 95       	ror	r24
    11f8:	97 f9       	bld	r25, 7
    11fa:	08 95       	ret

000011fc <__fp_inf>:
    11fc:	97 f9       	bld	r25, 7
    11fe:	9f 67       	ori	r25, 0x7F	; 127
    1200:	80 e8       	ldi	r24, 0x80	; 128
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	08 95       	ret

00001208 <__fp_nan>:
    1208:	9f ef       	ldi	r25, 0xFF	; 255
    120a:	80 ec       	ldi	r24, 0xC0	; 192
    120c:	08 95       	ret

0000120e <__fp_pscA>:
    120e:	00 24       	eor	r0, r0
    1210:	0a 94       	dec	r0
    1212:	16 16       	cp	r1, r22
    1214:	17 06       	cpc	r1, r23
    1216:	18 06       	cpc	r1, r24
    1218:	09 06       	cpc	r0, r25
    121a:	08 95       	ret

0000121c <__fp_pscB>:
    121c:	00 24       	eor	r0, r0
    121e:	0a 94       	dec	r0
    1220:	12 16       	cp	r1, r18
    1222:	13 06       	cpc	r1, r19
    1224:	14 06       	cpc	r1, r20
    1226:	05 06       	cpc	r0, r21
    1228:	08 95       	ret

0000122a <__fp_round>:
    122a:	09 2e       	mov	r0, r25
    122c:	03 94       	inc	r0
    122e:	00 0c       	add	r0, r0
    1230:	11 f4       	brne	.+4      	; 0x1236 <__fp_round+0xc>
    1232:	88 23       	and	r24, r24
    1234:	52 f0       	brmi	.+20     	; 0x124a <__fp_round+0x20>
    1236:	bb 0f       	add	r27, r27
    1238:	40 f4       	brcc	.+16     	; 0x124a <__fp_round+0x20>
    123a:	bf 2b       	or	r27, r31
    123c:	11 f4       	brne	.+4      	; 0x1242 <__fp_round+0x18>
    123e:	60 ff       	sbrs	r22, 0
    1240:	04 c0       	rjmp	.+8      	; 0x124a <__fp_round+0x20>
    1242:	6f 5f       	subi	r22, 0xFF	; 255
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	8f 4f       	sbci	r24, 0xFF	; 255
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	08 95       	ret

0000124c <__fp_split3>:
    124c:	57 fd       	sbrc	r21, 7
    124e:	90 58       	subi	r25, 0x80	; 128
    1250:	44 0f       	add	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	59 f0       	breq	.+22     	; 0x126c <__fp_splitA+0x10>
    1256:	5f 3f       	cpi	r21, 0xFF	; 255
    1258:	71 f0       	breq	.+28     	; 0x1276 <__fp_splitA+0x1a>
    125a:	47 95       	ror	r20

0000125c <__fp_splitA>:
    125c:	88 0f       	add	r24, r24
    125e:	97 fb       	bst	r25, 7
    1260:	99 1f       	adc	r25, r25
    1262:	61 f0       	breq	.+24     	; 0x127c <__fp_splitA+0x20>
    1264:	9f 3f       	cpi	r25, 0xFF	; 255
    1266:	79 f0       	breq	.+30     	; 0x1286 <__fp_splitA+0x2a>
    1268:	87 95       	ror	r24
    126a:	08 95       	ret
    126c:	12 16       	cp	r1, r18
    126e:	13 06       	cpc	r1, r19
    1270:	14 06       	cpc	r1, r20
    1272:	55 1f       	adc	r21, r21
    1274:	f2 cf       	rjmp	.-28     	; 0x125a <__fp_split3+0xe>
    1276:	46 95       	lsr	r20
    1278:	f1 df       	rcall	.-30     	; 0x125c <__fp_splitA>
    127a:	08 c0       	rjmp	.+16     	; 0x128c <__fp_splitA+0x30>
    127c:	16 16       	cp	r1, r22
    127e:	17 06       	cpc	r1, r23
    1280:	18 06       	cpc	r1, r24
    1282:	99 1f       	adc	r25, r25
    1284:	f1 cf       	rjmp	.-30     	; 0x1268 <__fp_splitA+0xc>
    1286:	86 95       	lsr	r24
    1288:	71 05       	cpc	r23, r1
    128a:	61 05       	cpc	r22, r1
    128c:	08 94       	sec
    128e:	08 95       	ret

00001290 <__fp_zero>:
    1290:	e8 94       	clt

00001292 <__fp_szero>:
    1292:	bb 27       	eor	r27, r27
    1294:	66 27       	eor	r22, r22
    1296:	77 27       	eor	r23, r23
    1298:	cb 01       	movw	r24, r22
    129a:	97 f9       	bld	r25, 7
    129c:	08 95       	ret

0000129e <__divmodhi4>:
    129e:	97 fb       	bst	r25, 7
    12a0:	07 2e       	mov	r0, r23
    12a2:	16 f4       	brtc	.+4      	; 0x12a8 <__divmodhi4+0xa>
    12a4:	00 94       	com	r0
    12a6:	06 d0       	rcall	.+12     	; 0x12b4 <__divmodhi4_neg1>
    12a8:	77 fd       	sbrc	r23, 7
    12aa:	08 d0       	rcall	.+16     	; 0x12bc <__divmodhi4_neg2>
    12ac:	36 d0       	rcall	.+108    	; 0x131a <__udivmodhi4>
    12ae:	07 fc       	sbrc	r0, 7
    12b0:	05 d0       	rcall	.+10     	; 0x12bc <__divmodhi4_neg2>
    12b2:	3e f4       	brtc	.+14     	; 0x12c2 <__divmodhi4_exit>

000012b4 <__divmodhi4_neg1>:
    12b4:	90 95       	com	r25
    12b6:	81 95       	neg	r24
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	08 95       	ret

000012bc <__divmodhi4_neg2>:
    12bc:	70 95       	com	r23
    12be:	61 95       	neg	r22
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255

000012c2 <__divmodhi4_exit>:
    12c2:	08 95       	ret

000012c4 <__divmodsi4>:
    12c4:	05 2e       	mov	r0, r21
    12c6:	97 fb       	bst	r25, 7
    12c8:	16 f4       	brtc	.+4      	; 0x12ce <__divmodsi4+0xa>
    12ca:	00 94       	com	r0
    12cc:	0f d0       	rcall	.+30     	; 0x12ec <__negsi2>
    12ce:	57 fd       	sbrc	r21, 7
    12d0:	05 d0       	rcall	.+10     	; 0x12dc <__divmodsi4_neg2>
    12d2:	37 d0       	rcall	.+110    	; 0x1342 <__udivmodsi4>
    12d4:	07 fc       	sbrc	r0, 7
    12d6:	02 d0       	rcall	.+4      	; 0x12dc <__divmodsi4_neg2>
    12d8:	46 f4       	brtc	.+16     	; 0x12ea <__divmodsi4_exit>
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <__negsi2>

000012dc <__divmodsi4_neg2>:
    12dc:	50 95       	com	r21
    12de:	40 95       	com	r20
    12e0:	30 95       	com	r19
    12e2:	21 95       	neg	r18
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	4f 4f       	sbci	r20, 0xFF	; 255
    12e8:	5f 4f       	sbci	r21, 0xFF	; 255

000012ea <__divmodsi4_exit>:
    12ea:	08 95       	ret

000012ec <__negsi2>:
    12ec:	90 95       	com	r25
    12ee:	80 95       	com	r24
    12f0:	70 95       	com	r23
    12f2:	61 95       	neg	r22
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	8f 4f       	sbci	r24, 0xFF	; 255
    12f8:	9f 4f       	sbci	r25, 0xFF	; 255
    12fa:	08 95       	ret

000012fc <__umulhisi3>:
    12fc:	a2 9f       	mul	r26, r18
    12fe:	b0 01       	movw	r22, r0
    1300:	b3 9f       	mul	r27, r19
    1302:	c0 01       	movw	r24, r0
    1304:	a3 9f       	mul	r26, r19
    1306:	70 0d       	add	r23, r0
    1308:	81 1d       	adc	r24, r1
    130a:	11 24       	eor	r1, r1
    130c:	91 1d       	adc	r25, r1
    130e:	b2 9f       	mul	r27, r18
    1310:	70 0d       	add	r23, r0
    1312:	81 1d       	adc	r24, r1
    1314:	11 24       	eor	r1, r1
    1316:	91 1d       	adc	r25, r1
    1318:	08 95       	ret

0000131a <__udivmodhi4>:
    131a:	aa 1b       	sub	r26, r26
    131c:	bb 1b       	sub	r27, r27
    131e:	51 e1       	ldi	r21, 0x11	; 17
    1320:	07 c0       	rjmp	.+14     	; 0x1330 <__udivmodhi4_ep>

00001322 <__udivmodhi4_loop>:
    1322:	aa 1f       	adc	r26, r26
    1324:	bb 1f       	adc	r27, r27
    1326:	a6 17       	cp	r26, r22
    1328:	b7 07       	cpc	r27, r23
    132a:	10 f0       	brcs	.+4      	; 0x1330 <__udivmodhi4_ep>
    132c:	a6 1b       	sub	r26, r22
    132e:	b7 0b       	sbc	r27, r23

00001330 <__udivmodhi4_ep>:
    1330:	88 1f       	adc	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	5a 95       	dec	r21
    1336:	a9 f7       	brne	.-22     	; 0x1322 <__udivmodhi4_loop>
    1338:	80 95       	com	r24
    133a:	90 95       	com	r25
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	08 95       	ret

00001342 <__udivmodsi4>:
    1342:	a1 e2       	ldi	r26, 0x21	; 33
    1344:	1a 2e       	mov	r1, r26
    1346:	aa 1b       	sub	r26, r26
    1348:	bb 1b       	sub	r27, r27
    134a:	fd 01       	movw	r30, r26
    134c:	0d c0       	rjmp	.+26     	; 0x1368 <__udivmodsi4_ep>

0000134e <__udivmodsi4_loop>:
    134e:	aa 1f       	adc	r26, r26
    1350:	bb 1f       	adc	r27, r27
    1352:	ee 1f       	adc	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	a2 17       	cp	r26, r18
    1358:	b3 07       	cpc	r27, r19
    135a:	e4 07       	cpc	r30, r20
    135c:	f5 07       	cpc	r31, r21
    135e:	20 f0       	brcs	.+8      	; 0x1368 <__udivmodsi4_ep>
    1360:	a2 1b       	sub	r26, r18
    1362:	b3 0b       	sbc	r27, r19
    1364:	e4 0b       	sbc	r30, r20
    1366:	f5 0b       	sbc	r31, r21

00001368 <__udivmodsi4_ep>:
    1368:	66 1f       	adc	r22, r22
    136a:	77 1f       	adc	r23, r23
    136c:	88 1f       	adc	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	1a 94       	dec	r1
    1372:	69 f7       	brne	.-38     	; 0x134e <__udivmodsi4_loop>
    1374:	60 95       	com	r22
    1376:	70 95       	com	r23
    1378:	80 95       	com	r24
    137a:	90 95       	com	r25
    137c:	9b 01       	movw	r18, r22
    137e:	ac 01       	movw	r20, r24
    1380:	bd 01       	movw	r22, r26
    1382:	cf 01       	movw	r24, r30
    1384:	08 95       	ret

00001386 <do_rand>:
    1386:	8f 92       	push	r8
    1388:	9f 92       	push	r9
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	ec 01       	movw	r28, r24
    139c:	68 81       	ld	r22, Y
    139e:	79 81       	ldd	r23, Y+1	; 0x01
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	9b 81       	ldd	r25, Y+3	; 0x03
    13a4:	61 15       	cp	r22, r1
    13a6:	71 05       	cpc	r23, r1
    13a8:	81 05       	cpc	r24, r1
    13aa:	91 05       	cpc	r25, r1
    13ac:	21 f4       	brne	.+8      	; 0x13b6 <do_rand+0x30>
    13ae:	64 e2       	ldi	r22, 0x24	; 36
    13b0:	79 ed       	ldi	r23, 0xD9	; 217
    13b2:	8b e5       	ldi	r24, 0x5B	; 91
    13b4:	97 e0       	ldi	r25, 0x07	; 7
    13b6:	2d e1       	ldi	r18, 0x1D	; 29
    13b8:	33 ef       	ldi	r19, 0xF3	; 243
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	82 df       	rcall	.-252    	; 0x12c4 <__divmodsi4>
    13c0:	49 01       	movw	r8, r18
    13c2:	5a 01       	movw	r10, r20
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	a7 ea       	ldi	r26, 0xA7	; 167
    13ca:	b1 e4       	ldi	r27, 0x41	; 65
    13cc:	15 d3       	rcall	.+1578   	; 0x19f8 <__muluhisi3>
    13ce:	6b 01       	movw	r12, r22
    13d0:	7c 01       	movw	r14, r24
    13d2:	ac ee       	ldi	r26, 0xEC	; 236
    13d4:	b4 ef       	ldi	r27, 0xF4	; 244
    13d6:	a5 01       	movw	r20, r10
    13d8:	94 01       	movw	r18, r8
    13da:	1a d3       	rcall	.+1588   	; 0x1a10 <__mulohisi3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8c 0d       	add	r24, r12
    13e2:	9d 1d       	adc	r25, r13
    13e4:	ae 1d       	adc	r26, r14
    13e6:	bf 1d       	adc	r27, r15
    13e8:	b7 ff       	sbrs	r27, 7
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <do_rand+0x6c>
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	a1 09       	sbc	r26, r1
    13f0:	b0 48       	sbci	r27, 0x80	; 128
    13f2:	88 83       	st	Y, r24
    13f4:	99 83       	std	Y+1, r25	; 0x01
    13f6:	aa 83       	std	Y+2, r26	; 0x02
    13f8:	bb 83       	std	Y+3, r27	; 0x03
    13fa:	9f 77       	andi	r25, 0x7F	; 127
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	9f 90       	pop	r9
    140e:	8f 90       	pop	r8
    1410:	08 95       	ret

00001412 <rand_r>:
    1412:	b9 cf       	rjmp	.-142    	; 0x1386 <do_rand>

00001414 <rand>:
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	b6 cf       	rjmp	.-148    	; 0x1386 <do_rand>

0000141a <srand>:
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1422:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1426:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    142a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    142e:	08 95       	ret

00001430 <strcmp>:
    1430:	fb 01       	movw	r30, r22
    1432:	dc 01       	movw	r26, r24
    1434:	8d 91       	ld	r24, X+
    1436:	01 90       	ld	r0, Z+
    1438:	80 19       	sub	r24, r0
    143a:	01 10       	cpse	r0, r1
    143c:	d9 f3       	breq	.-10     	; 0x1434 <strcmp+0x4>
    143e:	99 0b       	sbc	r25, r25
    1440:	08 95       	ret

00001442 <sprintf>:
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	2e 97       	sbiw	r28, 0x0e	; 14
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	0d 89       	ldd	r16, Y+21	; 0x15
    145c:	1e 89       	ldd	r17, Y+22	; 0x16
    145e:	86 e0       	ldi	r24, 0x06	; 6
    1460:	8c 83       	std	Y+4, r24	; 0x04
    1462:	1a 83       	std	Y+2, r17	; 0x02
    1464:	09 83       	std	Y+1, r16	; 0x01
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9f e7       	ldi	r25, 0x7F	; 127
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	ae 01       	movw	r20, r28
    1470:	47 5e       	subi	r20, 0xE7	; 231
    1472:	5f 4f       	sbci	r21, 0xFF	; 255
    1474:	6f 89       	ldd	r22, Y+23	; 0x17
    1476:	78 8d       	ldd	r23, Y+24	; 0x18
    1478:	ce 01       	movw	r24, r28
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	10 d0       	rcall	.+32     	; 0x149e <vfprintf>
    147e:	ef 81       	ldd	r30, Y+7	; 0x07
    1480:	f8 85       	ldd	r31, Y+8	; 0x08
    1482:	e0 0f       	add	r30, r16
    1484:	f1 1f       	adc	r31, r17
    1486:	10 82       	st	Z, r1
    1488:	2e 96       	adiw	r28, 0x0e	; 14
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	08 95       	ret

0000149e <vfprintf>:
    149e:	2f 92       	push	r2
    14a0:	3f 92       	push	r3
    14a2:	4f 92       	push	r4
    14a4:	5f 92       	push	r5
    14a6:	6f 92       	push	r6
    14a8:	7f 92       	push	r7
    14aa:	8f 92       	push	r8
    14ac:	9f 92       	push	r9
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	2b 97       	sbiw	r28, 0x0b	; 11
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	6c 01       	movw	r12, r24
    14d4:	7b 01       	movw	r14, r22
    14d6:	8a 01       	movw	r16, r20
    14d8:	fc 01       	movw	r30, r24
    14da:	17 82       	std	Z+7, r1	; 0x07
    14dc:	16 82       	std	Z+6, r1	; 0x06
    14de:	83 81       	ldd	r24, Z+3	; 0x03
    14e0:	81 ff       	sbrs	r24, 1
    14e2:	bf c1       	rjmp	.+894    	; 0x1862 <vfprintf+0x3c4>
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	3c 01       	movw	r6, r24
    14ea:	f6 01       	movw	r30, r12
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	f7 01       	movw	r30, r14
    14f0:	93 fd       	sbrc	r25, 3
    14f2:	85 91       	lpm	r24, Z+
    14f4:	93 ff       	sbrs	r25, 3
    14f6:	81 91       	ld	r24, Z+
    14f8:	7f 01       	movw	r14, r30
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <vfprintf+0x62>
    14fe:	ad c1       	rjmp	.+858    	; 0x185a <vfprintf+0x3bc>
    1500:	85 32       	cpi	r24, 0x25	; 37
    1502:	39 f4       	brne	.+14     	; 0x1512 <vfprintf+0x74>
    1504:	93 fd       	sbrc	r25, 3
    1506:	85 91       	lpm	r24, Z+
    1508:	93 ff       	sbrs	r25, 3
    150a:	81 91       	ld	r24, Z+
    150c:	7f 01       	movw	r14, r30
    150e:	85 32       	cpi	r24, 0x25	; 37
    1510:	21 f4       	brne	.+8      	; 0x151a <vfprintf+0x7c>
    1512:	b6 01       	movw	r22, r12
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	d6 d1       	rcall	.+940    	; 0x18c4 <fputc>
    1518:	e8 cf       	rjmp	.-48     	; 0x14ea <vfprintf+0x4c>
    151a:	91 2c       	mov	r9, r1
    151c:	21 2c       	mov	r2, r1
    151e:	31 2c       	mov	r3, r1
    1520:	ff e1       	ldi	r31, 0x1F	; 31
    1522:	f3 15       	cp	r31, r3
    1524:	d8 f0       	brcs	.+54     	; 0x155c <vfprintf+0xbe>
    1526:	8b 32       	cpi	r24, 0x2B	; 43
    1528:	79 f0       	breq	.+30     	; 0x1548 <vfprintf+0xaa>
    152a:	38 f4       	brcc	.+14     	; 0x153a <vfprintf+0x9c>
    152c:	80 32       	cpi	r24, 0x20	; 32
    152e:	79 f0       	breq	.+30     	; 0x154e <vfprintf+0xb0>
    1530:	83 32       	cpi	r24, 0x23	; 35
    1532:	a1 f4       	brne	.+40     	; 0x155c <vfprintf+0xbe>
    1534:	23 2d       	mov	r18, r3
    1536:	20 61       	ori	r18, 0x10	; 16
    1538:	1d c0       	rjmp	.+58     	; 0x1574 <vfprintf+0xd6>
    153a:	8d 32       	cpi	r24, 0x2D	; 45
    153c:	61 f0       	breq	.+24     	; 0x1556 <vfprintf+0xb8>
    153e:	80 33       	cpi	r24, 0x30	; 48
    1540:	69 f4       	brne	.+26     	; 0x155c <vfprintf+0xbe>
    1542:	23 2d       	mov	r18, r3
    1544:	21 60       	ori	r18, 0x01	; 1
    1546:	16 c0       	rjmp	.+44     	; 0x1574 <vfprintf+0xd6>
    1548:	83 2d       	mov	r24, r3
    154a:	82 60       	ori	r24, 0x02	; 2
    154c:	38 2e       	mov	r3, r24
    154e:	e3 2d       	mov	r30, r3
    1550:	e4 60       	ori	r30, 0x04	; 4
    1552:	3e 2e       	mov	r3, r30
    1554:	2a c0       	rjmp	.+84     	; 0x15aa <vfprintf+0x10c>
    1556:	f3 2d       	mov	r31, r3
    1558:	f8 60       	ori	r31, 0x08	; 8
    155a:	1d c0       	rjmp	.+58     	; 0x1596 <vfprintf+0xf8>
    155c:	37 fc       	sbrc	r3, 7
    155e:	2d c0       	rjmp	.+90     	; 0x15ba <vfprintf+0x11c>
    1560:	20 ed       	ldi	r18, 0xD0	; 208
    1562:	28 0f       	add	r18, r24
    1564:	2a 30       	cpi	r18, 0x0A	; 10
    1566:	40 f0       	brcs	.+16     	; 0x1578 <vfprintf+0xda>
    1568:	8e 32       	cpi	r24, 0x2E	; 46
    156a:	b9 f4       	brne	.+46     	; 0x159a <vfprintf+0xfc>
    156c:	36 fc       	sbrc	r3, 6
    156e:	75 c1       	rjmp	.+746    	; 0x185a <vfprintf+0x3bc>
    1570:	23 2d       	mov	r18, r3
    1572:	20 64       	ori	r18, 0x40	; 64
    1574:	32 2e       	mov	r3, r18
    1576:	19 c0       	rjmp	.+50     	; 0x15aa <vfprintf+0x10c>
    1578:	36 fe       	sbrs	r3, 6
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <vfprintf+0xea>
    157c:	8a e0       	ldi	r24, 0x0A	; 10
    157e:	98 9e       	mul	r9, r24
    1580:	20 0d       	add	r18, r0
    1582:	11 24       	eor	r1, r1
    1584:	92 2e       	mov	r9, r18
    1586:	11 c0       	rjmp	.+34     	; 0x15aa <vfprintf+0x10c>
    1588:	ea e0       	ldi	r30, 0x0A	; 10
    158a:	2e 9e       	mul	r2, r30
    158c:	20 0d       	add	r18, r0
    158e:	11 24       	eor	r1, r1
    1590:	22 2e       	mov	r2, r18
    1592:	f3 2d       	mov	r31, r3
    1594:	f0 62       	ori	r31, 0x20	; 32
    1596:	3f 2e       	mov	r3, r31
    1598:	08 c0       	rjmp	.+16     	; 0x15aa <vfprintf+0x10c>
    159a:	8c 36       	cpi	r24, 0x6C	; 108
    159c:	21 f4       	brne	.+8      	; 0x15a6 <vfprintf+0x108>
    159e:	83 2d       	mov	r24, r3
    15a0:	80 68       	ori	r24, 0x80	; 128
    15a2:	38 2e       	mov	r3, r24
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <vfprintf+0x10c>
    15a6:	88 36       	cpi	r24, 0x68	; 104
    15a8:	41 f4       	brne	.+16     	; 0x15ba <vfprintf+0x11c>
    15aa:	f7 01       	movw	r30, r14
    15ac:	93 fd       	sbrc	r25, 3
    15ae:	85 91       	lpm	r24, Z+
    15b0:	93 ff       	sbrs	r25, 3
    15b2:	81 91       	ld	r24, Z+
    15b4:	7f 01       	movw	r14, r30
    15b6:	81 11       	cpse	r24, r1
    15b8:	b3 cf       	rjmp	.-154    	; 0x1520 <vfprintf+0x82>
    15ba:	98 2f       	mov	r25, r24
    15bc:	9f 7d       	andi	r25, 0xDF	; 223
    15be:	95 54       	subi	r25, 0x45	; 69
    15c0:	93 30       	cpi	r25, 0x03	; 3
    15c2:	28 f4       	brcc	.+10     	; 0x15ce <vfprintf+0x130>
    15c4:	0c 5f       	subi	r16, 0xFC	; 252
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	9f e3       	ldi	r25, 0x3F	; 63
    15ca:	99 83       	std	Y+1, r25	; 0x01
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <vfprintf+0x14a>
    15ce:	83 36       	cpi	r24, 0x63	; 99
    15d0:	31 f0       	breq	.+12     	; 0x15de <vfprintf+0x140>
    15d2:	83 37       	cpi	r24, 0x73	; 115
    15d4:	71 f0       	breq	.+28     	; 0x15f2 <vfprintf+0x154>
    15d6:	83 35       	cpi	r24, 0x53	; 83
    15d8:	09 f0       	breq	.+2      	; 0x15dc <vfprintf+0x13e>
    15da:	55 c0       	rjmp	.+170    	; 0x1686 <vfprintf+0x1e8>
    15dc:	20 c0       	rjmp	.+64     	; 0x161e <vfprintf+0x180>
    15de:	f8 01       	movw	r30, r16
    15e0:	80 81       	ld	r24, Z
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	0e 5f       	subi	r16, 0xFE	; 254
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	88 24       	eor	r8, r8
    15ea:	83 94       	inc	r8
    15ec:	91 2c       	mov	r9, r1
    15ee:	53 01       	movw	r10, r6
    15f0:	12 c0       	rjmp	.+36     	; 0x1616 <vfprintf+0x178>
    15f2:	28 01       	movw	r4, r16
    15f4:	f2 e0       	ldi	r31, 0x02	; 2
    15f6:	4f 0e       	add	r4, r31
    15f8:	51 1c       	adc	r5, r1
    15fa:	f8 01       	movw	r30, r16
    15fc:	a0 80       	ld	r10, Z
    15fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1600:	36 fe       	sbrs	r3, 6
    1602:	03 c0       	rjmp	.+6      	; 0x160a <vfprintf+0x16c>
    1604:	69 2d       	mov	r22, r9
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <vfprintf+0x170>
    160a:	6f ef       	ldi	r22, 0xFF	; 255
    160c:	7f ef       	ldi	r23, 0xFF	; 255
    160e:	c5 01       	movw	r24, r10
    1610:	4e d1       	rcall	.+668    	; 0x18ae <strnlen>
    1612:	4c 01       	movw	r8, r24
    1614:	82 01       	movw	r16, r4
    1616:	f3 2d       	mov	r31, r3
    1618:	ff 77       	andi	r31, 0x7F	; 127
    161a:	3f 2e       	mov	r3, r31
    161c:	15 c0       	rjmp	.+42     	; 0x1648 <vfprintf+0x1aa>
    161e:	28 01       	movw	r4, r16
    1620:	22 e0       	ldi	r18, 0x02	; 2
    1622:	42 0e       	add	r4, r18
    1624:	51 1c       	adc	r5, r1
    1626:	f8 01       	movw	r30, r16
    1628:	a0 80       	ld	r10, Z
    162a:	b1 80       	ldd	r11, Z+1	; 0x01
    162c:	36 fe       	sbrs	r3, 6
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <vfprintf+0x198>
    1630:	69 2d       	mov	r22, r9
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <vfprintf+0x19c>
    1636:	6f ef       	ldi	r22, 0xFF	; 255
    1638:	7f ef       	ldi	r23, 0xFF	; 255
    163a:	c5 01       	movw	r24, r10
    163c:	2d d1       	rcall	.+602    	; 0x1898 <strnlen_P>
    163e:	4c 01       	movw	r8, r24
    1640:	f3 2d       	mov	r31, r3
    1642:	f0 68       	ori	r31, 0x80	; 128
    1644:	3f 2e       	mov	r3, r31
    1646:	82 01       	movw	r16, r4
    1648:	33 fc       	sbrc	r3, 3
    164a:	19 c0       	rjmp	.+50     	; 0x167e <vfprintf+0x1e0>
    164c:	82 2d       	mov	r24, r2
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	88 16       	cp	r8, r24
    1652:	99 06       	cpc	r9, r25
    1654:	a0 f4       	brcc	.+40     	; 0x167e <vfprintf+0x1e0>
    1656:	b6 01       	movw	r22, r12
    1658:	80 e2       	ldi	r24, 0x20	; 32
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	33 d1       	rcall	.+614    	; 0x18c4 <fputc>
    165e:	2a 94       	dec	r2
    1660:	f5 cf       	rjmp	.-22     	; 0x164c <vfprintf+0x1ae>
    1662:	f5 01       	movw	r30, r10
    1664:	37 fc       	sbrc	r3, 7
    1666:	85 91       	lpm	r24, Z+
    1668:	37 fe       	sbrs	r3, 7
    166a:	81 91       	ld	r24, Z+
    166c:	5f 01       	movw	r10, r30
    166e:	b6 01       	movw	r22, r12
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	28 d1       	rcall	.+592    	; 0x18c4 <fputc>
    1674:	21 10       	cpse	r2, r1
    1676:	2a 94       	dec	r2
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	82 1a       	sub	r8, r18
    167c:	91 08       	sbc	r9, r1
    167e:	81 14       	cp	r8, r1
    1680:	91 04       	cpc	r9, r1
    1682:	79 f7       	brne	.-34     	; 0x1662 <vfprintf+0x1c4>
    1684:	e1 c0       	rjmp	.+450    	; 0x1848 <vfprintf+0x3aa>
    1686:	84 36       	cpi	r24, 0x64	; 100
    1688:	11 f0       	breq	.+4      	; 0x168e <vfprintf+0x1f0>
    168a:	89 36       	cpi	r24, 0x69	; 105
    168c:	39 f5       	brne	.+78     	; 0x16dc <vfprintf+0x23e>
    168e:	f8 01       	movw	r30, r16
    1690:	37 fe       	sbrs	r3, 7
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <vfprintf+0x204>
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	0c 5f       	subi	r16, 0xFC	; 252
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	08 c0       	rjmp	.+16     	; 0x16b2 <vfprintf+0x214>
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	07 2e       	mov	r0, r23
    16a8:	00 0c       	add	r0, r0
    16aa:	88 0b       	sbc	r24, r24
    16ac:	99 0b       	sbc	r25, r25
    16ae:	0e 5f       	subi	r16, 0xFE	; 254
    16b0:	1f 4f       	sbci	r17, 0xFF	; 255
    16b2:	f3 2d       	mov	r31, r3
    16b4:	ff 76       	andi	r31, 0x6F	; 111
    16b6:	3f 2e       	mov	r3, r31
    16b8:	97 ff       	sbrs	r25, 7
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <vfprintf+0x230>
    16bc:	90 95       	com	r25
    16be:	80 95       	com	r24
    16c0:	70 95       	com	r23
    16c2:	61 95       	neg	r22
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	8f 4f       	sbci	r24, 0xFF	; 255
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	f0 68       	ori	r31, 0x80	; 128
    16cc:	3f 2e       	mov	r3, r31
    16ce:	2a e0       	ldi	r18, 0x0A	; 10
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	a3 01       	movw	r20, r6
    16d4:	33 d1       	rcall	.+614    	; 0x193c <__ultoa_invert>
    16d6:	88 2e       	mov	r8, r24
    16d8:	86 18       	sub	r8, r6
    16da:	44 c0       	rjmp	.+136    	; 0x1764 <vfprintf+0x2c6>
    16dc:	85 37       	cpi	r24, 0x75	; 117
    16de:	31 f4       	brne	.+12     	; 0x16ec <vfprintf+0x24e>
    16e0:	23 2d       	mov	r18, r3
    16e2:	2f 7e       	andi	r18, 0xEF	; 239
    16e4:	b2 2e       	mov	r11, r18
    16e6:	2a e0       	ldi	r18, 0x0A	; 10
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	25 c0       	rjmp	.+74     	; 0x1736 <vfprintf+0x298>
    16ec:	93 2d       	mov	r25, r3
    16ee:	99 7f       	andi	r25, 0xF9	; 249
    16f0:	b9 2e       	mov	r11, r25
    16f2:	8f 36       	cpi	r24, 0x6F	; 111
    16f4:	c1 f0       	breq	.+48     	; 0x1726 <vfprintf+0x288>
    16f6:	18 f4       	brcc	.+6      	; 0x16fe <vfprintf+0x260>
    16f8:	88 35       	cpi	r24, 0x58	; 88
    16fa:	79 f0       	breq	.+30     	; 0x171a <vfprintf+0x27c>
    16fc:	ae c0       	rjmp	.+348    	; 0x185a <vfprintf+0x3bc>
    16fe:	80 37       	cpi	r24, 0x70	; 112
    1700:	19 f0       	breq	.+6      	; 0x1708 <vfprintf+0x26a>
    1702:	88 37       	cpi	r24, 0x78	; 120
    1704:	21 f0       	breq	.+8      	; 0x170e <vfprintf+0x270>
    1706:	a9 c0       	rjmp	.+338    	; 0x185a <vfprintf+0x3bc>
    1708:	e9 2f       	mov	r30, r25
    170a:	e0 61       	ori	r30, 0x10	; 16
    170c:	be 2e       	mov	r11, r30
    170e:	b4 fe       	sbrs	r11, 4
    1710:	0d c0       	rjmp	.+26     	; 0x172c <vfprintf+0x28e>
    1712:	fb 2d       	mov	r31, r11
    1714:	f4 60       	ori	r31, 0x04	; 4
    1716:	bf 2e       	mov	r11, r31
    1718:	09 c0       	rjmp	.+18     	; 0x172c <vfprintf+0x28e>
    171a:	34 fe       	sbrs	r3, 4
    171c:	0a c0       	rjmp	.+20     	; 0x1732 <vfprintf+0x294>
    171e:	29 2f       	mov	r18, r25
    1720:	26 60       	ori	r18, 0x06	; 6
    1722:	b2 2e       	mov	r11, r18
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <vfprintf+0x294>
    1726:	28 e0       	ldi	r18, 0x08	; 8
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <vfprintf+0x298>
    172c:	20 e1       	ldi	r18, 0x10	; 16
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <vfprintf+0x298>
    1732:	20 e1       	ldi	r18, 0x10	; 16
    1734:	32 e0       	ldi	r19, 0x02	; 2
    1736:	f8 01       	movw	r30, r16
    1738:	b7 fe       	sbrs	r11, 7
    173a:	07 c0       	rjmp	.+14     	; 0x174a <vfprintf+0x2ac>
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	0c 5f       	subi	r16, 0xFC	; 252
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	06 c0       	rjmp	.+12     	; 0x1756 <vfprintf+0x2b8>
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 5f       	subi	r16, 0xFE	; 254
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	a3 01       	movw	r20, r6
    1758:	f1 d0       	rcall	.+482    	; 0x193c <__ultoa_invert>
    175a:	88 2e       	mov	r8, r24
    175c:	86 18       	sub	r8, r6
    175e:	fb 2d       	mov	r31, r11
    1760:	ff 77       	andi	r31, 0x7F	; 127
    1762:	3f 2e       	mov	r3, r31
    1764:	36 fe       	sbrs	r3, 6
    1766:	0d c0       	rjmp	.+26     	; 0x1782 <vfprintf+0x2e4>
    1768:	23 2d       	mov	r18, r3
    176a:	2e 7f       	andi	r18, 0xFE	; 254
    176c:	a2 2e       	mov	r10, r18
    176e:	89 14       	cp	r8, r9
    1770:	58 f4       	brcc	.+22     	; 0x1788 <vfprintf+0x2ea>
    1772:	34 fe       	sbrs	r3, 4
    1774:	0b c0       	rjmp	.+22     	; 0x178c <vfprintf+0x2ee>
    1776:	32 fc       	sbrc	r3, 2
    1778:	09 c0       	rjmp	.+18     	; 0x178c <vfprintf+0x2ee>
    177a:	83 2d       	mov	r24, r3
    177c:	8e 7e       	andi	r24, 0xEE	; 238
    177e:	a8 2e       	mov	r10, r24
    1780:	05 c0       	rjmp	.+10     	; 0x178c <vfprintf+0x2ee>
    1782:	b8 2c       	mov	r11, r8
    1784:	a3 2c       	mov	r10, r3
    1786:	03 c0       	rjmp	.+6      	; 0x178e <vfprintf+0x2f0>
    1788:	b8 2c       	mov	r11, r8
    178a:	01 c0       	rjmp	.+2      	; 0x178e <vfprintf+0x2f0>
    178c:	b9 2c       	mov	r11, r9
    178e:	a4 fe       	sbrs	r10, 4
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <vfprintf+0x312>
    1792:	fe 01       	movw	r30, r28
    1794:	e8 0d       	add	r30, r8
    1796:	f1 1d       	adc	r31, r1
    1798:	80 81       	ld	r24, Z
    179a:	80 33       	cpi	r24, 0x30	; 48
    179c:	21 f4       	brne	.+8      	; 0x17a6 <vfprintf+0x308>
    179e:	9a 2d       	mov	r25, r10
    17a0:	99 7e       	andi	r25, 0xE9	; 233
    17a2:	a9 2e       	mov	r10, r25
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <vfprintf+0x31a>
    17a6:	a2 fe       	sbrs	r10, 2
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <vfprintf+0x318>
    17aa:	b3 94       	inc	r11
    17ac:	b3 94       	inc	r11
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <vfprintf+0x31a>
    17b0:	8a 2d       	mov	r24, r10
    17b2:	86 78       	andi	r24, 0x86	; 134
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <vfprintf+0x31a>
    17b6:	b3 94       	inc	r11
    17b8:	a3 fc       	sbrc	r10, 3
    17ba:	10 c0       	rjmp	.+32     	; 0x17dc <vfprintf+0x33e>
    17bc:	a0 fe       	sbrs	r10, 0
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <vfprintf+0x32e>
    17c0:	b2 14       	cp	r11, r2
    17c2:	80 f4       	brcc	.+32     	; 0x17e4 <vfprintf+0x346>
    17c4:	28 0c       	add	r2, r8
    17c6:	92 2c       	mov	r9, r2
    17c8:	9b 18       	sub	r9, r11
    17ca:	0d c0       	rjmp	.+26     	; 0x17e6 <vfprintf+0x348>
    17cc:	b2 14       	cp	r11, r2
    17ce:	58 f4       	brcc	.+22     	; 0x17e6 <vfprintf+0x348>
    17d0:	b6 01       	movw	r22, r12
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	76 d0       	rcall	.+236    	; 0x18c4 <fputc>
    17d8:	b3 94       	inc	r11
    17da:	f8 cf       	rjmp	.-16     	; 0x17cc <vfprintf+0x32e>
    17dc:	b2 14       	cp	r11, r2
    17de:	18 f4       	brcc	.+6      	; 0x17e6 <vfprintf+0x348>
    17e0:	2b 18       	sub	r2, r11
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <vfprintf+0x34a>
    17e4:	98 2c       	mov	r9, r8
    17e6:	21 2c       	mov	r2, r1
    17e8:	a4 fe       	sbrs	r10, 4
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <vfprintf+0x36c>
    17ec:	b6 01       	movw	r22, r12
    17ee:	80 e3       	ldi	r24, 0x30	; 48
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	68 d0       	rcall	.+208    	; 0x18c4 <fputc>
    17f4:	a2 fe       	sbrs	r10, 2
    17f6:	16 c0       	rjmp	.+44     	; 0x1824 <vfprintf+0x386>
    17f8:	a1 fc       	sbrc	r10, 1
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <vfprintf+0x364>
    17fc:	88 e7       	ldi	r24, 0x78	; 120
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0x368>
    1802:	88 e5       	ldi	r24, 0x58	; 88
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	b6 01       	movw	r22, r12
    1808:	0c c0       	rjmp	.+24     	; 0x1822 <vfprintf+0x384>
    180a:	8a 2d       	mov	r24, r10
    180c:	86 78       	andi	r24, 0x86	; 134
    180e:	51 f0       	breq	.+20     	; 0x1824 <vfprintf+0x386>
    1810:	a1 fe       	sbrs	r10, 1
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x37a>
    1814:	8b e2       	ldi	r24, 0x2B	; 43
    1816:	01 c0       	rjmp	.+2      	; 0x181a <vfprintf+0x37c>
    1818:	80 e2       	ldi	r24, 0x20	; 32
    181a:	a7 fc       	sbrc	r10, 7
    181c:	8d e2       	ldi	r24, 0x2D	; 45
    181e:	b6 01       	movw	r22, r12
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	50 d0       	rcall	.+160    	; 0x18c4 <fputc>
    1824:	89 14       	cp	r8, r9
    1826:	30 f4       	brcc	.+12     	; 0x1834 <vfprintf+0x396>
    1828:	b6 01       	movw	r22, r12
    182a:	80 e3       	ldi	r24, 0x30	; 48
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	4a d0       	rcall	.+148    	; 0x18c4 <fputc>
    1830:	9a 94       	dec	r9
    1832:	f8 cf       	rjmp	.-16     	; 0x1824 <vfprintf+0x386>
    1834:	8a 94       	dec	r8
    1836:	f3 01       	movw	r30, r6
    1838:	e8 0d       	add	r30, r8
    183a:	f1 1d       	adc	r31, r1
    183c:	80 81       	ld	r24, Z
    183e:	b6 01       	movw	r22, r12
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	40 d0       	rcall	.+128    	; 0x18c4 <fputc>
    1844:	81 10       	cpse	r8, r1
    1846:	f6 cf       	rjmp	.-20     	; 0x1834 <vfprintf+0x396>
    1848:	22 20       	and	r2, r2
    184a:	09 f4       	brne	.+2      	; 0x184e <vfprintf+0x3b0>
    184c:	4e ce       	rjmp	.-868    	; 0x14ea <vfprintf+0x4c>
    184e:	b6 01       	movw	r22, r12
    1850:	80 e2       	ldi	r24, 0x20	; 32
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	37 d0       	rcall	.+110    	; 0x18c4 <fputc>
    1856:	2a 94       	dec	r2
    1858:	f7 cf       	rjmp	.-18     	; 0x1848 <vfprintf+0x3aa>
    185a:	f6 01       	movw	r30, r12
    185c:	86 81       	ldd	r24, Z+6	; 0x06
    185e:	97 81       	ldd	r25, Z+7	; 0x07
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x3c8>
    1862:	8f ef       	ldi	r24, 0xFF	; 255
    1864:	9f ef       	ldi	r25, 0xFF	; 255
    1866:	2b 96       	adiw	r28, 0x0b	; 11
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	ef 90       	pop	r14
    187e:	df 90       	pop	r13
    1880:	cf 90       	pop	r12
    1882:	bf 90       	pop	r11
    1884:	af 90       	pop	r10
    1886:	9f 90       	pop	r9
    1888:	8f 90       	pop	r8
    188a:	7f 90       	pop	r7
    188c:	6f 90       	pop	r6
    188e:	5f 90       	pop	r5
    1890:	4f 90       	pop	r4
    1892:	3f 90       	pop	r3
    1894:	2f 90       	pop	r2
    1896:	08 95       	ret

00001898 <strnlen_P>:
    1898:	fc 01       	movw	r30, r24
    189a:	05 90       	lpm	r0, Z+
    189c:	61 50       	subi	r22, 0x01	; 1
    189e:	70 40       	sbci	r23, 0x00	; 0
    18a0:	01 10       	cpse	r0, r1
    18a2:	d8 f7       	brcc	.-10     	; 0x189a <strnlen_P+0x2>
    18a4:	80 95       	com	r24
    18a6:	90 95       	com	r25
    18a8:	8e 0f       	add	r24, r30
    18aa:	9f 1f       	adc	r25, r31
    18ac:	08 95       	ret

000018ae <strnlen>:
    18ae:	fc 01       	movw	r30, r24
    18b0:	61 50       	subi	r22, 0x01	; 1
    18b2:	70 40       	sbci	r23, 0x00	; 0
    18b4:	01 90       	ld	r0, Z+
    18b6:	01 10       	cpse	r0, r1
    18b8:	d8 f7       	brcc	.-10     	; 0x18b0 <strnlen+0x2>
    18ba:	80 95       	com	r24
    18bc:	90 95       	com	r25
    18be:	8e 0f       	add	r24, r30
    18c0:	9f 1f       	adc	r25, r31
    18c2:	08 95       	ret

000018c4 <fputc>:
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	fb 01       	movw	r30, r22
    18ce:	23 81       	ldd	r18, Z+3	; 0x03
    18d0:	21 fd       	sbrc	r18, 1
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <fputc+0x16>
    18d4:	8f ef       	ldi	r24, 0xFF	; 255
    18d6:	9f ef       	ldi	r25, 0xFF	; 255
    18d8:	2c c0       	rjmp	.+88     	; 0x1932 <fputc+0x6e>
    18da:	22 ff       	sbrs	r18, 2
    18dc:	16 c0       	rjmp	.+44     	; 0x190a <fputc+0x46>
    18de:	46 81       	ldd	r20, Z+6	; 0x06
    18e0:	57 81       	ldd	r21, Z+7	; 0x07
    18e2:	24 81       	ldd	r18, Z+4	; 0x04
    18e4:	35 81       	ldd	r19, Z+5	; 0x05
    18e6:	42 17       	cp	r20, r18
    18e8:	53 07       	cpc	r21, r19
    18ea:	44 f4       	brge	.+16     	; 0x18fc <fputc+0x38>
    18ec:	a0 81       	ld	r26, Z
    18ee:	b1 81       	ldd	r27, Z+1	; 0x01
    18f0:	9d 01       	movw	r18, r26
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	31 83       	std	Z+1, r19	; 0x01
    18f8:	20 83       	st	Z, r18
    18fa:	8c 93       	st	X, r24
    18fc:	26 81       	ldd	r18, Z+6	; 0x06
    18fe:	37 81       	ldd	r19, Z+7	; 0x07
    1900:	2f 5f       	subi	r18, 0xFF	; 255
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	37 83       	std	Z+7, r19	; 0x07
    1906:	26 83       	std	Z+6, r18	; 0x06
    1908:	14 c0       	rjmp	.+40     	; 0x1932 <fputc+0x6e>
    190a:	8b 01       	movw	r16, r22
    190c:	ec 01       	movw	r28, r24
    190e:	fb 01       	movw	r30, r22
    1910:	00 84       	ldd	r0, Z+8	; 0x08
    1912:	f1 85       	ldd	r31, Z+9	; 0x09
    1914:	e0 2d       	mov	r30, r0
    1916:	09 95       	icall
    1918:	89 2b       	or	r24, r25
    191a:	e1 f6       	brne	.-72     	; 0x18d4 <fputc+0x10>
    191c:	d8 01       	movw	r26, r16
    191e:	16 96       	adiw	r26, 0x06	; 6
    1920:	8d 91       	ld	r24, X+
    1922:	9c 91       	ld	r25, X
    1924:	17 97       	sbiw	r26, 0x07	; 7
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	17 96       	adiw	r26, 0x07	; 7
    192a:	9c 93       	st	X, r25
    192c:	8e 93       	st	-X, r24
    192e:	16 97       	sbiw	r26, 0x06	; 6
    1930:	ce 01       	movw	r24, r28
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <__ultoa_invert>:
    193c:	fa 01       	movw	r30, r20
    193e:	aa 27       	eor	r26, r26
    1940:	28 30       	cpi	r18, 0x08	; 8
    1942:	51 f1       	breq	.+84     	; 0x1998 <__ultoa_invert+0x5c>
    1944:	20 31       	cpi	r18, 0x10	; 16
    1946:	81 f1       	breq	.+96     	; 0x19a8 <__ultoa_invert+0x6c>
    1948:	e8 94       	clt
    194a:	6f 93       	push	r22
    194c:	6e 7f       	andi	r22, 0xFE	; 254
    194e:	6e 5f       	subi	r22, 0xFE	; 254
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	8f 4f       	sbci	r24, 0xFF	; 255
    1954:	9f 4f       	sbci	r25, 0xFF	; 255
    1956:	af 4f       	sbci	r26, 0xFF	; 255
    1958:	b1 e0       	ldi	r27, 0x01	; 1
    195a:	3e d0       	rcall	.+124    	; 0x19d8 <__ultoa_invert+0x9c>
    195c:	b4 e0       	ldi	r27, 0x04	; 4
    195e:	3c d0       	rcall	.+120    	; 0x19d8 <__ultoa_invert+0x9c>
    1960:	67 0f       	add	r22, r23
    1962:	78 1f       	adc	r23, r24
    1964:	89 1f       	adc	r24, r25
    1966:	9a 1f       	adc	r25, r26
    1968:	a1 1d       	adc	r26, r1
    196a:	68 0f       	add	r22, r24
    196c:	79 1f       	adc	r23, r25
    196e:	8a 1f       	adc	r24, r26
    1970:	91 1d       	adc	r25, r1
    1972:	a1 1d       	adc	r26, r1
    1974:	6a 0f       	add	r22, r26
    1976:	71 1d       	adc	r23, r1
    1978:	81 1d       	adc	r24, r1
    197a:	91 1d       	adc	r25, r1
    197c:	a1 1d       	adc	r26, r1
    197e:	20 d0       	rcall	.+64     	; 0x19c0 <__ultoa_invert+0x84>
    1980:	09 f4       	brne	.+2      	; 0x1984 <__ultoa_invert+0x48>
    1982:	68 94       	set
    1984:	3f 91       	pop	r19
    1986:	2a e0       	ldi	r18, 0x0A	; 10
    1988:	26 9f       	mul	r18, r22
    198a:	11 24       	eor	r1, r1
    198c:	30 19       	sub	r19, r0
    198e:	30 5d       	subi	r19, 0xD0	; 208
    1990:	31 93       	st	Z+, r19
    1992:	de f6       	brtc	.-74     	; 0x194a <__ultoa_invert+0xe>
    1994:	cf 01       	movw	r24, r30
    1996:	08 95       	ret
    1998:	46 2f       	mov	r20, r22
    199a:	47 70       	andi	r20, 0x07	; 7
    199c:	40 5d       	subi	r20, 0xD0	; 208
    199e:	41 93       	st	Z+, r20
    19a0:	b3 e0       	ldi	r27, 0x03	; 3
    19a2:	0f d0       	rcall	.+30     	; 0x19c2 <__ultoa_invert+0x86>
    19a4:	c9 f7       	brne	.-14     	; 0x1998 <__ultoa_invert+0x5c>
    19a6:	f6 cf       	rjmp	.-20     	; 0x1994 <__ultoa_invert+0x58>
    19a8:	46 2f       	mov	r20, r22
    19aa:	4f 70       	andi	r20, 0x0F	; 15
    19ac:	40 5d       	subi	r20, 0xD0	; 208
    19ae:	4a 33       	cpi	r20, 0x3A	; 58
    19b0:	18 f0       	brcs	.+6      	; 0x19b8 <__ultoa_invert+0x7c>
    19b2:	49 5d       	subi	r20, 0xD9	; 217
    19b4:	31 fd       	sbrc	r19, 1
    19b6:	40 52       	subi	r20, 0x20	; 32
    19b8:	41 93       	st	Z+, r20
    19ba:	02 d0       	rcall	.+4      	; 0x19c0 <__ultoa_invert+0x84>
    19bc:	a9 f7       	brne	.-22     	; 0x19a8 <__ultoa_invert+0x6c>
    19be:	ea cf       	rjmp	.-44     	; 0x1994 <__ultoa_invert+0x58>
    19c0:	b4 e0       	ldi	r27, 0x04	; 4
    19c2:	a6 95       	lsr	r26
    19c4:	97 95       	ror	r25
    19c6:	87 95       	ror	r24
    19c8:	77 95       	ror	r23
    19ca:	67 95       	ror	r22
    19cc:	ba 95       	dec	r27
    19ce:	c9 f7       	brne	.-14     	; 0x19c2 <__ultoa_invert+0x86>
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	61 05       	cpc	r22, r1
    19d4:	71 05       	cpc	r23, r1
    19d6:	08 95       	ret
    19d8:	9b 01       	movw	r18, r22
    19da:	ac 01       	movw	r20, r24
    19dc:	0a 2e       	mov	r0, r26
    19de:	06 94       	lsr	r0
    19e0:	57 95       	ror	r21
    19e2:	47 95       	ror	r20
    19e4:	37 95       	ror	r19
    19e6:	27 95       	ror	r18
    19e8:	ba 95       	dec	r27
    19ea:	c9 f7       	brne	.-14     	; 0x19de <__ultoa_invert+0xa2>
    19ec:	62 0f       	add	r22, r18
    19ee:	73 1f       	adc	r23, r19
    19f0:	84 1f       	adc	r24, r20
    19f2:	95 1f       	adc	r25, r21
    19f4:	a0 1d       	adc	r26, r0
    19f6:	08 95       	ret

000019f8 <__muluhisi3>:
    19f8:	81 dc       	rcall	.-1790   	; 0x12fc <__umulhisi3>
    19fa:	a5 9f       	mul	r26, r21
    19fc:	90 0d       	add	r25, r0
    19fe:	b4 9f       	mul	r27, r20
    1a00:	90 0d       	add	r25, r0
    1a02:	a4 9f       	mul	r26, r20
    1a04:	80 0d       	add	r24, r0
    1a06:	91 1d       	adc	r25, r1
    1a08:	11 24       	eor	r1, r1
    1a0a:	08 95       	ret

00001a0c <__mulshisi3>:
    1a0c:	b7 ff       	sbrs	r27, 7
    1a0e:	f4 cf       	rjmp	.-24     	; 0x19f8 <__muluhisi3>

00001a10 <__mulohisi3>:
    1a10:	f3 df       	rcall	.-26     	; 0x19f8 <__muluhisi3>
    1a12:	82 1b       	sub	r24, r18
    1a14:	93 0b       	sbc	r25, r19
    1a16:	08 95       	ret

00001a18 <_exit>:
    1a18:	f8 94       	cli

00001a1a <__stop_program>:
    1a1a:	ff cf       	rjmp	.-2      	; 0x1a1a <__stop_program>
